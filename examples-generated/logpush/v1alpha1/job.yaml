apiVersion: logpush.cloudflare.upbound.io/v1alpha1
kind: Job
metadata:
  annotations:
    meta.upbound.io/example-id: logpush/v1alpha1/job
  labels:
    testing.upbound.io/example-name: http_requests
  name: http-requests
spec:
  forProvider:
    dataset: http_requests
    destinationConf: r2://cloudflare-logs/http_requests/date={DATE}?account-id=${var.account_id}&access-key-id=${cloudflare_api_token.logpush_r2_token.id}&secret-access-key=${sha256(cloudflare_api_token.logpush_r2_token.value)}
    enabled: true
    logpullOptions: fields=ClientIP,ClientRequestHost,ClientRequestMethod,ClientRequestURI,EdgeEndTimestamp,EdgeResponseBytes,EdgeResponseStatus,EdgeStartTimestamp,RayID&timestamps=rfc3339
    name: http_requests
    zoneIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example

---

apiVersion: account.cloudflare.upbound.io/v1alpha1
kind: APIToken
metadata:
  annotations:
    meta.upbound.io/example-id: logpush/v1alpha1/job
  labels:
    testing.upbound.io/example-name: logpush_r2_token
  name: logpush-r2-token
spec:
  forProvider:
    name: logpush_r2_token
    policy:
    - permissionGroups:
      - ${data.cloudflare_api_token_permission_groups.all.permissions["Workers R2
        Storage Write"]}
      resources:
        com.cloudflare.api.account.*: '*'

---

apiVersion: logpush.cloudflare.upbound.io/v1alpha1
kind: OwnershipChallenge
metadata:
  annotations:
    meta.upbound.io/example-id: logpush/v1alpha1/job
  labels:
    testing.upbound.io/example-name: ownership_challenge
  name: ownership-challenge
spec:
  forProvider:
    destinationConf: s3://my-bucket-path?region=us-west-2
    zoneIdSelector:
      matchLabels:
        testing.upbound.io/example-name: example
