name: cloudflare/cloudflare
resources:
    cloudflare_access_application:
        subCategory: ""
        description: Provides a Cloudflare Access Application resource. Access Applications are used to restrict access to a whole application using an authorisation gateway managed by Cloudflare.
        name: cloudflare_access_application
        title: cloudflare_access_application Resource - Cloudflare
        examples:
            - name: staging_app
              manifest: |-
                {
                  "auto_redirect_to_identity": false,
                  "domain": "staging.example.com",
                  "name": "staging application",
                  "session_duration": "24h",
                  "type": "self_hosted",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: staging_app
              manifest: |-
                {
                  "cors_headers": [
                    {
                      "allow_credentials": true,
                      "allowed_methods": [
                        "GET",
                        "POST",
                        "OPTIONS"
                      ],
                      "allowed_origins": [
                        "https://example.com"
                      ],
                      "max_age": 10
                    }
                  ],
                  "domain": "staging.example.com",
                  "name": "staging application",
                  "session_duration": "24h",
                  "type": "self_hosted",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            allow_all_headers: (Boolean) Value to determine whether all HTTP headers are exposed.
            allow_all_methods: (Boolean) Value to determine whether all methods are exposed.
            allow_all_origins: (Boolean) Value to determine whether all origins are permitted to make CORS requests.
            allow_credentials: (Boolean) Value to determine if credentials (cookies, authorization headers, or TLS client certificates) are included with requests.
            allowed_headers: (Set of String) List of HTTP headers to expose via CORS.
            allowed_idps: (Set of String) The identity providers selected for the application.
            allowed_methods: (Set of String) List of methods to expose via CORS.
            allowed_origins: (Set of String) List of origins permitted to make CORS requests.
            app_launcher_visible: (Boolean) Option to show/hide applications in App Launcher. Defaults to true.
            aud: (String) Application Audience (AUD) Tag of the application.
            auto_redirect_to_identity: (Boolean) Option to skip identity provider selection if only one is configured in allowed_idps. Defaults to false.
            consumer_service_url: (String) The service provider's endpoint that is responsible for receiving and parsing a SAML assertion.
            cors_headers: (Block List) CORS configuration for the Access Application. See below for reference structure. (see below for nested schema)
            custom_deny_message: (String) Option that returns a custom error message when a user is denied access to the application.
            custom_deny_url: (String) Option that redirects to a custom URL when a user is denied access to the application.
            domain: (String) The complete URL of the asset you wish to put Cloudflare Access in front of. Can include subdomains or paths. Or both.
            enable_binding_cookie: (Boolean) Option to provide increased security against compromised authorization tokens and CSRF attacks by requiring an additional "binding" cookie on requests. Defaults to false.
            http_only_cookie_attribute: (Boolean) Option to add the HttpOnly cookie flag to access tokens.
            id: (String) The ID of this resource.
            logo_url: (String) Image URL for the logo shown in the app launcher dashboard.
            max_age: (Number) The maximum time a preflight request will be cached.
            name: (String) Friendly name of the Access Application.
            name_id_format: (String) The format of the name identifier sent to the SaaS application. Defaults to email.
            saas_app: '(Block List, Max: 1) SaaS configuration for the Access Application. (see below for nested schema)'
            same_site_cookie_attribute: '(String) Defines the same-site cookie setting for access tokens. Available values: none, lax, strict.'
            service_auth_401_redirect: (Boolean) Option to return a 401 status code in service authentication rules on failed requests. Defaults to false.
            session_duration: (String) How often a user will be forced to re-authorise. Must be in the format 48h or 2h45m. Defaults to 24h.
            skip_interstitial: (Boolean) Option to skip the authorization interstitial when using the CLI. Defaults to false.
            sp_entity_id: (String) A globally unique name for an identity or service provider.
            type: '(String) The application type. Available values: app_launcher, bookmark, biso, dash_sso, saas, self_hosted, ssh, vnc, warp. Defaults to self_hosted.'
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - $ terraform import cloudflare_access_application.example <account_id>/<application_id>
    cloudflare_access_bookmark:
        subCategory: ""
        description: Provides a Cloudflare Access Bookmark resource. Access Bookmark applications are not protected behind Access but are displayed in the App Launcher.
        name: cloudflare_access_bookmark
        title: cloudflare_access_bookmark Resource - Cloudflare
        examples:
            - name: my_bookmark_app
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "app_launcher_visible": true,
                  "domain": "example.com",
                  "logo_url": "https://example.com/example.png",
                  "name": "My Bookmark App"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            app_launcher_visible: (Boolean) Option to show/hide the bookmark in the app launcher. Defaults to true.
            domain: (String) The domain of the bookmark application. Can include subdomains, paths, or both.
            id: (String) The ID of this resource.
            logo_url: (String) The image URL for the logo shown in the app launcher dashboard.
            name: (String) Name of the bookmark application.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - $ terraform import cloudflare_access_bookmark.example <account_id>/<bookmark_id>
    cloudflare_access_ca_certificate:
        subCategory: ""
        description: Cloudflare Access can replace traditional SSH key models with short-lived certificates issued to your users based on the token generated by their Access login.
        name: cloudflare_access_ca_certificate
        title: cloudflare_access_ca_certificate Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "application_id": "6cd6cea3-3ef2-4542-9aea-85a0bbcd5414"
                }
            - name: another_example
              manifest: |-
                {
                  "application_id": "fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            application_id: (String) The Access Application ID to associate with the CA certificate.
            aud: (String) Application Audience (AUD) Tag of the CA certificate.
            id: (String) The ID of this resource.
            public_key: (String) Cryptographic public key of the generated CA certificate.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - |-
              # Account level CA certificate import.
              $ terraform import cloudflare_access_ca_certificate.example account/<account_id>/<certificate_id>

              # Zone level CA certificate import.
              $ terraform import cloudflare_access_ca_certificate.example account/<zone_id>/<certificate_id>
    cloudflare_access_group:
        subCategory: ""
        description: Provides a Cloudflare Access Group resource. Access Groups are used in conjunction with Access Policies to restrict access to a particular resource based on group membership.
        name: cloudflare_access_group
        title: cloudflare_access_group Resource - Cloudflare
        examples:
            - name: test_group
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "include": [
                    {
                      "email": [
                        "test@example.com"
                      ]
                    }
                  ],
                  "name": "staging group"
                }
            - name: test_group
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "include": [
                    {
                      "email": [
                        "test@example.com"
                      ]
                    }
                  ],
                  "name": "staging group",
                  "require": {
                    "ip": [
                      "${var.office_ip}"
                    ]
                  }
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id. Modifying this attribute will force creation of a new resource.
            any_valid_service_token: (Boolean)
            attribute_name: (String)
            attribute_value: (String)
            auth_method: (String)
            azure: (Block List) (see below for nested schema)
            certificate: (Boolean)
            common_name: (String)
            device_posture: (List of String)
            email: (List of String)
            email_domain: (List of String)
            evaluate_url: (String)
            everyone: (Boolean)
            exclude: (Block List) (see below for nested schema)
            external_evaluation: '(Block List, Max: 1) (see below for nested schema)'
            geo: (List of String)
            github: (Block List) (see below for nested schema)
            group: (List of String)
            gsuite: (Block List) (see below for nested schema)
            id: (String) The ID of this resource.
            identity_provider_id: (String)
            include: '(Block List, Min: 1) (see below for nested schema)'
            ip: (List of String)
            keys_url: (String)
            login_method: (List of String)
            name: (String)
            okta: (Block List) (see below for nested schema)
            require: (Block List) (see below for nested schema)
            saml: (Block List) (see below for nested schema)
            service_token: (List of String)
            teams: (List of String)
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - $ terraform import cloudflare_access_group.example <account_id>/<group_id>
    cloudflare_access_identity_provider:
        subCategory: ""
        description: Provides a Cloudflare Access Identity Provider resource. Identity Providers are used as an authentication or authorisation source within Access.
        name: cloudflare_access_identity_provider
        title: cloudflare_access_identity_provider Resource - Cloudflare
        examples:
            - name: pin_login
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "name": "PIN login",
                  "type": "onetimepin"
                }
            - name: github_oauth
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "config": [
                    {
                      "client_id": "example",
                      "client_secret": "secret_key"
                    }
                  ],
                  "name": "GitHub OAuth",
                  "type": "github"
                }
            - name: jumpcloud_saml
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "config": [
                    {
                      "attributes": [
                        "email",
                        "username"
                      ],
                      "idp_public_cert": "MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg\nuTnQyuOqPuHbnN83d/2l1NSYKCbHt24o",
                      "issuer_url": "jumpcloud",
                      "sign_request": false,
                      "sso_target_url": "https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess"
                    }
                  ],
                  "name": "JumpCloud SAML",
                  "type": "saml"
                }
            - name: okta
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "config": [
                    {
                      "api_token": "okta_api_token",
                      "client_id": "example",
                      "client_secret": "secret_key",
                      "okta_account": "https://example.com"
                    }
                  ],
                  "name": "Okta",
                  "type": "okta"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id. Modifying this attribute will force creation of a new resource.
            api_token: (String)
            apps_domain: (String)
            attributes: (List of String)
            auth_url: (String)
            centrify_account: (String)
            centrify_app_id: (String)
            certs_url: (String)
            client_id: (String)
            client_secret: (String)
            config: (Block List) Provider configuration from the developer documentation. (see below for nested schema)
            directory_id: (String)
            email_attribute_name: (String)
            id: (String) The ID of this resource.
            idp_public_cert: (String)
            issuer_url: (String)
            name: (String) Friendly name of the Access Identity Provider configuration.
            okta_account: (String)
            onelogin_account: (String)
            pkce_enabled: (Boolean)
            redirect_url: (String)
            sign_request: (Boolean)
            sso_target_url: (String)
            support_groups: (Boolean)
            token_url: (String)
            type: '(String) The provider type to use. Available values: centrify, facebook, google-apps, oidc, github, google, saml, linkedin, azureAD, okta, onetimepin, onelogin, yandex.'
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_access_identity_provider.example <account_id>/<identity_provider_id>
    cloudflare_access_keys_configuration Resource - Cloudflare:
        subCategory: ""
        description: Access Keys Configuration defines the rotation policy for the keys that access will use to sign data.
        name: cloudflare_access_keys_configuration Resource - Cloudflare
        title: cloudflare_access_keys_configuration Resource - Cloudflare
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            id: (String) The ID of this resource.
            key_rotation_interval_days: (Number) Number of days to trigger a rotation of the keys.
        importStatements: []
    cloudflare_access_mutual_tls_certificate:
        subCategory: ""
        description: Provides a Cloudflare Access Mutual TLS Certificate resource. Mutual TLS authentication ensures that the traffic is secure and trusted in both directions between a client and server and can be used with Access to only allows requests from devices with a corresponding client certificate.
        name: cloudflare_access_mutual_tls_certificate
        title: cloudflare_access_mutual_tls_certificate Resource - Cloudflare
        examples:
            - name: my_cert
              manifest: |-
                {
                  "associated_hostnames": [
                    "staging.example.com"
                  ],
                  "certificate": "${var.ca_pem}",
                  "name": "My Root Cert",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              references:
                certificate: var.ca_pem
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            associated_hostnames: (List of String) The hostnames that will be prompted for this certificate.
            certificate: (String) The Root CA for your certificates.
            fingerprint: (String)
            id: (String) The ID of this resource.
            name: (String) The name of the certificate.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - |-
              # Account level import.
              $ terraform import cloudflare_access_mutual_tls_certificate.example account/<account_id>/<mutual_tls_certificate_id>

              # Zone level import.
              $ terraform import cloudflare_access_mutual_tls_certificate.example zone/<zone_id>/<mutual_tls_certificate_id>
    cloudflare_access_organization:
        subCategory: ""
        description: A Zero Trust organization defines the user login experience.
        name: cloudflare_access_organization
        title: cloudflare_access_organization Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "auth_domain": "example.cloudflareaccess.com",
                  "is_ui_read_only": false,
                  "login_design": [
                    {
                      "background_color": "#ffffff",
                      "footer_text": "My footer text",
                      "header_text": "My header text",
                      "logo_path": "https://example.com/logo.png",
                      "text_color": "#000000"
                    }
                  ],
                  "name": "example.cloudflareaccess.com"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            auth_domain: (String) The unique subdomain assigned to your Zero Trust organization.
            background_color: (String) The background color on the login page.
            footer_text: (String) The text at the bottom of the login page.
            header_text: (String) The text at the top of the login page.
            id: (String) The ID of this resource.
            is_ui_read_only: (Boolean) When set to true, this will disable all editing of Access resources via the Zero Trust Dashboard.
            login_design: (Block List) (see below for nested schema)
            logo_path: (String) The URL of the logo on the login page.
            name: (String) The name of your Zero Trust organization.
            text_color: (String) The text color on the login page.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - $ terraform import cloudflare_access_organization.example <account_id>
    cloudflare_access_policy:
        subCategory: ""
        description: Provides a Cloudflare Access Policy resource. Access Policies are used in conjunction with Access Applications to restrict access to a particular resource.
        name: cloudflare_access_policy
        title: cloudflare_access_policy Resource - Cloudflare
        examples:
            - name: test_policy
              manifest: |-
                {
                  "application_id": "cb029e245cfdd66dc8d2e570d5dd3322",
                  "decision": "allow",
                  "include": [
                    {
                      "email": [
                        "test@example.com"
                      ]
                    }
                  ],
                  "name": "staging policy",
                  "precedence": "1",
                  "require": [
                    {
                      "email": [
                        "test@example.com"
                      ]
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: test_policy
              manifest: |-
                {
                  "application_id": "cb029e245cfdd66dc8d2e570d5dd3322",
                  "decision": "allow",
                  "include": [
                    {
                      "email": [
                        "test@example.com"
                      ]
                    }
                  ],
                  "name": "staging policy",
                  "precedence": "1",
                  "require": [
                    {
                      "ip": [
                        "${var.office_ip}"
                      ]
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            any_valid_service_token: (Boolean)
            application_id: (String) The ID of the application the policy is associated with.
            approval_group: (Block List) (see below for nested schema)
            approval_required: (Boolean)
            approvals_needed: (Number) Number of approvals needed.
            attribute_name: (String)
            attribute_value: (String)
            auth_method: (String)
            azure: (Block List) (see below for nested schema)
            certificate: (Boolean)
            common_name: (String)
            decision: '(String) Defines the action Access will take if the policy matches the user. Available values: allow, deny, non_identity, bypass.'
            device_posture: (List of String)
            email: (List of String)
            email_addresses: (List of String) List of emails to request approval from.
            email_domain: (List of String)
            email_list_uuid: (String)
            evaluate_url: (String)
            everyone: (Boolean)
            exclude: (Block List) A series of access conditions, see Access Groups. (see below for nested schema)
            external_evaluation: '(Block List, Max: 1) (see below for nested schema)'
            geo: (List of String)
            github: (Block List) (see below for nested schema)
            group: (List of String)
            gsuite: (Block List) (see below for nested schema)
            id: (String) The ID of this resource.
            identity_provider_id: (String)
            include: '(Block List, Min: 1) A series of access conditions, see Access Groups. (see below for nested schema)'
            ip: (List of String)
            keys_url: (String)
            login_method: (List of String)
            name: (String) Friendly name of the Access Policy.
            okta: (Block List) (see below for nested schema)
            precedence: (Number) The unique precedence for policies on a single application.
            purpose_justification_prompt: (String) The prompt to display to the user for a justification for accessing the resource. Required when using purpose_justification_required.
            purpose_justification_required: (Boolean) Whether to prompt the user for a justification for accessing the resource.
            require: (Block List) A series of access conditions, see Access Groups. (see below for nested schema)
            saml: (Block List) (see below for nested schema)
            service_token: (List of String)
            teams: (List of String)
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - |-
              # Account level import.
              $ terraform import cloudflare_access_policy.example account/<account_id>/<application_id>/<policy_id>

              # Zone level import.
              $ terraform import cloudflare_access_policy.example zone/<zone_id>/<application_id>/<policy_id>
    cloudflare_access_rule:
        subCategory: ""
        description: Provides a Cloudflare IP Firewall Access Rule resource. Access control can be applied on basis of IP addresses, IP ranges, AS numbers or countries.
        name: cloudflare_access_rule
        title: cloudflare_access_rule Resource - Cloudflare
        examples:
            - name: tor_exit_nodes
              manifest: |-
                {
                  "configuration": [
                    {
                      "target": "country",
                      "value": "T1"
                    }
                  ],
                  "mode": "challenge",
                  "notes": "Requests coming from known Tor exit nodes",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: antarctica
              manifest: |-
                {
                  "configuration": [
                    {
                      "target": "country",
                      "value": "AQ"
                    }
                  ],
                  "mode": "whitelist",
                  "notes": "Requests coming from Antarctica",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: office_network
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "configuration": [
                    {
                      "target": "ip_range",
                      "value": "${element(var.my_office, count.index)}"
                    }
                  ],
                  "count": "${length(var.my_office)}",
                  "mode": "whitelist",
                  "notes": "Requests coming from office network"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            configuration: '(Block List, Min: 1, Max: 1) Rule configuration to apply to a matched request. Modifying this attribute will force creation of a new resource. (see below for nested schema)'
            id: (String) The ID of this resource.
            mode: '(String) The action to apply to a matched request. Available values: block, challenge, whitelist, js_challenge, managed_challenge.'
            notes: (String) A personal note about the rule. Typically used as a reminder or explanation for the rule.
            target: '(String) The request property to target. Available values: ip, ip6, ip_range, asn, country. Modifying this attribute will force creation of a new resource.'
            value: (String) The value to target. Depends on target's type. Modifying this attribute will force creation of a new resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - |-
              # User level access rule import.
              $ terraform import cloudflare_access_rule.default user/<user_id>/<rule_id>

              # Zone level access rule import.
              $ terraform import cloudflare_access_rule.default zone/<zone_id>/<rule_id>

              # Account level access rule import.
              $ terraform import cloudflare_access_rule.default account/<account_id>/<rule_id>
    cloudflare_access_service_token:
        subCategory: ""
        description: Access Service Tokens are used for service-to-service communication when an application is behind Cloudflare Access.
        name: cloudflare_access_service_token
        title: cloudflare_access_service_token Resource - Cloudflare
        examples:
            - name: my_app
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "name": "CI/CD app"
                }
            - name: my_app
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "lifecycle": [
                    {
                      "create_before_destroy": true
                    }
                  ],
                  "min_days_for_renewal": 30,
                  "name": "CI/CD app renewed"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            client_id: (String) UUID client ID associated with the Service Token. Modifying this attribute will force creation of a new resource.
            client_secret: (String, Sensitive) A secret for interacting with Access protocols. Modifying this attribute will force creation of a new resource.
            expires_at: (String) Date when the token expires.
            id: (String) The ID of this resource.
            min_days_for_renewal: (Number) Refresh the token if terraform is run within the specified amount of days before expiration. Defaults to 0.
            name: (String) Friendly name of the token's intent.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - |-
              # If you are importing an Access Service Token you will not have the
              # client_secret available in the state for use. The client_secret is only
              # available once, at creation. In most cases, it is better to just create a new
              # resource should you need to reference it in other resources.
              $ terraform import cloudflare_access_service_token.example <account_id>/<service_token_id>
    cloudflare_account:
        subCategory: ""
        description: Provides a Cloudflare Account resource. Account is the basic resource for working with Cloudflare zones, teams and users.
        name: cloudflare_account
        title: cloudflare_account Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "enforce_twofactor": true,
                  "name": "some-enterprise-account",
                  "type": "enterprise"
                }
        argumentDocs:
            enforce_twofactor: (Boolean) Whether 2FA is enforced on the account. Defaults to false.
            id: (String) The ID of this resource.
            name: (String) The name of the account that is displayed in the Cloudflare dashboard.
            type: '(String) Account type. Available values: enterprise, standard. Defaults to standard. Modifying this attribute will force creation of a new resource.'
        importStatements:
            - $ terraform import cloudflare_account.example <account_id>
    cloudflare_account_member:
        subCategory: ""
        description: Provides a resource which manages Cloudflare account members.
        name: cloudflare_account_member
        title: cloudflare_account_member Resource - Cloudflare
        examples:
            - name: example_user
              manifest: |-
                {
                  "email_address": "user@example.com",
                  "role_ids": [
                    "68b329da9893e34099c7d8ad5cb9c940",
                    "d784fa8b6d98d27699781bd9a7cf19f0"
                  ]
                }
        argumentDocs:
            account_id: (String) Account ID to create the account member in.
            email_address: (String) The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
            id: (String) The ID of this resource.
            role_ids: (Set of String) List of account role IDs that you want to assign to a member.
            status: '(String) A member''s status in the account. Available values: accepted, pending.'
        importStatements:
            - $ terraform import cloudflare_account_member.example <account_id>/<member_id>
    cloudflare_api_shield:
        subCategory: ""
        description: Provides a resource to manage API Shield configurations.
        name: cloudflare_api_shield
        title: cloudflare_api_shield Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "auth_id_characteristics": [
                    {
                      "name": "my-example-header",
                      "type": "header"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            auth_id_characteristics: (Block List) Characteristics define properties across which auth-ids can be computed in a privacy-preserving manner. (see below for nested schema)
            id: (String) The ID of this resource.
            name: (String) The name of the characteristic.
            type: '(String) The type of characteristic. Available values: header, cookie.'
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_api_token:
        subCategory: ""
        description: Provides a resource which manages Cloudflare API tokens. Read more about permission groups and their applicable scopes in the developer documentation https://developers.cloudflare.com/api/tokens/create/permissions.
        name: cloudflare_api_token
        title: cloudflare_api_token Resource - Cloudflare
        examples:
            - name: api_token_create
              manifest: |-
                {
                  "condition": [
                    {
                      "request_ip": [
                        {
                          "in": [
                            "192.0.2.1/32"
                          ],
                          "not_in": [
                            "198.51.100.1/32"
                          ]
                        }
                      ]
                    }
                  ],
                  "name": "api_token_create",
                  "policy": [
                    {
                      "expires_on": "2020-01-01T00:00:00Z",
                      "not_before": "2018-07-01T05:20:00Z",
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"API Tokens Write\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.user.${var.user_id}": "*"
                      }
                    }
                  ]
                }
            - name: logs_account_all
              manifest: |-
                {
                  "name": "logs_account_all",
                  "policy": [
                    {
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"Access: Audit Logs Read\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.*": "*"
                      }
                    }
                  ]
                }
            - name: logs_account
              manifest: |-
                {
                  "name": "logs_account",
                  "policy": [
                    {
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"Access: Audit Logs Read\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.${var.account_id}": "*"
                      }
                    }
                  ]
                }
            - name: dns_tls_edit
              manifest: |-
                {
                  "name": "dns_tls_edit",
                  "policy": [
                    {
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"DNS Write\"]}",
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"SSL and Certificates Write\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.zone.${var.zone_id}": "*"
                      }
                    }
                  ]
                }
            - name: dns_tls_edit_all_except_one
              manifest: |-
                {
                  "name": "dns_tls_edit_all_except_one",
                  "policy": [
                    {
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"DNS Write\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.zone.*": "*"
                      }
                    },
                    {
                      "effect": "deny",
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"DNS Write\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.zone.${var.zone_id}": "*"
                      }
                    }
                  ]
                }
            - name: dns_edit_all_account
              manifest: |-
                {
                  "name": "dns_edit_all_account",
                  "policy": [
                    {
                      "permission_groups": [
                        "${data.cloudflare_api_token_permission_groups.all.permissions[\"DNS Write\"]}"
                      ],
                      "resources": {
                        "com.cloudflare.api.account.${var.account_id}": "${jsonencode({\n        \"com.cloudflare.api.account.zone.*\" = \"*\"\n      })}"
                      }
                    }
                  ]
                }
        argumentDocs:
            condition: '(Block List, Max: 1) Conditions under which the token should be considered valid. (see below for nested schema)'
            effect: '(String) Effect of the policy. Available values: allow, deny. Defaults to allow.'
            expires_on: (String) The expiration time on or after which the token MUST NOT be accepted for processing.
            id: (String) The ID of this resource.
            in: (Set of String) List of IP addresses or CIDR notation where the token may be used from. If not specified, the token will be valid for all IP addresses.
            issued_on: (String) Timestamp of when the token was issued.
            modified_on: (String) Timestamp of when the token was last modified.
            name: (String) Name of the API Token.
            not_before: (String) The time before which the token MUST NOT be accepted for processing.
            not_in: (Set of String) List of IP addresses or CIDR notation where the token should not be used from.
            permission_groups: (Set of String) List of permissions groups IDs. See documentation for more information.
            policy: '(Block Set, Min: 1) Permissions policy. Multiple policy blocks can be defined. (see below for nested schema)'
            request_ip: '(Block List, Max: 1) Request IP related conditions. (see below for nested schema)'
            resources: (Map of String) Describes what operations against which resources are allowed or denied.
            status: (String)
            value: (String, Sensitive) The value of the API Token.
        importStatements: []
    cloudflare_argo:
        subCategory: ""
        description: Cloudflare Argo controls the routing to your origin and tiered caching options to speed up your website browsing experience.
        name: cloudflare_argo
        title: cloudflare_argo Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "smart_routing": "on",
                  "tiered_caching": "on",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            smart_routing: '(String) Whether smart routing is enabled. Available values: on, off.'
            tiered_caching: '(String) Whether tiered caching is enabled. Available values: on, off.'
            zone_id: (String) The zone identifier to target for the resource.
        importStatements:
            - $ terraform import cloudflare_argo.example <zone_id>
    cloudflare_argo_tunnel:
        subCategory: ""
        description: Provides the ability to manage Cloudflare Argo Tunnels.
        name: cloudflare_argo_tunnel
        title: cloudflare_argo_tunnel
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "d41d8cd98f00b204e9800998ecf8427e",
                  "name": "my-tunnel",
                  "secret": "AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="
                }
        argumentDocs:
            account_id: '- (Required) The Cloudflare account ID that you wish to manage the Argo Tunnel on.'
            cname: '- Usable CNAME for accessing the Argo Tunnel.'
            d41d8cd98f00b204e9800998ecf8427e: is the account ID
            fd2455cb-5fcc-4c13-8738-8d8d2605237f: is the Argo Tunnel UUID
            name: '- (Required) A user-friendly name chosen when the tunnel is created. Cannot be empty.'
            secret: '- (Required) 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel''s password. Anyone wishing to run the tunnel needs this password.'
            tunnel_token: '- Token used by a connector to authenticate and run the tunnel.'
        importStatements: []
    cloudflare_authenticated_origin_pulls:
        subCategory: ""
        description: Provides a Cloudflare Authenticated Origin Pulls resource.
        name: cloudflare_authenticated_origin_pulls
        title: cloudflare_authenticated_origin_pulls
        examples:
            - name: my_aop
              manifest: |-
                {
                  "enabled": true,
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              dependencies:
                cloudflare_authenticated_origin_pulls_certificate.my_per_hostname_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-hostname",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
                cloudflare_authenticated_origin_pulls_certificate.my_per_zone_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-zone",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
            - name: my_per_zone_aop
              manifest: |-
                {
                  "authenticated_origin_pulls_certificate": "${cloudflare_authenticated_origin_pulls_certificate.my_per_zone_aop_cert.id}",
                  "enabled": true,
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                authenticated_origin_pulls_certificate: cloudflare_authenticated_origin_pulls_certificate.my_per_zone_aop_cert.id
              dependencies:
                cloudflare_authenticated_origin_pulls_certificate.my_per_hostname_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-hostname",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
                cloudflare_authenticated_origin_pulls_certificate.my_per_zone_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-zone",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
            - name: my_per_hostname_aop
              manifest: |-
                {
                  "authenticated_origin_pulls_certificate": "${cloudflare_authenticated_origin_pulls_certificate.my_per_hostname_aop_cert.id}",
                  "enabled": true,
                  "hostname": "aop.example.com",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                authenticated_origin_pulls_certificate: cloudflare_authenticated_origin_pulls_certificate.my_per_hostname_aop_cert.id
              dependencies:
                cloudflare_authenticated_origin_pulls_certificate.my_per_hostname_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-hostname",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
                cloudflare_authenticated_origin_pulls_certificate.my_per_zone_aop_cert: |-
                    {
                      "certificate": "-----INSERT CERTIFICATE-----",
                      "private_key": "-----INSERT PRIVATE KEY-----",
                      "type": "per-zone",
                      "zone_id": "${var.cloudflare_zone_id}"
                    }
        argumentDocs:
            authenticated_origin_pulls_certificate: '- (Optional) The id of an uploaded Authenticated Origin Pulls certificate. If no hostname is provided, this certificate will be used zone wide as Per-Zone Authenticated Origin Pulls.'
            enabled: '- (Required) Whether or not to enable Authenticated Origin Pulls on the given zone or hostname.'
            hostname: '- (Optional) Specify a hostname to enable Per-Hostname Authenticated Origin Pulls on, using the provided certificate.'
            zone_id: '- (Required) The zone ID to upload the certificate to.'
        importStatements: []
    cloudflare_authenticated_origin_pulls_certificate:
        subCategory: ""
        description: Provides a Cloudflare Authenticated Origin Pulls certificate resource.
        name: cloudflare_authenticated_origin_pulls_certificate
        title: cloudflare_authenticated_origin_pulls_certificate
        examples:
            - name: my_per_zone_aop_cert
              manifest: |-
                {
                  "certificate": "-----INSERT CERTIFICATE-----",
                  "private_key": "-----INSERT PRIVATE KEY-----",
                  "type": "per-zone",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
            - name: my_per_hostname_aop_cert
              manifest: |-
                {
                  "certificate": "-----INSERT CERTIFICATE-----",
                  "private_key": "-----INSERT PRIVATE KEY-----",
                  "type": "per-hostname",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
        argumentDocs:
            certificate: '- (Required) The public client certificate.'
            private_key: '- (Required) The private key of the client certificate.'
            type: '- (Required) The form of Authenticated Origin Pulls to upload the certificate to.'
            zone_id: '- (Required) The zone ID to upload the certificate to.'
        importStatements: []
    cloudflare_byo_ip_prefix:
        subCategory: ""
        description: Provides the ability to manage Bring-Your-Own-IP prefixes (BYOIP) which are used with or without Magic Transit.
        name: cloudflare_byo_ip_prefix
        title: cloudflare_byo_ip_prefix Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "advertisement": "on",
                  "description": "Example IP Prefix",
                  "prefix_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            advertisement: '(String) Whether or not the prefix shall be announced. A prefix can be activated or deactivated once every 15 minutes (attempting more regular updates will trigger rate limiting). Available values: on, off.'
            description: (String) Description of the BYO IP prefix.
            id: (String) The ID of this resource.
            prefix_id: (String) The assigned Bring-Your-Own-IP prefix ID. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_byo_ip_prefix.example <account_id>/<prefix_id>
    cloudflare_certificate_pack:
        subCategory: ""
        description: Provides a Cloudflare Certificate Pack resource that is used to provision managed TLS certificates.
        name: cloudflare_certificate_pack
        title: cloudflare_certificate_pack Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "certificate_authority": "digicert",
                  "cloudflare_branding": false,
                  "hosts": [
                    "example.com",
                    "sub.example.com"
                  ],
                  "type": "advanced",
                  "validation_method": "txt",
                  "validity_days": 30,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: example
              manifest: |-
                {
                  "certificate_authority": "lets_encrypt",
                  "cloudflare_branding": false,
                  "hosts": [
                    "example.com",
                    "*.example.com"
                  ],
                  "type": "advanced",
                  "validation_method": "http",
                  "validity_days": 90,
                  "wait_for_active_status": true,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            certificate_authority: '(String) Which certificate authority to issue the certificate pack. Available values: digicert, lets_encrypt, google. Modifying this attribute will force creation of a new resource.'
            cloudflare_branding: (Boolean) Whether or not to include Cloudflare branding. This will add sni.cloudflaressl.com as the Common Name if set to true. Modifying this attribute will force creation of a new resource.
            cname_name: (String)
            cname_target: (String)
            emails: (List of String)
            hosts: '(Set of String) List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let''s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. Modifying this attribute will force creation of a new resource.'
            http_body: (String)
            http_url: (String)
            id: (String) The ID of this resource.
            message: (String)
            txt_name: (String)
            txt_value: (String)
            type: '(String) Certificate pack configuration type. Available values: advanced. Modifying this attribute will force creation of a new resource.'
            validation_errors: (Block List) (see below for nested schema)
            validation_method: '(String) Which validation method to use in order to prove domain ownership. Available values: txt, http, email. Modifying this attribute will force creation of a new resource.'
            validation_records: (Block List) (see below for nested schema)
            validity_days: '(Number) How long the certificate is valid for. Note: If using Let''s Encrypt, this value can only be 90 days. Available values: 14, 30, 90, 365. Modifying this attribute will force creation of a new resource.'
            wait_for_active_status: (Boolean) Whether or not to wait for a certificate pack to reach status active during creation. Defaults to false. Modifying this attribute will force creation of a new resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_certificate_pack.example 1d5fdc9e88c8a8c4518b068cd94331fe/8fda82e2-6af9-4eb2-992a-5ab65b792ef1
    cloudflare_custom_hostname:
        subCategory: ""
        description: Provides a Cloudflare custom hostname (also known as SSL for SaaS) resource.
        name: cloudflare_custom_hostname
        title: cloudflare_custom_hostname Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "hostname": "hostname.example.com",
                  "ssl": [
                    {
                      "method": "txt"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            certificate_authority: (String)
            ciphers: (Set of String) List of SSL/TLS ciphers to associate with this certificate.
            cname_name: (String)
            cname_target: (String)
            custom_certificate: (String) If a custom uploaded certificate is used.
            custom_key: (String) The key for a custom uploaded certificate.
            custom_metadata: (Map of String) Custom metadata associated with custom hostname. Only supports primitive string values, all other values are accessible via the API directly.
            custom_origin_server: (String) The custom origin server used for certificates.
            custom_origin_sni: (String) The custom origin SNI used for certificates.
            early_hints: '(String) Whether early hints should be supported. Available values: on, off.'
            emails: (List of String)
            hostname: (String) Hostname you intend to request a certificate for. Modifying this attribute will force creation of a new resource.
            http_body: (String)
            http_url: (String)
            http2: '(String) Whether HTTP2 should be supported. Available values: on, off.'
            id: (String) The ID of this resource.
            message: (String)
            method: '(String) Domain control validation (DCV) method used for this hostname. Available values: http, txt, email.'
            min_tls_version: '(String) Lowest version of TLS this certificate should support. Available values: 1.0, 1.1, 1.2, 1.3.'
            ownership_verification: (Map of String)
            ownership_verification_http: (Map of String)
            settings: (Block List) SSL/TLS settings for the certificate. (see below for nested schema)
            ssl: (Block List) SSL configuration of the certificate. (see below for nested schema)
            status: (String) Status of the certificate.
            tls13: '(String) Whether TLSv1.3 should be supported. Available values: on, off.'
            txt_name: (String)
            txt_value: (String)
            type: '(String) Level of validation to be used for this hostname. Available values: dv. Defaults to dv.'
            validation_errors: (List of Object) (see below for nested schema)
            validation_records: (List of Object) (see below for nested schema)
            wait_for_ssl_pending_validation: (Boolean) Whether to wait for a custom hostname SSL sub-object to reach status pending_validation during creation. Defaults to false.
            wildcard: (Boolean) Indicates whether the certificate covers a wildcard.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_custom_hostname.example 1d5fdc9e88c8a8c4518b068cd94331fe/0d89c70d-ad9f-4843-b99f-6cc0252067e9
    cloudflare_custom_hostname_fallback_origin:
        subCategory: ""
        description: Provides a Cloudflare custom hostname fallback origin resource.
        name: cloudflare_custom_hostname_fallback_origin
        title: cloudflare_custom_hostname_fallback_origin
        examples:
            - name: fallback_origin
              manifest: |-
                {
                  "origin": "fallback.example.com",
                  "zone_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
        argumentDocs:
            origin: '- (Required) Hostname you intend to fallback requests to. Origin must be a proxied A/AAAA/CNAME DNS record within Clouldflare.'
            status: '- Status of the fallback origin''s activation.'
            zone_id: '- (Required) The DNS zone ID where the custom hostname should be assigned.'
        importStatements: []
    cloudflare_custom_pages:
        subCategory: ""
        description: Provides a resource which manages Cloudflare custom pages.
        name: cloudflare_custom_pages
        title: cloudflare_custom_pages
        examples:
            - name: basic_challenge
              manifest: |-
                {
                  "state": "customized",
                  "type": "basic_challenge",
                  "url": "https://example.com/challenge.html",
                  "zone_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
        argumentDocs:
            account_id: |-
                - (Optional) The account ID where the custom pages should be
                updated. Either account_id or zone_id must be provided. If
                account_id is present, it will override the zone setting.
            customPageLevel: '- Either account or zone.'
            identifier: '- The ID of the account or zone you intend to manage.'
            pageType: '- The value from the type argument.'
            state: |-
                - (Required) Managed state of the custom page. Must be one of
                default, customized. If the value is default it will be removed
                from the Terraform state management.
            type: |-
                - (Required) The type of custom page you wish to update. Must
                be one of basic_challenge, waf_challenge, waf_block,
                ratelimit_block, country_challenge, ip_block, under_attack,
                500_errors, 1000_errors, always_online, managed_challenge.
            url: '- (Required) URL of where the custom page source is located.'
            zone_id: |-
                - (Optional) The zone ID where the custom pages should be
                updated. Either zone_id or account_id must be provided.
        importStatements: []
    cloudflare_custom_ssl:
        subCategory: ""
        description: Provides a Cloudflare custom SSL resource.
        name: cloudflare_custom_ssl
        title: cloudflare_custom_ssl
        examples:
            - name: foossl
              manifest: |-
                {
                  "custom_ssl_options": [
                    {}
                  ],
                  "zone_id": "${var.cloudflare_zone_id}"
                }
        argumentDocs:
            bundle_method: '- (Optional) Method of building intermediate certificate chain. A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Valid values are ubiquitous (default), optimal, force.'
            certificate: '- (Required) Certificate certificate and the intermediate(s)'
            custom_ssl_options: '- (Required) The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.'
            geo_restrictions: '- (Optional) Specifies the region where your private key can be held locally. Valid values are us, eu, highest_security.'
            private_key: '- (Required) Certificate''s private key'
            type: '- (Optional) Whether to enable support for legacy clients which do not include SNI in the TLS handshake. Valid values are legacy_custom (default), sni_custom.'
            zone_id: '- (Required) The DNS zone id to the custom ssl cert should be added.'
        importStatements: []
    cloudflare_device_policy_certificates:
        subCategory: ""
        description: Provides a Cloudflare Device Policy Certificates resource.
        name: cloudflare_device_policy_certificates
        title: cloudflare_device_policy_certificates
        examples:
            - name: example
              manifest: |-
                {
                  "enabled": true,
                  "zone_id": "1d5fdc9e88c8a8c4518b068cd94331fe"
                }
        argumentDocs:
            enabled: '- (Required) True if certificate generation is enabled.'
            id: '- ID of the device policy certificates setting.'
            zone_id: '- (Required) The zone ID where certificate generation is allowed.'
        importStatements: []
    cloudflare_device_posture_integration:
        subCategory: ""
        description: Provides a Cloudflare Device Posture Integration resource.
        name: cloudflare_device_posture_integration
        title: cloudflare_device_posture_integration
        examples:
            - name: third_party_devices_posture_integration
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "config": [
                    {
                      "api_url": "https://example.com/api",
                      "auth_url": "https://example.com/connect/token",
                      "client_id": "client-id",
                      "client_secret": "client-secret"
                    }
                  ],
                  "interval": "24h",
                  "name": "Device posture integration",
                  "type": "workspace_one"
                }
        argumentDocs:
            account_id: '- (Required) The account to which the device posture integration should be added.'
            api_url: '- (Required) The third-party API''s URL.'
            auth_url: '- (Required) The third-party authorization API URL.'
            client_id: '- (Required) The client identifier for authenticating API calls.'
            client_key: '- (Required) The client key for authenticating API calls.'
            client_secret: '- (Required) The client secret for authenticating API calls.'
            config: '- (Required) The device posture integration''s connection authorization parameters.'
            customer_id: '- (Required)  The customer identifier for authenticating API calls.'
            id: '- ID of the device posture integration.'
            interval: |-
                - (Optional) Indicates the frequency with which to poll the third-party API.
                Must be in the format "1h" or "30m". Valid units are h and m.
            name: '- (Optional) Name of the device posture integration.'
            type: '- (Required) The device posture integration type. Valid values are workspace_one.'
        importStatements: []
    cloudflare_device_posture_rule:
        subCategory: ""
        description: Provides a Cloudflare Device Posture Rule resource. Device posture rules configure security policies for device posture checks.
        name: cloudflare_device_posture_rule
        title: cloudflare_device_posture_rule Resource - Cloudflare
        examples:
            - name: eaxmple
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "description": "Device posture rule for corporate devices.",
                  "expiration": "24h",
                  "input": [
                    {
                      "id": "${cloudflare_teams_list.corporate_devices.id}",
                      "operator": "\u003c",
                      "os_distro_name": "ubuntu",
                      "os_distro_revision": "1.0.0",
                      "version": "1.0.0"
                    }
                  ],
                  "match": [
                    {
                      "platform": "linux"
                    }
                  ],
                  "name": "Corporate devices posture rule",
                  "schedule": "24h",
                  "type": "os_version"
                }
              references:
                input.id: cloudflare_teams_list.corporate_devices.id
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            compliance_status: (String) The workspace one device compliance status.
            connection_id: (String) The workspace one connection id.
            description: (String)
            domain: (String) The domain that the client must join.
            enabled: (Boolean) True if the firewall must be enabled.
            exists: (Boolean) Checks if the file should exist.
            expiration: (String) Expire posture results after the specified amount of time. Must be in the format 1h or 30m. Valid units are h and m.
            id: (String) The ID of this resource.
            input: (Block List) (see below for nested schema)
            match: (Block List) The conditions that the client must match to run the rule. (see below for nested schema)
            name: (String) Name of the device posture rule.
            operator: (String) The version comparison operator.
            os_distro_name: (String) The operating system excluding version information.
            os_distro_revision: (String) The operating system version excluding OS name information or release name.
            path: (String) The path to the file.
            platform: '(String) The platform of the device. Available values: windows, mac, linux, android, ios, chromeos.'
            require_all: (Boolean) True if all drives must be encrypted.
            running: (Boolean) Checks if the application should be running.
            schedule: (String) Tells the client when to run the device posture check. Must be in the format 1h or 30m. Valid units are h and m.
            sha256: (String) The sha256 hash of the file.
            thumbprint: (String) The thumbprint of the file certificate.
            type: '(String) The device posture rule type. Available values: serial_number, file, application, gateway, warp, domain_joined, os_version, disk_encryption, firewall, workspace_one, unique_client_id.'
            version: (String) The operating system semantic version.
        importStatements:
            - $ terraform import cloudflare_device_posture_rule.example <account_id>/<device_posture_rule_id>
    cloudflare_device_settings_policy:
        subCategory: ""
        description: Provides a Cloudflare Device Settings Policy resource. Device policies configure settings applied to WARP devices.
        name: cloudflare_device_settings_policy
        title: cloudflare_device_settings_policy Resource - Cloudflare
        examples:
            - name: developer_warp_policy
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "allow_mode_switch": true,
                  "allow_updates": true,
                  "allowed_to_leave": true,
                  "auto_connect": 0,
                  "captive_portal": 5,
                  "default": false,
                  "disable_auto_fallback": true,
                  "enabled": true,
                  "match": "any(identity.groups.name[*] in {\"Developers\"})",
                  "name": "Developers WARP settings policy",
                  "precedence": 10,
                  "service_mode_v2_mode": "warp",
                  "service_mode_v2_port": 3000,
                  "support_url": "https://cloudflare.com",
                  "switch_locked": true
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            allow_mode_switch: (Boolean) Whether to allow mode switch for this policy.
            allow_updates: (Boolean) Whether to allow updates under this policy.
            allowed_to_leave: (Boolean) Whether to allow devices to leave the organization. Defaults to true.
            auto_connect: (Number) The amount of time in minutes to reconnect after having been disabled.
            captive_portal: (Number) The captive portal value for this policy. Defaults to 180.
            default: (Boolean) Whether the policy refers to the default account policy.
            disable_auto_fallback: (Boolean) Whether to disable auto fallback for this policy.
            enabled: (Boolean) Whether the policy is enabled (cannot be set for default policies). Defaults to true.
            id: (String) The ID of this resource.
            match: (String) Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
            name: (String) Name of the policy.
            precedence: (Number) The precedence of the policy. Lower values indicate higher precedence.
            service_mode_v2_mode: (String) The service mode. Defaults to warp.
            service_mode_v2_port: (Number) The port to use for the proxy service mode. Required when using service_mode_v2_mode.
            support_url: (String) The support URL that will be opened when sending feedback.
            switch_locked: (Boolean) Enablement of the ZT client switch lock.
        importStatements:
            - |-
              # For default device settings policies you must use "default" as the policy ID.
              $ terraform import cloudflare_device_settings_policy.example <account_id>/<device_policy_id>
    cloudflare_dlp_profile:
        subCategory: ""
        description: Provides a Cloudflare DLP Profile resource. Data Loss Prevention profiles are a set of entries that can be matched in HTTP bodies or files. They are referenced in Zero Trust Gateway rules.
        name: cloudflare_dlp_profile
        title: cloudflare_dlp_profile Resource - Cloudflare
        examples:
            - name: example_predefined
              manifest: |-
                {
                  "account_id": "0da42c8d2132a9ddaf714f9e7c920711",
                  "entry": [
                    {
                      "enabled": true,
                      "name": "Mastercard Card Number"
                    },
                    {
                      "enabled": false,
                      "name": "Union Pay Card Number"
                    }
                  ],
                  "name": "Example Predefined Profile",
                  "type": "predefined"
                }
            - name: example_custom
              manifest: |-
                {
                  "account_id": "0da42c8d2132a9ddaf714f9e7c920711",
                  "description": "A profile with example entries",
                  "entry": [
                    {
                      "enabled": true,
                      "name": "Matches visa credit cards",
                      "pattern": [
                        {
                          "regex": "4d{3}([-. ])?d{4}([-. ])?d{4}([-. ])?d{4}",
                          "validation": "luhn"
                        }
                      ]
                    },
                    {
                      "enabled": true,
                      "name": "Matches diners club card",
                      "pattern": [
                        {
                          "regex": "(?:0[0-5]|[68][0-9])[0-9]{11}",
                          "validation": "luhn"
                        }
                      ]
                    }
                  ],
                  "name": "Example Custom Profile",
                  "type": "custom"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            description: (String) Brief summary of the profile and its intended use.
            enabled: (Boolean) Whether the entry is active. Defaults to false.
            entry: '(Block Set, Min: 1) List of entries to apply to the profile. (see below for nested schema)'
            id: (String) The ID of this resource.
            name: (String) Name of the profile. Modifying this attribute will force creation of a new resource.
            pattern: '(Block List, Max: 1) (see below for nested schema)'
            regex: (String) The regex that defines the pattern.
            type: '(String) The type of the profile. Available values: custom, predefined. Modifying this attribute will force creation of a new resource.'
            validation: (String) The validation algorithm to apply with this pattern.
        importStatements:
            - $ terraform import cloudflare_dlp_profile.example <account_id>/<dlp_profile_id>
    cloudflare_email_routing_address:
        subCategory: ""
        description: Provides a resource for managing Email Routing Addresses.
        name: cloudflare_email_routing_address
        title: cloudflare_email_routing_address Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "email": "user@example.com"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            created: (String) The date and time the destination address has been created.
            email: (String) The contact email address of the user. Modifying this attribute will force creation of a new resource.
            id: (String) The ID of this resource.
            modified: (String) The date and time the destination address was last modified.
            tag: (String) Destination address identifier.
            verified: (String) The date and time the destination address has been verified. Null means not verified yet.
        importStatements: []
    cloudflare_email_routing_catch_all:
        subCategory: ""
        description: Provides a resource for managing Email Routing Addresses catch all behaviour.
        name: cloudflare_email_routing_catch_all
        title: cloudflare_email_routing_catch_all Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "action": [
                    {
                      "type": "forward",
                      "value": [
                        "destinationaddress@example.net"
                      ]
                    }
                  ],
                  "enabled": true,
                  "matcher": [
                    {
                      "type": "all"
                    }
                  ],
                  "name": "example catch all",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            action: '(Block Set, Min: 1) List actions patterns. (see below for nested schema)'
            enabled: (Boolean) Routing rule status.
            id: (String) The ID of this resource.
            matcher: '(Block Set, Min: 1) Matching patterns to forward to your actions. (see below for nested schema)'
            name: (String) Routing rule name.
            tag: (String) Routing rule identifier.
            type: '(String) Type of supported action. Available values: drop, forward, worker.'
            value: (List of String) A list with items in the following form.
            zone_id: (String) The zone identifier to target for the resource.
        importStatements: []
    cloudflare_email_routing_rule:
        subCategory: ""
        description: Provides a resource for managing Email Routing rules.
        name: cloudflare_email_routing_rule
        title: cloudflare_email_routing_rule Resource - Cloudflare
        examples:
            - name: main
              manifest: |-
                {
                  "action": [
                    {
                      "type": "forward",
                      "value": [
                        "destinationaddress@example.net"
                      ]
                    }
                  ],
                  "enabled": true,
                  "matcher": [
                    {
                      "field": "to",
                      "type": "literal",
                      "value": "test@example.com"
                    }
                  ],
                  "name": "terraform rule",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            action: '(Block Set, Min: 1) List actions patterns. (see below for nested schema)'
            enabled: (Boolean) Routing rule status.
            field: (String) Field for type matcher.
            id: (String) The ID of this resource.
            matcher: '(Block Set, Min: 1) Matching patterns to forward to your actions. (see below for nested schema)'
            name: (String) Routing rule name.
            priority: (Number) Priority of the routing rule.
            tag: (String) Routing rule identifier.
            type: (String) Type of supported action.
            value: (List of String) An array with items in the following form.
            zone_id: (String) The zone identifier to target for the resource.
        importStatements: []
    cloudflare_email_routing_settings:
        subCategory: ""
        description: Provides a resource for managing Email Routing settings.
        name: cloudflare_email_routing_settings
        title: cloudflare_email_routing_settings Resource - Cloudflare
        examples:
            - name: my_zone
              manifest: |-
                {
                  "enabled": "true",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            created: (String) The date and time the settings have been created.
            enabled: (Boolean) State of the zone settings for Email Routing. Modifying this attribute will force creation of a new resource.
            id: (String) The ID of this resource.
            modified: (String) The date and time the settings have been modified.
            name: (String) Domain of your zone.
            skip_wizard: (Boolean) Flag to check if the user skipped the configuration wizard.
            status: (String) Show the state of your account, and the type or configuration error.
            tag: (String) Email Routing settings identifier.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_fallback_domain:
        subCategory: ""
        description: Provides a Cloudflare Fallback Domain resource. Fallback domains are used to ignore DNS requests to a given list of domains. These DNS requests will be passed back to other DNS servers configured on existing network interfaces on the device.
        name: cloudflare_fallback_domain
        title: cloudflare_fallback_domain Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "domains": [
                    {
                      "description": "Example domain",
                      "dns_server": [
                        "192.0.2.0",
                        "192.0.2.1"
                      ],
                      "suffix": "example.com"
                    }
                  ]
                }
              dependencies:
                cloudflare_device_settings_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "domains": [
                    {
                      "description": "Example domain",
                      "dns_server": [
                        "192.0.2.0",
                        "192.0.2.1"
                      ],
                      "suffix": "example.com"
                    }
                  ],
                  "dynamic": {
                    "domains": [
                      {
                        "content": [
                          {
                            "suffix": "${domains.value}"
                          }
                        ],
                        "for_each": "${toset([\"intranet\", \"internal\", \"private\", \"localdomain\", \"domain\", \"lan\", \"home\", \"host\", \"corp\", \"local\", \"localhost\", \"home.arpa\", \"invalid\", \"test\"])}"
                      }
                    ]
                  }
                }
              references:
                dynamic.content.suffix: domains.value
              dependencies:
                cloudflare_device_settings_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "domains": [
                    {
                      "description": "Example domain",
                      "dns_server": [
                        "192.0.2.0",
                        "192.0.2.1"
                      ],
                      "suffix": "example.com"
                    }
                  ],
                  "policy_id": "${cloudflare_device_settings_policy.developer_warp_policy.id}"
                }
              references:
                policy_id: cloudflare_device_settings_policy.developer_warp_policy.id
              dependencies:
                cloudflare_device_settings_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            description: (String) A description of the fallback domain, displayed in the client UI.
            dns_server: (List of String) A list of IP addresses to handle domain resolution.
            domains: '(Block Set, Min: 1) (see below for nested schema)'
            id: (String) The ID of this resource.
            policy_id: (String) The settings policy for which to configure this fallback domain policy.
            suffix: (String) The domain suffix to match when resolving locally.
        importStatements:
            - |-
              # Fallback Domains for default device policies must use "default" as the policy ID.
              $ terraform import cloudflare_fallback_domain.example <account_id>/<policy_id>
    cloudflare_filter:
        subCategory: ""
        description: Filter expressions that can be referenced across multiple features, e.g. Firewall Rules. See what is a filter https://developers.cloudflare.com/firewall/api/cf-filters/what-is-a-filter/ for more details and available fields and operators.
        name: cloudflare_filter
        title: cloudflare_filter Resource - Cloudflare
        examples:
            - name: wordpress
              manifest: |-
                {
                  "description": "Wordpress break-in attempts that are outside of the office",
                  "expression": "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            description: (String) A note that you can use to describe the purpose of the filter.
            expression: (String) The filter expression to be used.
            id: (String) The ID of this resource.
            paused: (Boolean) Whether this filter is currently paused.
            ref: (String) Short reference tag to quickly select related rules.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_filter.example <zone_id>/<filter_id>
    cloudflare_firewall_rule:
        subCategory: ""
        description: Define Firewall rules using filter expressions for more control over how traffic is matched to the rule. A filter expression permits selecting traffic by multiple criteria allowing greater freedom in rule creation. Filter expressions needs to be created first before using Firewall Rule.
        name: cloudflare_firewall_rule
        title: cloudflare_firewall_rule Resource - Cloudflare
        examples:
            - name: wordpress
              manifest: |-
                {
                  "action": "block",
                  "description": "Block wordpress break-in attempts",
                  "filter_id": "${cloudflare_filter.wordpress.id}",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              references:
                filter_id: cloudflare_filter.wordpress.id
              dependencies:
                cloudflare_filter.wordpress: |-
                    {
                      "description": "Wordpress break-in attempts that are outside of the office",
                      "expression": "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1",
                      "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                    }
        argumentDocs:
            action: '(String) The action to apply to a matched request. Available values: block, challenge, allow, js_challenge, managed_challenge, log, bypass.'
            description: (String) A description of the rule to help identify it.
            filter_id: (String) The identifier of the Filter to use for determining if the Firewall Rule should be triggered.
            id: (String) The ID of this resource.
            paused: (Boolean) Whether this filter based firewall rule is currently paused.
            priority: (Number) The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
            products: '(Set of String) List of products to bypass for a request when the bypass action is used. Available values: zoneLockdown, uaBlock, bic, hot, securityLevel, rateLimit, waf.'
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_firewall_rule.example <zone_id>/<firewall_rule_id>
    cloudflare_gre_tunnel:
        subCategory: ""
        description: Provides a resource which manages GRE tunnels for Magic Transit.
        name: cloudflare_gre_tunnel
        title: cloudflare_gre_tunnel
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "c4a7362d577a6c3019a474fd6f485821",
                  "cloudflare_gre_endpoint": "203.0.113.1",
                  "customer_gre_endpoint": "203.0.113.1",
                  "description": "Tunnel for ISP X",
                  "health_check_enabled": true,
                  "health_check_target": "203.0.113.1",
                  "health_check_type": "reply",
                  "interface_address": "192.0.2.0/31",
                  "mtu": 1476,
                  "name": "GRE_1",
                  "ttl": 64
                }
        argumentDocs:
            account_id: '- (Required) The ID of the account where the tunnel is being created.'
            cloudflare_gre_endpoint: '- (Required) The IP address assigned to the Cloudflare side of the GRE tunnel.'
            customer_gre_endpoint: '- (Required) The IP address assigned to the customer side of the GRE tunnel.'
            description: '- (Optional) An optional description of the GRE tunnel.'
            health_check_enabled: '- (Optional) Specifies if ICMP tunnel health checks are enabled Default: true.'
            health_check_target: '- (Optional) The IP address of the customer endpoint that will receive tunnel health checks. Default: <customer_gre_endpoint>.'
            health_check_type: '- (Optional) Specifies the ICMP echo type for the health check (request or reply) Default: reply.'
            interface_address: '- (Required) 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.'
            mtu: '- (Optional) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. Maximum value 1476 and minimum value 576. Default: 1476.'
            name: '- (Required) Name of the GRE tunnel.'
            ttl: '- (Optional) Time To Live (TTL) in number of hops of the GRE tunnel. Minimum value 64. Default: 64.'
        importStatements: []
    cloudflare_healthcheck:
        subCategory: ""
        description: Standalone Health Checks provide a way to monitor origin servers without needing a Cloudflare Load Balancer.
        name: cloudflare_healthcheck
        title: cloudflare_healthcheck Resource - Cloudflare
        examples:
            - name: http_health_check
              manifest: |-
                {
                  "address": "example.com",
                  "allow_insecure": false,
                  "check_regions": [
                    "WEU",
                    "EEU"
                  ],
                  "consecutive_fails": 3,
                  "consecutive_successes": 2,
                  "description": "example http health check",
                  "expected_body": "alive",
                  "expected_codes": [
                    "2xx",
                    "301"
                  ],
                  "follow_redirects": true,
                  "header": [
                    {
                      "header": "Host",
                      "values": [
                        "example.com"
                      ]
                    }
                  ],
                  "interval": 60,
                  "method": "GET",
                  "name": "http-health-check",
                  "path": "/health",
                  "port": "443",
                  "retries": 2,
                  "suspended": false,
                  "timeout": 10,
                  "type": "HTTPS",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
            - name: tcp_health_check
              manifest: |-
                {
                  "address": "example.com",
                  "check_regions": [
                    "WEU",
                    "EEU"
                  ],
                  "consecutive_fails": 3,
                  "consecutive_successes": 2,
                  "description": "example tcp health check",
                  "interval": 60,
                  "method": "connection_established",
                  "name": "tcp-health-check",
                  "port": "22",
                  "retries": 2,
                  "suspended": false,
                  "timeout": 10,
                  "type": "TCP",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            address: (String) The hostname or IP address of the origin server to run health checks on.
            allow_insecure: (Boolean) Do not validate the certificate when the health check uses HTTPS. Defaults to false.
            check_regions: '(List of String) A list of regions from which to run health checks. If not set, Cloudflare will pick a default region. Available values: WNAM, ENAM, WEU, EEU, NSAM, SSAM, OC, ME, NAF, SAF, IN, SEAS, NEAS, ALL_REGIONS.'
            consecutive_fails: (Number) The number of consecutive fails required from a health check before changing the health to unhealthy. Defaults to 1.
            consecutive_successes: (Number) The number of consecutive successes required from a health check before changing the health to healthy. Defaults to 1.
            create: (String)
            created_on: (String) Creation time.
            description: (String) A human-readable description of the health check.
            expected_body: (String) A case-insensitive sub-string to look for in the response body. If this string is not found the origin will be marked as unhealthy.
            expected_codes: (List of String) The expected HTTP response codes (e.g. '200') or code ranges (e.g. '2xx' for all codes starting with 2) of the health check.
            follow_redirects: (Boolean) Follow redirects if the origin returns a 3xx status code. Defaults to false.
            header: (Block Set) The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. (see below for nested schema)
            id: (String) The ID of this resource.
            interval: (Number) The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase the load on the origin as we check from multiple locations. Defaults to 60.
            method: '(String) The HTTP method to use for the health check. Available values: connection_established, GET, HEAD.'
            modified_on: (String) Last modified time.
            name: (String) A short name to identify the health check. Only alphanumeric characters, hyphens, and underscores are allowed.
            path: (String) The endpoint path to health check against. Defaults to /.
            port: (Number) Port number to connect to for the health check. Defaults to 80.
            retries: (Number) The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to 2.
            suspended: (Boolean) If suspended, no health checks are sent to the origin. Defaults to false.
            timeout: (Number) The timeout (in seconds) before marking the health check as failed. Defaults to 5.
            timeouts: (Block, Optional) (see below for nested schema)
            type: '(String) The protocol to use for the health check. Available values: TCP, HTTP, HTTPS.'
            values: (Set of String) A list of string values for the header.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - |-
              # Use the Zone ID and Healthcheck ID to import.
              $ terraform import cloudflare_healthcheck.example <zone_id>/<healthcheck_id>
    cloudflare_ip_list:
        subCategory: ""
        description: Provides IP Lists to be used in Firewall Rules across all zones within the same account.
        name: cloudflare_ip_list
        title: cloudflare_ip_list
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "d41d8cd98f00b204e9800998ecf8427e",
                  "description": "list description",
                  "item": [
                    {
                      "comment": "Office IP",
                      "value": "192.0.2.1"
                    },
                    {
                      "comment": "Datacenter range",
                      "value": "203.0.113.0/24"
                    }
                  ],
                  "kind": "ip",
                  "name": "example_list"
                }
        argumentDocs:
            account_id: '- (Required) The ID of the account where the IP List is being created.'
            comment: '- (Optional) A note that can be used to annotate the item.'
            description: '- (Optional) A note that can be used to annotate the List. Maximum Length: 500'
            kind: '- (Required) The kind of values in the List. Valid values: ip.'
            name: '- (Required) The name of the list (used in filter expressions). Valid pattern: ^[a-zA-Z0-9_]+$. Maximum Length: 50'
            value: '- (Required) The IPv4 address, IPv4 CIDR or IPv6 CIDR. IPv6 CIDRs are limited to a maximum of /64.'
        importStatements: []
    cloudflare_ipsec_tunnel:
        subCategory: ""
        description: Provides a resource, that manages IPsec tunnels for Magic Transit.
        name: cloudflare_ipsec_tunnel
        title: cloudflare_ipsec_tunnel Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "allow_null_cipher": false,
                  "cloudflare_endpoint": "203.0.113.1",
                  "customer_endpoint": "203.0.113.1",
                  "description": "Tunnel for ISP X",
                  "health_check_enabled": true,
                  "health_check_target": "203.0.113.1",
                  "health_check_type": "reply",
                  "interface_address": "192.0.2.0/31",
                  "name": "IPsec_1",
                  "psk": "asdf12341234"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            allow_null_cipher: (Boolean) Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to false.
            cloudflare_endpoint: (String) IP address assigned to the Cloudflare side of the IPsec tunnel.
            customer_endpoint: (String) IP address assigned to the customer side of the IPsec tunnel.
            description: (String) An optional description of the IPsec tunnel.
            fqdn_id: (String) remote_id in the form of a fqdn. This value is generated by cloudflare.
            health_check_enabled: '(Boolean) Specifies if ICMP tunnel health checks are enabled. Default: true.'
            health_check_target: '(String) The IP address of the customer endpoint that will receive tunnel health checks. Default: <customer_gre_endpoint>.'
            health_check_type: '(String) Specifies the ICMP echo type for the health check (request or reply). Available values: request, reply Default: reply.'
            hex_id: (String) remote_id as a hex string. This value is generated by cloudflare.
            id: (String) The ID of this resource.
            interface_address: (String) 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
            name: (String) Name of the IPsec tunnel.
            psk: (String, Sensitive) Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
            remote_id: (String) ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
            user_id: (String) remote_id in the form of an email address. This value is generated by cloudflare.
        importStatements:
            - $ terraform import cloudflare_ipsec_tunnel.example <account_id>/<tunnel_id>
    cloudflare_list:
        subCategory: ""
        description: Provides Lists (IPs, Redirects) to be used in Edge Rules Engine across all zones within the same account.
        name: cloudflare_list
        title: cloudflare_list Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "description": "example IPs for a list",
                  "item": [
                    {
                      "comment": "one",
                      "value": [
                        {
                          "ip": "192.0.2.0"
                        }
                      ]
                    },
                    {
                      "comment": "two",
                      "value": [
                        {
                          "ip": "192.0.2.1"
                        }
                      ]
                    }
                  ],
                  "kind": "ip",
                  "name": "example list"
                }
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "description": "example redirects for a list",
                  "item": [
                    {
                      "comment": "one",
                      "value": [
                        {
                          "redirect": [
                            {
                              "source_url": "example.com/blog",
                              "target_url": "https://blog.example.com"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "comment": "two",
                      "value": [
                        {
                          "redirect": [
                            {
                              "include_subdomains": "enabled",
                              "preserve_path_suffix": "disabled",
                              "preserve_query_string": "enabled",
                              "source_url": "example.com/foo",
                              "status_code": 301,
                              "subpath_matching": "enabled",
                              "target_url": "https://foo.example.com"
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "kind": "redirect",
                  "name": "example list"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            comment: (String) An optional comment for the item.
            description: (String) An optional description of the list.
            id: (String) The ID of this resource.
            include_subdomains: '(String) Whether the redirect also matches subdomains of the source url. Available values: disabled, enabled.'
            ip: (String)
            item: (Block Set) (see below for nested schema)
            kind: (String) The type of items the list will contain.
            name: (String) The name of the list. Modifying this attribute will force creation of a new resource.
            preserve_path_suffix: '(String) Whether to preserve the path suffix when doing subpath matching. Available values: disabled, enabled.'
            preserve_query_string: '(String) Whether the redirect target url should keep the query string of the request''s url. Available values: disabled, enabled.'
            redirect: (Block List) (see below for nested schema)
            source_url: (String) The source url of the redirect.
            status_code: (Number) The status code to be used when redirecting a request.
            subpath_matching: '(String) Whether the redirect also matches subpaths of the source url. Available values: disabled, enabled.'
            target_url: (String) The target url of the redirect.
            value: '(Block List, Min: 1, Max: 1) (see below for nested schema)'
        importStatements:
            - $ terraform import cloudflare_list.example <account_id>/<list_id>
    cloudflare_load_balancer:
        subCategory: ""
        description: Provides a Cloudflare Load Balancer resource. This sits in front of a number of defined pools of origins and provides various options for geographically-aware load balancing. Note that the load balancing feature must be enabled in your Cloudflare account before you can use this resource.
        name: cloudflare_load_balancer
        title: cloudflare_load_balancer Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "country_pools": [
                    {
                      "country": "US",
                      "pool_ids": [
                        "${cloudflare_load_balancer_pool.example.id}"
                      ]
                    }
                  ],
                  "default_pool_ids": [
                    "${cloudflare_load_balancer_pool.example.id}"
                  ],
                  "description": "example load balancer using geo-balancing",
                  "fallback_pool_id": "${cloudflare_load_balancer_pool.example.id}",
                  "name": "example-load-balancer.example.com",
                  "pop_pools": [
                    {
                      "pool_ids": [
                        "${cloudflare_load_balancer_pool.example.id}"
                      ],
                      "pop": "LAX"
                    }
                  ],
                  "proxied": true,
                  "region_pools": [
                    {
                      "pool_ids": [
                        "${cloudflare_load_balancer_pool.example.id}"
                      ],
                      "region": "WNAM"
                    }
                  ],
                  "rules": [
                    {
                      "condition": "http.request.uri.path contains \"testing\"",
                      "fixed_response": [
                        {
                          "content_type": "html",
                          "location": "www.example.com",
                          "message_body": "hello",
                          "status_code": 200
                        }
                      ],
                      "name": "example rule"
                    }
                  ],
                  "steering_policy": "geo",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              references:
                fallback_pool_id: cloudflare_load_balancer_pool.example.id
              dependencies:
                cloudflare_load_balancer_pool.example: |-
                    {
                      "name": "example-lb-pool",
                      "origins": [
                        {
                          "address": "192.0.2.1",
                          "enabled": false,
                          "name": "example-1"
                        }
                      ]
                    }
        argumentDocs:
            adaptive_routing: (Block Set) Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. (see below for nested schema)
            condition: (String) The statement to evaluate to determine if this rule's effects should be applied. An empty condition is always true. See load balancing rules.
            content_type: (String) The value of the HTTP context-type header for this fixed response.
            country: (String) A country code which can be determined with the Load Balancing Regions API described here. Multiple entries should not be specified with the same country.
            country_pools: (Block Set) A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country. (see below for nested schema)
            created_on: (String) The RFC3339 timestamp of when the load balancer was created.
            default_pool_ids: (List of String) A list of pool IDs ordered by their failover priority. Used whenever pop_pools/country_pools/region_pools are not defined.
            default_pools: (List of String) See default_pool_ids.
            default_weight: (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
            description: (String) Free text description.
            disabled: (Boolean) A disabled rule will not be executed.
            drain_duration: (String) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
            enabled: (Boolean) Enable or disable the load balancer. Defaults to true.
            failover_across_pools: (Boolean) Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false, zero-downtime failover will only occur between origins within the same pool. Defaults to false.
            fallback_pool: (String) See fallback_pool_id.
            fallback_pool_id: (String) The pool ID to use when all other pools are detected as unhealthy.
            fixed_response: '(Block List, Max: 1) Settings for a HTTP response to return directly to the eyeball if the condition is true. Note: overrides or fixed_response must be set. (see below for nested schema)'
            id: (String) The ID of this resource.
            location: (String) The value of the HTTP location header for this fixed response.
            location_strategy: (Block Set) Controls location-based steering for non-proxied requests. (see below for nested schema)
            message_body: (String) The text used as the html body for this fixed response.
            mode: '(String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. Value pop will use the Cloudflare PoP location. Value resolver_ip will use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, it will use the Cloudflare PoP location. Available values: pop, resolver_ip. Defaults to pop.'
            modified_on: (String) The RFC3339 timestamp of when the load balancer was last modified.
            name: (String) The DNS hostname to associate with your load balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the load balancer will take precedence and the DNS record will not be used.
            overrides: '(Block List) The load balancer settings to alter if this rule''s condition is true. Note: overrides or fixed_response must be set. (see below for nested schema)'
            pool_ids: (List of String) A list of pool IDs in failover priority to use in the given country.
            pool_weights: (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
            pop: (String) A 3-letter code for the Point-of-Presence. Allowed values can be found in the list of datacenters on the status page. Multiple entries should not be specified with the same PoP.
            pop_pools: (Block Set) A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers. (see below for nested schema)
            prefer_ecs: '(String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. Value always will always prefer ECS, never will never prefer ECS, proximity will prefer ECS only when steering_policy="proximity", and geo will prefer ECS only when steering_policy="geo". Available values: always, never, proximity, geo. Defaults to proximity.'
            priority: (Number) Priority used when determining the order of rule execution. Lower values are executed first. If not provided, the list order will be used.
            proxied: (Boolean) Whether the hostname gets Cloudflare's origin protection. Defaults to false. Conflicts with ttl.
            random_steering: (Block Set) Configures pool weights for random steering. When the steering_policy="random", a random pool is selected with probability proportional to these pool weights. (see below for nested schema)
            region: (String) A region code which must be in the list defined here. Multiple entries should not be specified with the same region.
            region_pools: (Block Set) A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region. (see below for nested schema)
            rules: (Block List) A list of rules for this load balancer to execute. (see below for nested schema)
            samesite: '(String) Configures the SameSite attribute on session affinity cookie. Value Auto will be translated to Lax or None depending if Always Use HTTPS is enabled. Note: when using value None, then you can not set secure="Never". Available values: Auto, Lax, None, Strict.'
            secure: '(String) Configures the Secure attribute on session affinity cookie. Value Always indicates the Secure attribute will be set in the Set-Cookie header, Never indicates the Secure attribute will not be set, and Auto will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: Auto, Always, Never.'
            session_affinity: '(String) Specifies the type of session affinity the load balancer should use unless specified as none or "" (default). With value cookie, on the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy then a new origin server is calculated and used. Value ip_cookie behaves the same as cookie except the initial origin selection is stable and based on the client''s IP address. Available values: "", none, cookie, ip_cookie. Defaults to none.'
            session_affinity_attributes: (Map of String) See session_affinity_attributes.
            session_affinity_ttl: (Number) Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of 82800 (23 hours) will be used unless session_affinity_ttl is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between 1800 and 604800.
            status_code: (Number) The HTTP status code used for this fixed response.
            steering_policy: '(String) The method the load balancer uses to determine the route to your origin. Value off uses default_pool_ids. Value geo uses pop_pools/country_pools/region_pools. For non-proxied requests, the country for country_pools is determined by location_strategy. Value random selects a pool randomly. Value dynamic_latency uses round trip time to select the closest pool in default_pool_ids (requires pool health checks). Value proximity uses the pools'' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by location_strategy for non-proxied requests. Value "" maps to geo if you use pop_pools/country_pools/region_pools otherwise off. Available values: off, geo, dynamic_latency, random, proximity, "" Defaults to "".'
            terminates: '(Boolean) Terminates indicates that if this rule is true no further rules should be executed. Note: setting a fixed_response forces this field to true.'
            ttl: (Number) Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to 30. Conflicts with proxied.
            zero_downtime_failover: '(String) Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value none means no failover takes place for sessions pinned to the origin. Value temporary means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value sticky means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: none, temporary, sticky.'
            zone_id: (String) The zone ID to add the load balancer to. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_load_balancer.example <zone_id>/<load_balancer_id>
    cloudflare_load_balancer_monitor:
        subCategory: ""
        description: Provides a Cloudflare Load Balancer Monitor resource.
        name: cloudflare_load_balancer_monitor
        title: cloudflare_load_balancer_monitor
        examples:
            - name: http_monitor
              manifest: |-
                {
                  "allow_insecure": false,
                  "description": "example http load balancer",
                  "expected_body": "alive",
                  "expected_codes": "2xx",
                  "follow_redirects": true,
                  "header": [
                    {
                      "header": "Host",
                      "values": [
                        "example.com"
                      ]
                    }
                  ],
                  "interval": 60,
                  "method": "GET",
                  "path": "/health",
                  "probe_zone": "example.com",
                  "retries": 5,
                  "timeout": 7,
                  "type": "http"
                }
            - name: tcp_monitor
              manifest: |-
                {
                  "description": "example tcp load balancer",
                  "interval": 60,
                  "method": "connection_established",
                  "port": 8080,
                  "retries": 5,
                  "timeout": 7,
                  "type": "tcp"
                }
        argumentDocs:
            account_id: (Optional) The account identifier to target for the resource.
            allow_insecure: '- (Optional) Do not validate the certificate when monitor use HTTPS. Only valid if type is "http" or "https".'
            created_on: '- The RFC3339 timestamp of when the load balancer monitor was created.'
            description: '- (Optional) Free text description.'
            expected_body: '- (Optional) A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if type is "http" or "https". Default: "".'
            expected_codes: '- (Optional) The expected HTTP response code or code range of the health check. Eg 2xx. Only valid and required if type is "http" or "https".'
            follow_redirects: '- (Optional) Follow redirects if returned by the origin. Only valid if type is "http" or "https".'
            header: '- (Optional) The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. Fields documented below. Only valid if type is "http" or "https".'
            id: '- Load balancer monitor ID.'
            interval: '- (Optional) The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Default: 60.'
            method: '- (Optional) The method to use for the health check. Valid values are any valid HTTP verb if type is "http" or "https", or connection_established if type is "tcp". Default: "GET" if type is "http" or "https", "connection_established" if type is "tcp", and empty otherwise.'
            modified_on: '- The RFC3339 timestamp of when the load balancer monitor was last modified.'
            path: '- (Optional) The endpoint path to health check against. Default: "/". Only valid if type is "http" or "https".'
            port: '- The port number to use for the healthcheck, required when creating a TCP monitor. Valid values are in the range 0-65535.'
            probe_zone: '- (Optional) Assign this monitor to emulate the specified zone while probing. Only valid if type is "http" or "https".'
            retries: '- (Optional) The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Default: 2.'
            timeout: '- (Optional) The timeout (in seconds) before marking the health check as failed. Default: 5.'
            type: '- (Optional) The protocol to use for the healthcheck. Currently supported protocols are ''HTTP'', ''HTTPS'', ''TCP'', ''UDP-ICMP'', ''ICMP-PING'', and ''SMTP''. Default: "http".'
            values: '- (Required) A list of string values for the header.'
        importStatements: []
    cloudflare_load_balancer_pool:
        subCategory: ""
        description: Provides a Cloudflare Load Balancer Pool resource.
        name: cloudflare_load_balancer_pool
        title: cloudflare_load_balancer_pool
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "example load balancer pool",
                  "enabled": false,
                  "latitude": 55,
                  "load_shedding": [
                    {
                      "default_percent": 55,
                      "default_policy": "random",
                      "session_percent": 12,
                      "session_policy": "hash"
                    }
                  ],
                  "longitude": -12,
                  "minimum_origins": 1,
                  "name": "example-pool",
                  "notification_email": "someone@example.com",
                  "origin_steering": [
                    {
                      "policy": "random"
                    }
                  ],
                  "origins": [
                    {
                      "address": "192.0.2.1",
                      "enabled": false,
                      "header": [
                        {
                          "header": "Host",
                          "values": [
                            "example-1"
                          ]
                        }
                      ],
                      "name": "example-1"
                    },
                    {
                      "address": "192.0.2.2",
                      "header": [
                        {
                          "header": "Host",
                          "values": [
                            "example-2"
                          ]
                        }
                      ],
                      "name": "example-2"
                    }
                  ]
                }
        argumentDocs:
            account_id: (Optional) The account identifier to target for the resource.
            address: '- (Required) The IP address (IPv4 or IPv6) of the origin, or the publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare.'
            check_regions: '- (Optional) A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found here.'
            created_on: '- The RFC3339 timestamp of when the load balancer was created.'
            default_percent: '- (Optional) Percent of traffic to shed 0 - 100.'
            default_policy: '- (Optional) Method of shedding traffic "", "hash" or "random".'
            description: '- (Optional) Free text description.'
            enabled: '- (Optional) Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).'
            header: '- (Optional) The HTTP request headers. For security reasons, this header also needs to be a subdomain of the overall zone. Fields documented below.'
            id: '- ID for this load balancer pool.'
            latitude: '- (Optional) The latitude this pool is physically located at; used for proximity steering. Values should be between -90 and 90.'
            load_shedding: '- (Optional) Setting for controlling load shedding for this pool.'
            longitude: '- (Optional) The longitude this pool is physically located at; used for proximity steering. Values should be between -180 and 180.'
            minimum_origins: '- (Optional) The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Default: 1.'
            modified_on: '- The RFC3339 timestamp of when the load balancer was last modified.'
            monitor: '- (Optional) The ID of the Monitor to use for health checking origins within this pool.'
            name: '- (Required) A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.'
            notification_email: '- (Optional) The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.'
            origin_steering: '- (Optional) Set an origin steering policy to control origin selection within a pool.'
            origins: '- (Required) The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy. It''s a complex value. See description below.'
            policy: '- (Optional) Either "random" (default) or "hash".'
            session_percent: '- (Optional) Percent of session traffic to shed 0 - 100.'
            session_policy: '- (Optional) Method of shedding session traffic "" or "hash".'
            values: '- (Required) A list of string values for the header.'
            weight: '- (Optional) The weight (0.01 - 1.00) of this origin, relative to other origins in the pool. Equal values mean equal weighting. A weight of 0 means traffic will not be sent to this origin, but health is still checked. Default: 1.'
        importStatements: []
    cloudflare_logpull_retention:
        subCategory: ""
        description: Allows management of the Logpull Retention settings used to control whether or not to retain HTTP request logs.
        name: cloudflare_logpull_retention
        title: cloudflare_logpull_retention
        examples:
            - name: example
              manifest: |-
                {
                  "enabled": "true",
                  "zone_id": "fb54f084ca7f7b732d3d3ecbd8ef7bf2"
                }
        argumentDocs:
            enabled: '- (Required) Whether you wish to retain logs or not.'
            zone_id: '- (Required) The zone ID to apply the log retention to.'
        importStatements: []
    cloudflare_logpush_job:
        subCategory: ""
        description: 'Provides a resource which manages Cloudflare Logpush jobs. For Logpush jobs pushing to Amazon S3, Google Cloud Storage, Microsoft Azure or Sumo Logic, this resource cannot be automatically created. In order to have this automated, you must have: cloudflare_logpush_ownership_challenge: Configured to generate the challenge to confirm ownership of the destination.Either manual inspection or another Terraform Provider to get the contents of the ownership_challenge_filename value from thecloudflare_logpush_ownership_challenge resource.cloudflare_logpush_job: Create and manage the Logpush Job itself.'
        name: cloudflare_logpush_job
        title: cloudflare_logpush_job Resource - Cloudflare
        examples:
            - name: http_requests
              manifest: |-
                {
                  "dataset": "http_requests",
                  "destination_conf": "r2://cloudflare-logs/http_requests/date={DATE}?account-id=${var.account_id}\u0026access-key-id=${cloudflare_api_token.logpush_r2_token.id}\u0026secret-access-key=${sha256(cloudflare_api_token.logpush_r2_token.value)}",
                  "enabled": true,
                  "logpull_options": "fields=ClientIP,ClientRequestHost,ClientRequestMethod,ClientRequestURI,EdgeEndTimestamp,EdgeResponseBytes,EdgeResponseStatus,EdgeStartTimestamp,RayID\u0026timestamps=rfc3339",
                  "name": "http_requests",
                  "zone_id": "${var.zone_id}"
                }
              references:
                zone_id: var.zone_id
              dependencies:
                cloudflare_api_token.logpush_r2_token: |-
                    {
                      "name": "logpush_r2_token",
                      "policy": [
                        {
                          "permission_groups": [
                            "${data.cloudflare_api_token_permission_groups.all.permissions[\"Workers R2 Storage Write\"]}"
                          ],
                          "resources": {
                            "com.cloudflare.api.account.*": "*"
                          }
                        }
                      ]
                    }
                cloudflare_logpush_ownership_challenge.ownership_challenge: |-
                    {
                      "destination_conf": "s3://my-bucket-path?region=us-west-2",
                      "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                    }
            - name: example_job
              manifest: |-
                {
                  "dataset": "http_requests",
                  "destination_conf": "s3://my-bucket-path?region=us-west-2",
                  "enabled": true,
                  "logpull_options": "fields=RayID,ClientIP,EdgeStartTimestamp\u0026timestamps=rfc3339",
                  "name": "My-logpush-job",
                  "ownership_challenge": "${data.aws_s3_bucket_object.challenge_file.body}",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              references:
                ownership_challenge: data.aws_s3_bucket_object.challenge_file.body
              dependencies:
                cloudflare_api_token.logpush_r2_token: |-
                    {
                      "name": "logpush_r2_token",
                      "policy": [
                        {
                          "permission_groups": [
                            "${data.cloudflare_api_token_permission_groups.all.permissions[\"Workers R2 Storage Write\"]}"
                          ],
                          "resources": {
                            "com.cloudflare.api.account.*": "*"
                          }
                        }
                      ]
                    }
                cloudflare_logpush_ownership_challenge.ownership_challenge: |-
                    {
                      "destination_conf": "s3://my-bucket-path?region=us-west-2",
                      "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                    }
            - name: example_job
              manifest: |-
                {
                  "dataset": "http_requests",
                  "destination_conf": "s3://my-bucket-path?region=us-west-2",
                  "enabled": true,
                  "frequency": "high",
                  "logpull_options": "fields=RayID,ClientIP,EdgeStartTimestamp\u0026timestamps=rfc3339",
                  "name": "My-logpush-job",
                  "ownership_challenge": "0000000000000",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              dependencies:
                cloudflare_api_token.logpush_r2_token: |-
                    {
                      "name": "logpush_r2_token",
                      "policy": [
                        {
                          "permission_groups": [
                            "${data.cloudflare_api_token_permission_groups.all.permissions[\"Workers R2 Storage Write\"]}"
                          ],
                          "resources": {
                            "com.cloudflare.api.account.*": "*"
                          }
                        }
                      ]
                    }
                cloudflare_logpush_ownership_challenge.ownership_challenge: |-
                    {
                      "destination_conf": "s3://my-bucket-path?region=us-west-2",
                      "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Must provide only one of account_id, zone_id.
            cloudflare_logpush_job: ': Create and manage the Logpush Job itself.'
            cloudflare_logpush_ownership_challenge: |-
                : Configured to generate the challenge
                to confirm ownership of the destination.
            dataset: '(String) Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See Logpush destination documentation. Available values: access_requests, firewall_events, http_requests, spectrum_events, nel_reports, audit_logs, gateway_dns, gateway_http, gateway_network, dns_logs, network_analytics_logs, workers_trace_events.'
            destination_conf: (String) Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See Logpush destination documentation.
            enabled: (Boolean) Whether to enable the job.
            filter: (String) Use filters to select the events to include and/or remove from your logs. For more information, refer to Filters.
            frequency: '(String) A higher frequency will result in logs being pushed on faster with smaller files. low frequency will push logs less often with larger files. Available values: high, low. Defaults to high.'
            id: (String) The ID of this resource.
            kind: '(String) The kind of logpush job to create. Available values: edge, instant-logs, "".'
            logpull_options: (String) Configuration string for the Logshare API. It specifies things like requested fields and timestamp formats. See Logpull options documentation.
            name: (String) The name of the logpush job to create.
            ownership_challenge: (String) Ownership challenge token to prove destination ownership, required when destination is Amazon S3, Google Cloud Storage, Microsoft Azure or Sumo Logic. See Developer documentation.
            ownership_challenge_filename: value from thecloudflare_logpush_ownership_challenge resource.
            zone_id: (String) The zone identifier to target for the resource. Must provide only one of account_id, zone_id.
        importStatements:
            - |-
              # Import an account-scoped job.
              $ terraform import cloudflare_logpush_job.example account/<account_id>/<job_id>

              # Import a zone-scoped job.
              $ terraform import cloudflare_logpush_job.example zone/<zone_id>/<job_id>
    cloudflare_logpush_ownership_challenge:
        subCategory: ""
        description: Provides a resource which manages Cloudflare Logpush ownership challenges to use in a Logpush Job.
        name: cloudflare_logpush_ownership_challenge
        title: cloudflare_logpush_ownership_challenge
        examples:
            - name: example
              manifest: |-
                {
                  "destination_conf": "s3://my-bucket-path?region=us-west-2",
                  "zone_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
            - name: example
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "destination_conf": "s3://my-bucket-path?region=us-west-2"
                }
        argumentDocs:
            account_id: '- (Optional) The account ID where the logpush ownership challenge should be created. Either account_id or zone_id are required.'
            destination_conf: '- (Required) Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See Logpush destination documentation.'
            ownership_challenge_filename: |-
                - The filename of the ownership challenge which
                contains the contents required for Logpush Job creation.
            zone_id: '- (Optional) The zone ID where the logpush ownership challenge should be created. Either account_id or zone_id are required.'
        importStatements: []
    cloudflare_magic_firewall_ruleset:
        subCategory: ""
        description: Provides the ability to manage a Magic Firewall Ruleset and it's firewall rules which are used with Magic Transit.
        name: cloudflare_magic_firewall_ruleset
        title: cloudflare_magic_firewall_ruleset
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "d41d8cd98f00b204e9800998ecf8427e",
                  "description": "Global mitigations",
                  "name": "Magic Transit Ruleset",
                  "rules": [
                    {
                      "action": "allow",
                      "description": "Allow TCP Ephemeral Ports",
                      "enabled": "true",
                      "expression": "tcp.dstport in { 32768..65535 }"
                    },
                    {
                      "action": "block",
                      "description": "Block all",
                      "enabled": "true",
                      "expression": "ip.len \u003e= 0"
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Required) The ID of the account where the ruleset is being created.'
            action: '- (Required) Valid values: allow or block.'
            description: '- (Optional) A note that can be used to annotate the ruleset.'
            enabled: '- (Required) Whether the rule is enabled or not. Valid values: true or false.'
            expression: '- (Required) A Firewall expression using Wireshark syntax.'
            name: '- (Required) The name of the ruleset.'
        importStatements: []
    cloudflare_managed_headers:
        subCategory: ""
        description: The Cloudflare Managed Headers https://developers.cloudflare.com/rules/transform/managed-transforms/ allows you to add or remove some predefined headers to one's requests or origin responses.
        name: cloudflare_managed_headers
        title: cloudflare_managed_headers Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "managed_request_headers": [
                    {
                      "enabled": true,
                      "id": "add_true_client_ip_headers"
                    }
                  ],
                  "managed_response_headers": [
                    {
                      "enabled": true,
                      "id": "remove_x-powered-by_header"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            enabled: (Boolean) Whether the headers rule is active.
            id: (String) The ID of this resource.
            managed_request_headers: (Block Set) The list of managed request headers. (see below for nested schema)
            managed_response_headers: (Block Set) The list of managed response headers. (see below for nested schema)
            zone_id: (String) The zone identifier to target for the resource.
        importStatements: []
    cloudflare_notification_policy:
        subCategory: ""
        description: Provides a resource, that manages a notification policy for Cloudflare's products. The delivery mechanisms supported are email, webhooks, and PagerDuty.
        name: cloudflare_notification_policy
        title: cloudflare_notification_policy Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "alert_type": "universal_ssl_event_type",
                  "description": "Notification policy to alert when my SSL certificates are modified",
                  "email_integration": [
                    {
                      "id": "myemail@example.com"
                    }
                  ],
                  "enabled": true,
                  "name": "Policy for SSL notification events",
                  "pagerduty_integration": [
                    {
                      "id": "850129d136459401860572c5d964d27k"
                    }
                  ],
                  "webhooks_integration": [
                    {
                      "id": "1860572c5d964d27aa0f379d13645940"
                    }
                  ]
                }
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "alert_type": "health_check_status_notification",
                  "description": "Notification policy to alert on unhealthy Healthcheck status",
                  "email_integration": [
                    {
                      "id": "myemail@example.com"
                    }
                  ],
                  "enabled": true,
                  "filters": [
                    {
                      "health_check_id": [
                        "699d98642c564d2e855e9661899b7252"
                      ],
                      "status": [
                        "Unhealthy"
                      ]
                    }
                  ],
                  "name": "Policy for Healthcheck notification",
                  "pagerduty_integration": [
                    {
                      "id": "850129d136459401860572c5d964d27k"
                    }
                  ],
                  "webhooks_integration": [
                    {
                      "id": "1860572c5d964d27aa0f379d13645940"
                    }
                  ]
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            alert_type: '(String) The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of available alert types. Available values: billing_usage_alert, health_check_status_notification, g6_pool_toggle_alert, real_origin_monitoring, universal_ssl_event_type, dedicated_ssl_certificate_event_type, custom_ssl_certificate_event_type, access_custom_certificate_expiration_type, zone_aop_custom_certificate_expiration_type, bgp_hijack_notification, http_alert_origin_error, workers_alert, weekly_account_overview, expiring_service_token_alert, secondary_dns_all_primaries_failing, secondary_dns_zone_validation_warning, secondary_dns_primaries_failing, secondary_dns_zone_successfully_updated, dos_attack_l7, dos_attack_l4, advanced_ddos_attack_l7_alert, advanced_ddos_attack_l4_alert, fbm_volumetric_attack, fbm_auto_advertisement, load_balancing_pool_enablement_alert, load_balancing_health_alert, g6_health_alert, http_alert_edge_error, clickhouse_alert_fw_anomaly, clickhouse_alert_fw_ent_anomaly, failing_logpush_job_disabled_alert, scriptmonitor_alert_new_hosts, scriptmonitor_alert_new_scripts, scriptmonitor_alert_new_malicious_scripts, scriptmonitor_alert_new_malicious_url, scriptmonitor_alert_new_code_change_detections, scriptmonitor_alert_new_max_length_script_url, scriptmonitor_alert_new_malicious_hosts, sentinel_alert, hostname_aop_custom_certificate_expiration_type, stream_live_notifications, block_notification_new_block, block_notification_review_rejected, block_notification_review_accepted, web_analytics_metrics_update, workers_uptime.'
            created: (String) When the notification policy was created.
            description: (String) Description of the notification policy.
            email_integration: (Block Set) The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required. (see below for nested schema)
            enabled: (Boolean) The status of the notification policy.
            event_source: (Set of String) Source configuration to alert on for pool or origin.
            event_type: (Set of String) Stream event type to alert on.
            filters: '(Block List, Max: 1) An optional nested block of filters that applies to the selected alert_type. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields). (see below for nested schema)'
            health_check_id: (Set of String) Identifier health check. Required when using filters.0.status.
            id: (String) The ID of this resource.
            input_id: (Set of String) Stream input id to alert on.
            limit: '(Set of String) A numerical limit. Example: 100.'
            modified: (String) When the notification policy was last modified.
            name: (String) The name of the notification policy.
            new_health: (Set of String) Health status to alert on for pool or origin.
            packets_per_second: (Set of String) Packets per second threshold for dos alert.
            pagerduty_integration: (Block Set) The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required. (see below for nested schema)
            pool_id: (Set of String) Load balancer pool identifier.
            product: '(Set of String) Product name. Available values: worker_requests, worker_durable_objects_requests, worker_durable_objects_duration, worker_durable_objects_data_transfer, worker_durable_objects_stored_data, worker_durable_objects_storage_deletes, worker_durable_objects_storage_writes, worker_durable_objects_storage_reads.'
            protocol: (Set of String) Protocol to alert on for dos.
            requests_per_second: (Set of String) Requests per second threshold for dos alert.
            services: (Set of String)
            slo: '(Set of String) A numerical limit. Example: 99.9.'
            status: (Set of String) Status to alert on.
            target_host: (Set of String) Target host to alert on for dos.
            target_zone_name: (Set of String) Target domain to alert on.
            webhooks_integration: (Block Set) The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required. (see below for nested schema)
            zones: (Set of String) A list of zone identifiers.
        importStatements:
            - $ terraform import cloudflare_notification_policy.example <account_id>/<policy_id>
    cloudflare_notification_policy_webhooks:
        subCategory: ""
        description: Provides a resource to create and manage webhooks destinations for Cloudflare's notification policies.
        name: cloudflare_notification_policy_webhooks
        title: cloudflare_notification_policy_webhooks
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "c4a7362d577a6c3019a474fd6f485821",
                  "name": "Webhooks destination",
                  "secret": "my-secret",
                  "url": "https://example.com"
                }
        argumentDocs:
            account_id: '- (Required) The ID of the account for which the webhook destination has to be connected.'
            name: '- (Required) The name of the webhook destination.'
            secret: |-
                - (Optional) An optional secret can be provided that will be passed in the cf-webhook-auth header when dispatching a webhook notification.
                Secrets are not returned in any API response body.
                Refer to the documentation for more details - https://api.cloudflare.com/#notification-webhooks-create-webhook.
            url: '- (Required) The URL of the webhook destinations.'
        importStatements: []
    cloudflare_origin_ca_certificate:
        subCategory: ""
        description: Provides a Cloudflare Origin CA certificate used to protect traffic to your origin without involving a third party Certificate Authority.
        name: cloudflare_origin_ca_certificate
        title: cloudflare_origin_ca_certificate Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "csr": "${tls_cert_request.example.cert_request_pem}",
                  "hostnames": [
                    "example.com"
                  ],
                  "request_type": "origin-rsa",
                  "requested_validity": 7
                }
              references:
                csr: tls_cert_request.example.cert_request_pem
              dependencies:
                tls_cert_request.example: |-
                    {
                      "key_algorithm": "${tls_private_key.example.algorithm}",
                      "private_key_pem": "${tls_private_key.example.private_key_pem}",
                      "subject": [
                        {
                          "common_name": "",
                          "organization": "Terraform Test"
                        }
                      ]
                    }
                tls_private_key.example: |-
                    {
                      "algorithm": "RSA"
                    }
        argumentDocs:
            certificate: (String) The Origin CA certificate.
            csr: (String) The Certificate Signing Request. Must be newline-encoded. Modifying this attribute will force creation of a new resource.
            expires_on: (String) The datetime when the certificate will expire.
            hostnames: (Set of String) A list of hostnames or wildcard names bound to the certificate. Modifying this attribute will force creation of a new resource.
            id: (String) The ID of this resource.
            min_days_for_renewal: (Number) Number of days prior to the expiry to trigger a renewal of the certificate if a Terraform operation is run.
            request_type: '(String) The signature type desired on the certificate. Available values: origin-rsa, origin-ecc, keyless-certificate. Modifying this attribute will force creation of a new resource.'
            requested_validity: '(Number) The number of days for which the certificate should be valid. Available values: 7, 30, 90, 365, 730, 1095, 5475. Modifying this attribute will force creation of a new resource.'
        importStatements:
            - $ terraform import cloudflare_origin_ca_certificate.example <certificate_id>
    cloudflare_page_rule:
        subCategory: ""
        description: Provides a Cloudflare page rule resource.
        name: cloudflare_page_rule
        title: cloudflare_page_rule
        examples:
            - name: foobar
              manifest: |-
                {
                  "actions": [
                    {
                      "email_obfuscation": "on",
                      "minify": [
                        {
                          "css": "on",
                          "html": "off",
                          "js": "on"
                        }
                      ],
                      "ssl": "flexible"
                    }
                  ],
                  "priority": 1,
                  "target": "sub.${var.cloudflare_zone}/page",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
            - name: foobar
              manifest: |-
                {
                  "actions": [
                    {
                      "cache_key_fields": [
                        {
                          "cookie": [
                            {}
                          ],
                          "header": [
                            {
                              "exclude": [
                                "origin"
                              ]
                            }
                          ],
                          "host": [
                            {}
                          ],
                          "query_string": [
                            {
                              "exclude": [
                                "api_token"
                              ]
                            }
                          ],
                          "user": [
                            {
                              "lang": true
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "priority": 1,
                  "target": "embed.${var.cloudflare_zone}/*.js",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
            - name: foobar
              manifest: |-
                {
                  "actions": [
                    {
                      "cache_key_fields": [
                        {
                          "cookie": [
                            {
                              "check_presence": [
                                "wordpress_test_cookie"
                              ]
                            }
                          ],
                          "header": [
                            {
                              "check_presence": [
                                "header_present"
                              ],
                              "exclude": [
                                "origin"
                              ],
                              "include": [
                                "api-key",
                                "dnt"
                              ]
                            }
                          ],
                          "host": [
                            {
                              "resolved": true
                            }
                          ],
                          "query_string": [
                            {
                              "ignore": true
                            }
                          ],
                          "user": [
                            {
                              "device_type": false,
                              "geo": true,
                              "lang": true
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "priority": 1,
                  "target": "${var.cloudflare_zone}/app/*",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
            - name: test
              manifest: |-
                {
                  "actions": [
                    {
                      "cache_ttl_by_status": [
                        {
                          "codes": "200-299",
                          "ttl": 300
                        },
                        {
                          "codes": "300-399",
                          "ttl": 60
                        },
                        {
                          "codes": "400-403",
                          "ttl": -1
                        },
                        {
                          "codes": "404",
                          "ttl": 30
                        },
                        {
                          "codes": "405-499",
                          "ttl": -1
                        },
                        {
                          "codes": "500-599",
                          "ttl": 0
                        }
                      ]
                    }
                  ],
                  "priority": 1,
                  "target": "${var.cloudflare_zone}/app/*",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            "-1": '- sets no-store, never save to cache'
            "0": '- sets no-cache, saved to cache, but expired immediately (revalidate from origin every time)'
            actions: '- (Required) The actions taken by the page rule, options given below.'
            always_use_https: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            automatic_https_rewrites: '- (Optional) Whether this action is "on" or "off".'
            browser_cache_ttl: '- (Optional) The Time To Live for the browser cache. 0 means ''Respect Existing Headers'''
            browser_check: '- (Optional) Whether this action is "on" or "off".'
            bypass_cache_on_cookie: '- (Optional) String value of cookie name to conditionally bypass cache the page.'
            cache_by_device_type: '- (Optional) Whether this action is "on" or "off".'
            cache_deception_armor: '- (Optional) Whether this action is "on" or "off".'
            cache_key_fields: '- (Optional) Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.'
            cache_level: '- (Optional) Whether to set the cache level to "bypass", "basic", "simplified", "aggressive", or "cache_everything".'
            cache_on_cookie: '- (Optional) String value of cookie name to conditionally cache the page.'
            cache_ttl_by_status: '- (Optional) Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.'
            check_presence: '- (Optional, Array) Check for presence of specified cookies, without including their actual values.'
            codes: '- (Required) A HTTP code (e.g. 404) or range of codes (e.g. 400-499)'
            cookie: '- (Required, but allowed to be empty) Controls what cookies go into Cache Key:'
            css: '- (Required) Whether CSS should be minified. Valid values are "on" or "off".'
            device_type: '- (Optional, Boolean) true - classifies a request as “mobile”, “desktop”, or “tablet” based on the User Agent; defaults to false.'
            disable_apps: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            disable_performance: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            disable_railgun: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            disable_security: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            disable_zaraz: '- (Optional) Boolean of whether this action is enabled. Default: false.'
            edge_cache_ttl: '- (Optional) The Time To Live for the edge cache.'
            email_obfuscation: '- (Optional) Whether this action is "on" or "off".'
            exclude: '- (Optional, Array) Exclude these HTTP headers from Cache Key. Currently, only the Origin header can be excluded.'
            explicit_cache_control: '- (Optional) Whether origin Cache-Control action is "on" or "off".'
            forwarding_url: '- (Optional) The URL to forward to, and with what status. See below.'
            geo: '- (Optional, Boolean) true - includes the client’s country, derived from the IP address; defaults to false.'
            header: '- (Required, but allowed to be empty) Controls what HTTP headers go into Cache Key:'
            host: '- (Required, but allowed to be empty) Controls which Host header goes into Cache Key:'
            host_header_override: '- (Optional) Value of the Host header to send.'
            html: '- (Required) Whether HTML should be minified. Valid values are "on" or "off".'
            id: '- The page rule ID.'
            ignore: '- (Optional, Boolean) false (default) - all query string parameters are used for Cache Key, unless explicitly excluded; true - all query string parameters are ignored; value should be false if any of exclude or include is non-empty.'
            include: '- (Optional, Array) Use values of specified cookies in Cache Key.'
            ip_geolocation: '- (Optional) Whether this action is "on" or "off".'
            js: '- (Required) Whether Javascript should be minified. Valid values are "on" or "off".'
            lang: '- (Optional, Boolean) true - includes the first language code contained in the Accept-Language header sent by the client; defaults to false.'
            minify: '- (Optional) The configuration for HTML, CSS and JS minification. See below for full list of options.'
            mirage: '- (Optional) Whether this action is "on" or "off".'
            opportunistic_encryption: '- (Optional) Whether this action is "on" or "off".'
            origin_error_page_pass_thru: '- (Optional) Whether this action is "on" or "off".'
            polish: '- (Optional) Whether this action is "off", "lossless" or "lossy".'
            priority: '- (Optional) The priority of the page rule among others for this target, the higher the number the higher the priority as per API documentation.'
            query_string: '- (Required, but allowed to be empty) Controls which URL query string parameters go into the Cache Key.'
            resolve_override: '- (Optional) Overridden origin server name.'
            resolved: '- (Optional, Boolean) false (default) - includes the Host header in the HTTP request sent to the origin; true - includes the Host header that was resolved to get the origin IP for the request (e.g. changed with Resolve Override Page Rule).'
            respect_strong_etag: '- (Optional) Whether this action is "on" or "off".'
            response_buffering: '- (Optional) Whether this action is "on" or "off".'
            rocket_loader: '- (Optional) Whether to set the rocket loader to "on", "off".'
            security_level: '- (Optional) Whether to set the security level to "off", "essentially_off", "low", "medium", "high", or "under_attack".'
            server_side_exclude: '- (Optional) Whether this action is "on" or "off".'
            smart_errors: '- (Optional) Whether this action is "on" or "off".'
            sort_query_string_for_cache: '- (Optional) Whether this action is "on" or "off".'
            ssl: '- (Optional) Whether to set the SSL mode to "off", "flexible", "full", "strict", or "origin_pull".'
            status: '- (Optional) Whether the page rule is active or disabled.'
            status_code: '- (Required) The status code to use for the redirection.'
            target: '- (Required) The URL pattern to target with the page rule.'
            true_client_ip_header: '- (Optional) Whether this action is "on" or "off".'
            ttl: '- (Required) Duration a resource lives in the Cloudflare cache.'
            url: '- (Required) The URL to which the page rule should forward.'
            user: '- (Required, but allowed to be empty) Controls which end user-related features go into the Cache Key.'
            waf: '- (Optional) Whether this action is "on" or "off".'
            zone_id: '- (Required) The DNS zone ID to which the page rule should be added.'
        importStatements: []
    cloudflare_pages_domain:
        subCategory: ""
        description: Provides a resource for managing Cloudflare Pages domains.
        name: cloudflare_pages_domain
        title: cloudflare_pages_domain Resource - Cloudflare
        examples:
            - name: my-domain
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "domain": "example.com",
                  "project_name": "my-example-project"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            domain: (String) Custom domain. Modifying this attribute will force creation of a new resource.
            id: (String) The ID of this resource.
            project_name: (String) Name of the Pages Project. Modifying this attribute will force creation of a new resource.
            status: (String) Status of the custom domain.
        importStatements:
            - $ terraform import cloudflare_pages_domain.example <account_id>/<project_name>/<domain-name>
    cloudflare_pages_project:
        subCategory: ""
        description: Provides a resource which manages Cloudflare Pages projects.
        name: cloudflare_pages_project
        title: cloudflare_pages_project Resource - Cloudflare
        examples:
            - name: basic_project
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "name": "this-is-my-project-01",
                  "production_branch": "main"
                }
            - name: build_config
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "build_config": [
                    {
                      "build_command": "npm run build",
                      "destination_dir": "build",
                      "root_dir": "/",
                      "web_analytics_tag": "cee1c73f6e4743d0b5e6bb1a0bcaabcc",
                      "web_analytics_token": "021e1057c18547eca7b79f2516f06o7x"
                    }
                  ],
                  "name": "this-is-my-project-01",
                  "production_branch": "main"
                }
            - name: source_config
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "name": "this-is-my-project-01",
                  "production_branch": "main",
                  "source": [
                    {
                      "config": [
                        {
                          "deployments_enabled": true,
                          "owner": "cloudflare",
                          "pr_comments_enabled": true,
                          "preview_branch_excludes": [
                            "main",
                            "prod"
                          ],
                          "preview_branch_includes": [
                            "dev",
                            "preview"
                          ],
                          "preview_deployment_setting": "custom",
                          "production_branch": "main",
                          "production_deployment_enabled": true,
                          "repo_name": "ninjakittens"
                        }
                      ],
                      "type": "github"
                    }
                  ]
                }
            - name: deployment_configs
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "deployment_configs": [
                    {
                      "preview": [
                        {
                          "compatibility_date": "2022-08-15",
                          "compatibility_flags": [
                            "preview_flag"
                          ],
                          "d1_databases": {
                            "D1_BINDING": "445e2955-951a-4358-a35b-a4d0c813f63"
                          },
                          "durable_object_namespaces": {
                            "DO_BINDING": "5eb63bbbe01eeed093cb22bb8f5acdc3"
                          },
                          "environment_variables": {
                            "ENVIRONMENT": "preview"
                          },
                          "kv_namespaces": {
                            "KV_BINDING": "5eb63bbbe01eeed093cb22bb8f5acdc3"
                          },
                          "r2_buckets": {
                            "R2_BINDING": "some-bucket"
                          }
                        }
                      ],
                      "production": [
                        {
                          "compatibility_date": "2022-08-16",
                          "compatibility_flags": [
                            "production_flag",
                            "second flag"
                          ],
                          "d1_databases": {
                            "D1_BINDING_1": "445e2955-951a-4358-a35b-a4d0c813f63",
                            "D1_BINDING_2": "a399414b-c697-409a-a688-377db6433cd9"
                          },
                          "durable_object_namespaces": {
                            "DO_BINDING_1": "5eb63bbbe01eeed093cb22bb8f5acdc3",
                            "DO_BINDING_2": "3cdca5f8bb22bc390deee10ebbb36be5"
                          },
                          "environment_variables": {
                            "ENVIRONMENT": "production",
                            "OTHER_VALUE": "other value"
                          },
                          "kv_namespaces": {
                            "KV_BINDING_1": "5eb63bbbe01eeed093cb22bb8f5acdc3",
                            "KV_BINDING_2": "3cdca5f8bb22bc390deee10ebbb36be5"
                          },
                          "r2_buckets": {
                            "R2_BINDING_1": "some-bucket",
                            "R2_BINDING_2": "other-bucket"
                          }
                        }
                      ]
                    }
                  ],
                  "name": "this-is-my-project-01",
                  "production_branch": "main"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            build_command: (String) Command used to build project.
            build_config: '(Block List, Max: 1) Configuration for the project build process. (see below for nested schema)'
            compatibility_date: (String) Compatibility date used for Pages Functions.
            compatibility_flags: (List of String) Compatibility flags used for Pages Functions.
            config: '(Block List, Max: 1) Configuration for the source of the Cloudflare Pages project. (see below for nested schema)'
            created_on: (String) When the project was created.
            d1_databases: (Map of String) D1 Databases used for Pages Functions.
            deployment_configs: '(Block List, Max: 1) Configuration for deployments in a project. (see below for nested schema)'
            deployments_enabled: (Boolean) Toggle deployments on this repo. Defaults to true.
            destination_dir: (String) Output directory of the build.
            domains: (List of String) A list of associated custom domains for the project.
            durable_object_namespaces: (Map of String) Durable Object namespaces used for Pages Functions.
            environment_variables: (Map of String) Environment variables for Pages Functions.
            id: (String) The ID of this resource.
            kv_namespaces: (Map of String) KV namespaces used for Pages Functions.
            name: (String) Name of the project.
            owner: (String) Project owner username.
            pr_comments_enabled: (Boolean) Enable Pages to comment on Pull Requests. Defaults to true.
            preview: '(Block List, Max: 1) Configuration for preview deploys. (see below for nested schema)'
            preview_branch_excludes: (List of String) Branches will be excluded from automatic deployment.
            preview_branch_includes: (List of String) Branches will be included for automatic deployment.
            preview_deployment_setting: (String) Preview Deployment Setting. Defaults to all.
            production: '(Block List, Max: 1) Configuration for production deploys. (see below for nested schema)'
            production_branch: (String) The name of the branch that is used for the production environment.
            production_deployment_enabled: (Boolean) Enable production deployments. Defaults to true.
            r2_buckets: (Map of String) R2 Buckets used for Pages Functions.
            repo_name: (String) Project repository name.
            root_dir: (String) Directory to run the command.
            source: '(Block List, Max: 1) Configuration for the project source. (see below for nested schema)'
            subdomain: (String) The Cloudflare subdomain associated with the project.
            type: (String) Project host type.
            web_analytics_tag: (String) The classifying tag for analytics.
            web_analytics_token: (String) The auth token for analytics.
        importStatements:
            - $ terraform import cloudflare_pages_project.example <account_id>/<project_name>
    cloudflare_rate_limit:
        subCategory: ""
        description: Provides a Cloudflare rate limit resource for a particular zone.
        name: cloudflare_rate_limit
        title: cloudflare_rate_limit
        examples:
            - name: example
              manifest: |-
                {
                  "action": [
                    {
                      "mode": "simulate",
                      "response": [
                        {
                          "body": "custom response body",
                          "content_type": "text/plain"
                        }
                      ],
                      "timeout": 43200
                    }
                  ],
                  "bypass_url_patterns": [
                    "${var.cloudflare_zone}/bypass1",
                    "${var.cloudflare_zone}/bypass2"
                  ],
                  "correlate": [
                    {
                      "by": "nat"
                    }
                  ],
                  "description": "example rate limit for a zone",
                  "disabled": false,
                  "match": [
                    {
                      "request": [
                        {
                          "methods": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE",
                            "PATCH",
                            "HEAD"
                          ],
                          "schemes": [
                            "HTTP",
                            "HTTPS"
                          ],
                          "url_pattern": "${var.cloudflare_zone}/*"
                        }
                      ],
                      "response": [
                        {
                          "headers": [
                            {
                              "name": "Host",
                              "op": "eq",
                              "value": "localhost"
                            },
                            {
                              "name": "X-Example",
                              "op": "ne",
                              "value": "my-example"
                            }
                          ],
                          "origin_traffic": false,
                          "statuses": [
                            200,
                            201,
                            202,
                            301,
                            429
                          ]
                        }
                      ]
                    }
                  ],
                  "period": 2,
                  "threshold": 2000,
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            action: '- (Required) The action to be performed when the threshold of matched traffic within the period defined is exceeded.'
            body: '- (Required) The body to return, the content here should conform to the content_type.'
            by: '- (Optional) If set to ''nat'', NAT support will be enabled for rate limiting.'
            bypass_url_patterns: '- (Optional) URLs matching the patterns specified here will be excluded from rate limiting.'
            content_type: '- (Required) The content-type of the body, must be one of: ''text/plain'', ''text/xml'', ''application/json''.'
            correlate: '- (Optional) Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.'
            description: '- (Optional) A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.'
            disabled: '- (Optional) Whether this ratelimit is currently disabled. Default: false.'
            headers: '- (Optional) block is a list of maps with the following attributes:'
            id: '- The Rate limit ID.'
            match: '- (Optional) Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.'
            methods: '- (Optional) HTTP Methods, can be a subset [''POST'',''PUT''] or all [''_ALL_'']. Default: [''_ALL_''].'
            mode: '- (Required) The type of action to perform. Allowable values are ''simulate'', ''ban'', ''challenge'', ''js_challenge'' and ''managed_challenge''.'
            name: '- (Required) The name of the response header to match.'
            op: '- (Required) The operator when matching. Allowable values are ''eq'', ''ne'' where eq means equals, ne means not equals.'
            origin_traffic: '- (Optional) Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: true.'
            period: '- (Required) The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).'
            request: '- (Optional) Matches HTTP requests (from the client to Cloudflare). See definition below.'
            response: (Optional) Matches HTTP responses before they are returned to the client from Cloudflare. If this is defined, then the entire counting of traffic occurs at this stage. This field is not required.
            schemes: '- (Optional) HTTP Schemes, can be one [''HTTPS''], both [''HTTP'',''HTTPS''] or all [''_ALL_'']. Default: [''_ALL_''].'
            statuses: '- (Optional) HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.'
            threshold: '- (Required) The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).'
            timeout: '- (Optional) The time in seconds as an integer to perform the mitigation action. This field is required if the mode is either simulate or ban. Must be the same or greater than the period (min: 1, max: 86400).'
            url_pattern: '- (Optional) The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use _ for all traffic to your zone. Default: ''_''.'
            value: '- (Required) The value of the header, which will be exactly matched.'
            zone_id: '- (Required) The DNS zone ID to apply rate limiting to.'
        importStatements: []
    cloudflare_record:
        subCategory: ""
        description: Provides a Cloudflare record resource.
        name: cloudflare_record
        title: cloudflare_record
        examples:
            - name: foobar
              manifest: |-
                {
                  "name": "terraform",
                  "ttl": 3600,
                  "type": "A",
                  "value": "192.168.0.11",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
            - name: _sip_tls
              manifest: |-
                {
                  "data": [
                    {
                      "name": "terraform-srv",
                      "port": 443,
                      "priority": 0,
                      "proto": "_tls",
                      "service": "_sip",
                      "target": "example.com",
                      "weight": 0
                    }
                  ],
                  "name": "_sip._tls",
                  "type": "SRV",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            ae36f999674d196762efcc5abb06b345: '- the zone ID'
            allow_overwrite: '- (Optional) Allow creation of this record in Terraform to overwrite an existing record, if any. This does not affect the ability to update the record in Terraform and does not prevent other resources within Terraform or manual changes outside Terraform from overwriting this record. false by default. This configuration is not recommended for most environments.'
            created_on: '- The RFC3339 timestamp of when the record was created'
            d41d8cd98f00b204e9800998ecf8427e: '- record ID as returned by API'
            data: '- (Optional) Map of attributes that constitute the record value. Primarily used for LOC and SRV record types. Either this or value must be specified'
            hostname: '- The FQDN of the record'
            id: '- The record ID'
            metadata: '- A key-value map of string metadata Cloudflare associates with the record'
            modified_on: '- The RFC3339 timestamp of when the record was last modified'
            name: '- (Required) The name of the record'
            priority: '- (Optional) The priority of the record'
            proxiable: '- Shows whether this record can be proxied, must be true if setting proxied=true'
            proxied: '- (Optional) Whether the record gets Cloudflare''s origin protection; defaults to false.'
            ttl: '- (Optional) The TTL of the record (automatic: ''1'')'
            type: '- (Required) The type of the record'
            value: '- (Optional) The (string) value of the record. Either this or data must be specified'
            zone_id: '- (Required) The DNS zone ID to add the record to'
        importStatements: []
    cloudflare_ruleset:
        subCategory: ""
        description: The Cloudflare Ruleset Engine https://developers.cloudflare.com/firewall/cf-rulesets allows you to create and deploy rules and rulesets. The engine syntax, inspired by the Wireshark Display Filter language, is the same syntax used in custom Firewall Rules. Cloudflare uses the Ruleset Engine in different products, allowing you to configure several products using the same basic syntax.
        name: cloudflare_ruleset
        title: cloudflare_ruleset Resource - Cloudflare
        examples:
            - name: magic_transit_example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "description": "example magic transit ruleset description",
                  "kind": "root",
                  "name": "account magic transit",
                  "phase": "magic_transit",
                  "rules": [
                    {
                      "action": "allow",
                      "description": "Allow TCP Ephemeral Ports",
                      "expression": "tcp.dstport in { 32768..65535 }"
                    }
                  ]
                }
            - name: zone_level_managed_waf
              manifest: |-
                {
                  "description": "managed WAF ruleset description",
                  "kind": "zone",
                  "name": "managed WAF",
                  "phase": "http_request_firewall_managed",
                  "rules": [
                    {
                      "action": "execute",
                      "action_parameters": [
                        {
                          "id": "efb7b8c949ac4650a09736fc376e9aee"
                        }
                      ],
                      "description": "Execute Cloudflare Managed Ruleset on my zone-level phase entry point ruleset",
                      "enabled": true,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: zone_level_managed_waf_with_category_based_overrides
              manifest: |-
                {
                  "description": "managed WAF with tag-based overrides ruleset description",
                  "kind": "zone",
                  "name": "managed WAF with tag-based overrides",
                  "phase": "http_request_firewall_managed",
                  "rules": [
                    {
                      "action": "execute",
                      "action_parameters": [
                        {
                          "id": "efb7b8c949ac4650a09736fc376e9aee",
                          "overrides": [
                            {
                              "categories": [
                                {
                                  "action": "block",
                                  "category": "wordpress",
                                  "status": "enabled"
                                },
                                {
                                  "action": "block",
                                  "category": "joomla",
                                  "status": "enabled"
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "overrides to only enable wordpress rules to block",
                      "enabled": false,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: transform_uri_rule_path
              manifest: |-
                {
                  "description": "change the URI path to a new static path",
                  "kind": "zone",
                  "name": "transform rule for URI path",
                  "phase": "http_request_transform",
                  "rules": [
                    {
                      "action": "rewrite",
                      "action_parameters": [
                        {
                          "uri": [
                            {
                              "path": [
                                {
                                  "value": "/my-new-route"
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "example URI path transform rule",
                      "enabled": true,
                      "expression": "(http.host eq \"example.com\" and http.request.uri.path eq \"/old-path\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: transform_uri_rule_query
              manifest: |-
                {
                  "description": "change the URI query to a new static query",
                  "kind": "zone",
                  "name": "transform rule for URI query parameter",
                  "phase": "http_request_transform",
                  "rules": [
                    {
                      "action": "rewrite",
                      "action_parameters": [
                        {
                          "uri": [
                            {
                              "query": [
                                {
                                  "value": "old=new_again"
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "URI transformation query example",
                      "enabled": true,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: transform_uri_http_headers
              manifest: |-
                {
                  "description": "modify HTTP headers before reaching origin",
                  "kind": "zone",
                  "name": "transform rule for HTTP headers",
                  "phase": "http_request_late_transform",
                  "rules": [
                    {
                      "action": "rewrite",
                      "action_parameters": [
                        {
                          "headers": [
                            {
                              "name": "example-http-header-1",
                              "operation": "set",
                              "value": "my-http-header-value-1"
                            },
                            {
                              "expression": "cf.zone.name",
                              "name": "example-http-header-2",
                              "operation": "set"
                            },
                            {
                              "name": "example-http-header-3-to-remove",
                              "operation": "remove"
                            }
                          ]
                        }
                      ],
                      "description": "example request header transform rule",
                      "enabled": false,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: rate_limiting_example
              manifest: |-
                {
                  "description": "apply HTTP rate limiting for a route",
                  "kind": "zone",
                  "name": "restrict API requests count",
                  "phase": "http_ratelimit",
                  "rules": [
                    {
                      "action": "block",
                      "description": "rate limit for API",
                      "enabled": true,
                      "expression": "(http.request.uri.path matches \"^/api/\")",
                      "ratelimit": [
                        {
                          "characteristics": [
                            "cf.colo.id",
                            "ip.src"
                          ],
                          "mitigation_timeout": 600,
                          "period": 60,
                          "requests_per_period": 100
                        }
                      ]
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: http_origin_example
              manifest: |-
                {
                  "description": "Change origin for a route",
                  "kind": "zone",
                  "name": "Change to some origin",
                  "phase": "http_request_origin",
                  "rules": [
                    {
                      "action": "route",
                      "action_parameters": [
                        {
                          "host_header": "some.host",
                          "origin": [
                            {
                              "host": "some.host",
                              "port": 80
                            }
                          ]
                        }
                      ],
                      "description": "change origin to some.host",
                      "enabled": true,
                      "expression": "(http.request.uri.path matches \"^/api/\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: custom_fields_logging_example
              manifest: |-
                {
                  "description": "add custom fields to logging",
                  "kind": "zone",
                  "name": "log custom fields",
                  "phase": "http_log_custom_fields",
                  "rules": [
                    {
                      "action": "log_custom_field",
                      "action_parameters": [
                        {
                          "cookie_fields": [
                            "__ga",
                            "accountNumber",
                            "__cfruid"
                          ],
                          "request_fields": [
                            "content-type",
                            "x-forwarded-for",
                            "host"
                          ],
                          "response_fields": [
                            "server",
                            "content-type",
                            "allow"
                          ]
                        }
                      ],
                      "description": "log custom fields rule",
                      "enabled": true,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: cache_settings_example
              manifest: |-
                {
                  "description": "set cache settings for the request",
                  "kind": "zone",
                  "name": "set cache settings",
                  "phase": "http_request_cache_settings",
                  "rules": [
                    {
                      "action": "set_cache_settings",
                      "action_parameters": [
                        {
                          "browser_ttl": [
                            {
                              "mode": "respect_origin"
                            }
                          ],
                          "cache_key": [
                            {
                              "cache_deception_armor": true,
                              "custom_key": [
                                {
                                  "cookie": [
                                    {
                                      "check_presence": [
                                        "cabc_t",
                                        "cdef_t"
                                      ],
                                      "include": [
                                        "cabc",
                                        "cdef"
                                      ]
                                    }
                                  ],
                                  "header": [
                                    {
                                      "check_presence": [
                                        "habc_t",
                                        "hdef_t"
                                      ],
                                      "exclude_origin": true,
                                      "include": [
                                        "habc",
                                        "hdef"
                                      ]
                                    }
                                  ],
                                  "host": [
                                    {
                                      "resolved": true
                                    }
                                  ],
                                  "query_string": [
                                    {
                                      "exclude": [
                                        "*"
                                      ]
                                    }
                                  ],
                                  "user": [
                                    {
                                      "device_type": true,
                                      "geo": false
                                    }
                                  ]
                                }
                              ],
                              "ignore_query_strings_order": false
                            }
                          ],
                          "edge_ttl": [
                            {
                              "default": 60,
                              "mode": "override_origin",
                              "status_code_ttl": [
                                {
                                  "status_code": 200,
                                  "value": 50
                                },
                                {
                                  "status_code_range": [
                                    {
                                      "from": 201,
                                      "to": 300
                                    }
                                  ],
                                  "value": 30
                                }
                              ]
                            }
                          ],
                          "origin_error_page_passthru": false,
                          "respect_strong_etags": true,
                          "serve_stale": [
                            {
                              "disable_stale_while_updating": true
                            }
                          ]
                        }
                      ],
                      "description": "set cache settings rule",
                      "enabled": true,
                      "expression": "(http.host eq \"example.host.com\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: redirect_from_list_example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "description": "Redirect ruleset",
                  "kind": "root",
                  "name": "redirects",
                  "phase": "http_request_redirect",
                  "rules": [
                    {
                      "action": "redirect",
                      "action_parameters": [
                        {
                          "from_list": [
                            {
                              "key": "http.request.full_uri",
                              "name": "redirect_list"
                            }
                          ]
                        }
                      ],
                      "description": "Apply redirects from redirect_list",
                      "enabled": true,
                      "expression": "http.request.full_uri in $redirect_list"
                    }
                  ]
                }
            - name: redirect_from_value_example
              manifest: |-
                {
                  "description": "Redirect ruleset",
                  "kind": "root",
                  "name": "redirects",
                  "phase": "http_request_dynamic_redirect",
                  "rules": [
                    {
                      "action": "redirect",
                      "action_parameters": [
                        {
                          "from_value": [
                            {
                              "preserve_query_string": true,
                              "status_code": 301,
                              "target_url": [
                                {
                                  "value": "some_host.com"
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "description": "Apply redirect from value",
                      "enabled": true,
                      "expression": "(http.request.uri.path matches \"^/api/\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: http_custom_error_example
              manifest: |-
                {
                  "description": "Serve some error response",
                  "kind": "zone",
                  "name": "Serve some error response",
                  "phase": "http_custom_errors",
                  "rules": [
                    {
                      "action": "serve_error",
                      "action_parameters": [
                        {
                          "content": "some error html",
                          "content_type": "text/html",
                          "status_code": "530"
                        }
                      ],
                      "description": "serve some error response",
                      "enabled": true,
                      "expression": "(http.request.uri.path matches \"^/api/\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: http_config_rules_example
              manifest: |-
                {
                  "description": "set config rules for request",
                  "kind": "zone",
                  "name": "set config rules",
                  "phase": "http_config_settings",
                  "rules": [
                    {
                      "action": "set_config",
                      "action_parameters": [
                        {
                          "bic": true,
                          "email_obfuscation": true
                        }
                      ],
                      "description": "set config rules for matching request",
                      "enabled": true,
                      "expression": "(http.request.uri.path matches \"^/api/\")"
                    }
                  ],
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Conflicts with zone_id.
            action: '(String) Action to perform in the ruleset rule. Available values: block, challenge, ddos_dynamic, execute, force_connection_close, js_challenge, log, log_custom_field, managed_challenge, redirect, rewrite, route, score, set_cache_settings, set_config, serve_error, skip.'
            action_parameters: '(Block List, Max: 1) List of parameters that configure the behavior of the ruleset rule action. (see below for nested schema)'
            automatic_https_rewrites: (Boolean) Turn on or off Cloudflare Automatic HTTPS rewrites.
            autominify: (Block List) Indicate which file extensions to minify automatically. (see below for nested schema)
            bic: (Boolean) Inspect the visitor's browser for headers commonly associated with spammers and certain bots.
            browser_ttl: '(Block List, Max: 1) List of browser TTL parameters to apply to the request. (see below for nested schema)'
            cache: (Boolean) Whether to cache if expression matches.
            cache_by_device_type: (Boolean) Cache by device type. Conflicts with "custom_key.user.device_type".
            cache_deception_armor: (Boolean) Cache deception armor.
            cache_key: '(Block List, Max: 1) List of cache key parameters to apply to the request. (see below for nested schema)'
            categories: (Block List) List of tag-based overrides. (see below for nested schema)
            category: (String) Tag name to apply the ruleset rule override to.
            characteristics: (Set of String) List of parameters that define how Cloudflare tracks the request rate for this rule.
            check_presence: (List of String) List of cookies to check for presence in the custom key.
            content: (String) Content of the custom error response.
            content_type: (String) Content-Type of the custom error response.
            cookie: '(Block List, Max: 1) Cookie parameters for the custom key. (see below for nested schema)'
            cookie_fields: (Set of String) List of cookie values to include as part of custom fields logging.
            counting_expression: (String) Criteria for counting HTTP requests to trigger the Rate Limiting action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the Firewall Rules language documentation for all available fields, operators, and functions.
            css: (Boolean) SSL minification.
            custom_key: '(Block List, Max: 1) Custom key parameters for the request. (see below for nested schema)'
            default: (Number) Default browser TTL.
            description: (String) Brief summary of the ruleset and its intended use.
            device_type: (Boolean) Add device type to the custom key. Conflicts with "cache_key.cache_by_device_type".
            disable_apps: (Boolean) Turn off all active Cloudflare Apps.
            disable_railgun: (Boolean) Turn off railgun feature of the Cloudflare Speed app.
            disable_stale_while_updating: (Boolean) Disable stale while updating.
            disable_zaraz: (Boolean) Turn off zaraz feature.
            edge_ttl: '(Block List, Max: 1) List of edge TTL parameters to apply to the request. (see below for nested schema)'
            email_obfuscation: (Boolean) Turn on or off the Cloudflare Email Obfuscation feature of the Cloudflare Scrape Shield app.
            enabled: (Boolean) Whether the rule is active.
            exclude: (List of String) List of query string parameters to exclude from the custom key. Conflicts with "include".
            exclude_origin: (Boolean) Exclude the origin header from the custom key.
            exposed_credential_check: '(Block List, Max: 1) List of parameters that configure exposed credential checks. (see below for nested schema)'
            expression: (String) Criteria for an HTTP request to trigger the ruleset rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the Firewall Rules language documentation for all available fields, operators, and functions.
            from: (Number) From status code.
            from_list: '(Block List, Max: 1) Use a list to lookup information for the action. (see below for nested schema)'
            from_value: '(Block List, Max: 1) Use a value to lookup information for the action. (see below for nested schema)'
            geo: (Boolean) Add geo data to the custom key.
            header: '(Block List, Max: 1) Header parameters for the custom key. (see below for nested schema)'
            headers: (Block List) List of HTTP header modifications to perform in the ruleset rule. (see below for nested schema)
            host: '(Block List, Max: 1) Host parameters for the custom key. (see below for nested schema)'
            host_header: (String) Host Header that request origin receives.
            hotlink_protection: (Boolean) Turn on or off the hotlink protection feature.
            html: (Boolean) HTML minification.
            id: (String) The ID of this resource.
            ignore_query_strings_order: (Boolean) Ignore query strings order.
            include: (List of String) List of cookies to include in the custom key.
            increment: (Number)
            js: (Boolean) JS minification.
            key: (String) Expression to use for the list lookup.
            kind: '(String) Type of Ruleset to create. Available values: custom, managed, root, schema, zone.'
            lang: (Boolean) Add language data to the custom key.
            logging: '(Block List, Max: 1) List parameters to configure how the rule generates logs. (see below for nested schema)'
            matched-data-cli: command-line tool
            matched_data: '(Block List, Max: 1) List of properties to configure WAF payload logging. (see below for nested schema)'
            mirage: (Boolean) Turn on or off Cloudflare Mirage of the Cloudflare Speed app.
            mitigation_timeout: (Number) Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
            mode: (String) Mode of the browser TTL.
            name: (String) Name of the ruleset. Modifying this attribute will force creation of a new resource.
            operation: '(String) Action to perform on the HTTP request header. Available values: remove, set.'
            opportunistic_encryption: (Boolean) Turn on or off the Cloudflare Opportunistic Encryption feature of the Edge Certificates tab in the Cloudflare SSL/TLS app.
            origin: '(Block List, Max: 1) List of properties to change request origin. (see below for nested schema)'
            origin_error_page_passthru: (Boolean) Pass-through error page for origin.
            overrides: '(Block List, Max: 1) List of override configurations to apply to the ruleset. (see below for nested schema)'
            password_expression: (String) Firewall Rules expression language based on Wireshark display filters for where to check for the "password" value. Refer to the Firewall Rules language.
            path: '(Block List, Max: 1) URI path configuration when performing a URL rewrite. (see below for nested schema)'
            period: (Number) The period of time to consider (in seconds) when evaluating the request rate.
            phase: '(String) Point in the request/response lifecycle where the ruleset will be created. Available values: ddos_l4, ddos_l7, http_custom_errors, http_log_custom_fields, http_request_cache_settings, http_request_firewall_custom, http_request_firewall_managed, http_request_late_transform, http_request_late_transform_managed, http_request_main, http_request_origin, http_request_dynamic_redirect, http_request_redirect, http_request_sanitize, http_request_transform, http_response_firewall_managed, http_response_headers_transform, http_response_headers_transform_managed, magic_transit, http_ratelimit, http_request_sbfm, http_config_settings.'
            phases: '(Set of String) Point in the request/response lifecycle where the ruleset will be created. Available values: ddos_l4, ddos_l7, http_custom_errors, http_log_custom_fields, http_request_cache_settings, http_request_firewall_custom, http_request_firewall_managed, http_request_late_transform, http_request_late_transform_managed, http_request_main, http_request_origin, http_request_dynamic_redirect, http_request_redirect, http_request_sanitize, http_request_transform, http_response_firewall_managed, http_response_headers_transform, http_response_headers_transform_managed, magic_transit, http_ratelimit, http_request_sbfm, http_config_settings.'
            polish: (String) Apply options from the Polish feature of the Cloudflare Speed app.
            port: (Number) Origin Port where request is sent.
            preserve_query_string: (Boolean) Preserve query string for redirect URL.
            products: '(Set of String) Products to target with the actions. Available values: bic, hot, ratelimit, securityLevel, uablock, waf, zonelockdown.'
            public_key: (String) Public key to use within WAF Ruleset payload logging to view the HTTP request parameters. You can generate a public key using the  or in the Cloudflare dashboard.
            query: '(Block List, Max: 1) Query string configuration when performing a URL rewrite. (see below for nested schema)'
            query_string: '(Block List, Max: 1) Query string parameters for the custom key. (see below for nested schema)'
            ratelimit: '(Block List, Max: 1) List of parameters that configure HTTP rate limiting behaviour. (see below for nested schema)'
            ref: (String) Rule reference.
            request_fields: (Set of String) List of request headers to include as part of custom fields logging, in lowercase.
            requests_per_period: (Number) The number of requests over the period of time that will trigger the Rate Limiting rule.
            requests_to_origin: (Boolean) Whether to include requests to origin within the Rate Limiting count.
            resolved: (Boolean) Resolve hostname to IP address.
            respect_strong_etags: (Boolean) Respect strong ETags.
            response: (Block List) List of parameters that configure the response given to end users. (see below for nested schema)
            response_fields: (Set of String) List of response headers to include as part of custom fields logging, in lowercase.
            rocket_loader: (Boolean) Turn on or off Cloudflare Rocket Loader in the Cloudflare Speed app.
            rules: (Block List) List of rules to apply to the ruleset. (see below for nested schema)
            ruleset: (String) Which ruleset ID to target.
            rulesets: (Set of String) List of managed WAF rule IDs to target. Only valid when the "action" is set to skip.
            score_threshold: (Number) Anomaly score threshold to apply in the ruleset rule override. Only applicable to modsecurity-based rulesets.
            security_level: (String) Control options for the Security Level feature from the Security app.
            sensitivity_level: '(String) Sensitivity level to override for all ruleset rules. Available values: default, medium, low, eoff.'
            serve_stale: '(Block List, Max: 1) List of serve stale parameters to apply to the request. (see below for nested schema)'
            server_side_excludes: (Boolean) Turn on or off the Server Side Excludes feature of the Cloudflare Scrape Shield app.
            shareable_entitlement_name: (String) Name of entitlement that is shareable between entities.
            sni: '(Block List, Max: 1) List of properties to manange Server Name Indication. (see below for nested schema)'
            ssl: (String) Control options for the SSL feature of the Edge Certificates tab in the Cloudflare SSL/TLS app.
            status: '(String) Defines if the current ruleset-level override enables or disables the ruleset. Available values: enabled, disabled. Defaults to "".'
            status_code: (Number) HTTP status code of the custom error response.
            status_code_range: (Block List) Status code range for which the edge TTL is applied. Conflicts with "status_code". (see below for nested schema)
            status_code_ttl: (Block List) Edge TTL for the status codes. (see below for nested schema)
            sxg: (Boolean) Turn on or off the SXG feature.
            target_url: '(Block List, Max: 1) Target URL for redirect. (see below for nested schema)'
            to: (Number) To status code.
            uri: '(Block List, Max: 1) List of URI properties to configure for the ruleset rule when performing URL rewrite transformations. (see below for nested schema)'
            user: '(Block List, Max: 1) User parameters for the custom key. (see below for nested schema)'
            username_expression: (String) Firewall Rules expression language based on Wireshark display filters for where to check for the "username" value. Refer to the Firewall Rules language.
            value: (Number) Status code edge TTL value.
            version: (String) Version of the ruleset to deploy.
            zone_id: (String) The zone identifier to target for the resource. Conflicts with account_id.
        importStatements:
            - |-
              # Import an account scoped Ruleset configuration.
              $ terraform import cloudflare_ruleset.example account/<account_id>/<ruleset_id>

              # Import a zone scoped Ruleset configuration.
              $ terraform import cloudflare_ruleset.example zone/<zone_id>/<ruleset_id>
    cloudflare_spectrum_application:
        subCategory: ""
        description: Provides a Cloudflare Spectrum Application resource.
        name: cloudflare_spectrum_application
        title: cloudflare_spectrum_application
        examples:
            - name: ssh_proxy
              manifest: |-
                {
                  "dns": [
                    {
                      "name": "ssh.example.com",
                      "type": "CNAME"
                    }
                  ],
                  "origin_direct": [
                    "tcp://109.151.40.129:22"
                  ],
                  "protocol": "tcp/22",
                  "traffic_type": "direct",
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            9a7806061c88ada191ed06f989cc3dac: '- Application ID'
            argo_smart_routing: '- (Optional). Enables Argo Smart Routing. Defaults to false.'
            d41d8cd98f00b204e9800998ecf8427e: '- zone ID, as returned from API'
            dns: '- (Required) The name and type of DNS record for the Spectrum application. Fields documented below.'
            edge_ip_connectivity: '- (Optional). Choose which types of IP addresses will be provisioned for this subdomain. Valid values are: all, ipv4, ipv6. Defaults to all.'
            edge_ips: '- (Optional). A list of edge IPs (IPv4 and/or IPv6) to configure Spectrum application to. Requires Bring Your Own IP provisioned.'
            end: '- (Required) Upper bound of the origin port range, e.g. 2000'
            id: '- Unique identifier in the API for the spectrum application.'
            ip_firewall: '- (Optional) Enables the IP Firewall for this application. Defaults to true.'
            name: '- (Required) The name of the DNS record associated with the application.i.e. ssh.example.com.'
            origin_direct: '- (Optional) A list of destination addresses to the origin. e.g. tcp://192.0.2.1:22.'
            origin_dns: '- (Optional) A destination DNS addresses to the origin. Fields documented below.'
            origin_port: '- (Optional) If using origin_dns and not origin_port_range, this is a required attribute. Origin port to proxy traffice to e.g. 22.'
            origin_port_range: '- (Optional) If using origin_dns and not origin_port, this is a required attribute. Origin port range to proxy traffice to. When using a range, the protocol field must also specify a range, e.g. tcp/22-23. Fields documented below.'
            protocol: '- (Required) The port configuration at Cloudflare’s edge. e.g. tcp/22.'
            proxy_protocol: '- (Optional) Enables a proxy protocol to the origin. Valid values are: off, v1, v2, and simple. Defaults to off.'
            start: '- (Required) Lower bound of the origin port range, e.g. 1000'
            tls: '- (Optional) TLS configuration option for Cloudflare to connect to your origin. Valid values are: off, flexible, full and strict. Defaults to off.'
            traffic_type: '- (Optional) Sets application type. Valid values are: direct, http, https. Defaults to direct.'
            type: '- (Required) The type of DNS record associated with the application. Valid values: CNAME.'
            zone_id: '- (Required) The DNS zone ID to add the application to'
        importStatements: []
    cloudflare_split_tunnel:
        subCategory: ""
        description: Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either include or exclude lists of routes from the WARP client's tunnel.
        name: cloudflare_split_tunnel
        title: cloudflare_split_tunnel Resource - Cloudflare
        examples:
            - name: example_split_tunnel_exclude
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "mode": "exclude",
                  "tunnels": [
                    {
                      "description": "example domain",
                      "host": "*.example.com"
                    }
                  ]
                }
              dependencies:
                cloudflare_device_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
            - name: example_split_tunnel_include
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "mode": "include",
                  "tunnels": [
                    {
                      "description": "example domain",
                      "host": "*.example.com"
                    }
                  ]
                }
              dependencies:
                cloudflare_device_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
            - name: example_device_policy_split_tunnel_exclude
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "mode": "exclude",
                  "policy_id": "${cloudflare_device_policy.developer_warp_policy.id}",
                  "tunnels": [
                    {
                      "description": "example domain",
                      "host": "*.example.com"
                    }
                  ]
                }
              references:
                policy_id: cloudflare_device_policy.developer_warp_policy.id
              dependencies:
                cloudflare_device_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
            - name: example_split_tunnel_include
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "mode": "include",
                  "policy_id": "${cloudflare_device_policy.developer_warp_policy.id}",
                  "tunnels": [
                    {
                      "description": "example domain",
                      "host": "*.example.com"
                    }
                  ]
                }
              references:
                policy_id: cloudflare_device_policy.developer_warp_policy.id
              dependencies:
                cloudflare_device_policy.developer_warp_policy: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "match": "any(identity.groups.name[*] in {\"Developers\"})",
                      "name": "Developers",
                      "precedence": 10,
                      "switch_locked": true
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            address: (String) The address for the tunnel.
            description: (String) A description for the tunnel.
            host: (String) The domain name for the tunnel.
            id: (String) The ID of this resource.
            mode: '(String) The mode of the split tunnel policy. Available values: include, exclude.'
            policy_id: (String) The settings policy for which to configure this split tunnel policy.
            tunnels: '(Block Set, Min: 1) The value of the tunnel attributes. (see below for nested schema)'
        importStatements:
            - |-
              # Split Tunnels for default device policies must use "default" as the policy ID.
              $ terraform import cloudflare_split_tunnel.example <account_id>/<policy_id>/<mode>
    cloudflare_static_route:
        subCategory: ""
        description: Provides a resource which manages Cloudflare static routes for Magic Transit or Magic WAN.
        name: cloudflare_static_route
        title: cloudflare_static_route
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "c4a7362d577a6c3019a474fd6f485821",
                  "colo_names": [
                    "den01"
                  ],
                  "colo_regions": [
                    "APAC"
                  ],
                  "description": "New route for new prefix 192.0.2.0/24",
                  "nexthop": "10.0.0.0",
                  "prefix": "192.0.2.0/24",
                  "priority": 100,
                  "weight": 10
                }
        argumentDocs:
            account_id: '- (Required) The ID of the account where the static route is being created.'
            colo_names: '- (Optional) Optional list of Cloudflare colocation names for this static route.'
            colo_regions: '- (Optional) Optional list of Cloudflare colocation regions for this static route.'
            description: '- (Optional) Description of the static route.'
            nexthop: '- (Required) The nexthop IP address where traffic will be routed to.'
            prefix: '- (Required) Your network prefix using CIDR notation.'
            priority: '- (Required) The priority for the static route.'
            weight: '- (Optional) The optional weight for ECMP routes.'
        importStatements: []
    cloudflare_teams_account:
        subCategory: ""
        description: Provides a Cloudflare Teams Account resource.
        name: cloudflare_teams_account
        title: cloudflare_teams_account
        examples:
            - name: main
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "antivirus": [
                    {
                      "enabled_download_phase": true,
                      "enabled_upload_phase": false,
                      "fail_closed": true
                    }
                  ],
                  "block_page": [
                    {
                      "background_color": "#000000",
                      "footer_text": "hello",
                      "header_text": "hello",
                      "logo_path": "https://google.com"
                    }
                  ],
                  "fips": [
                    {
                      "tls": true
                    }
                  ],
                  "logging": [
                    {
                      "redact_pii": true,
                      "settings_by_rule_type": [
                        {
                          "dns": [
                            {
                              "log_all": false,
                              "log_blocks": true
                            }
                          ],
                          "http": [
                            {
                              "log_all": true,
                              "log_blocks": true
                            }
                          ],
                          "l4": [
                            {
                              "log_all": false,
                              "log_blocks": true
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "proxy": [
                    {
                      "tcp": true,
                      "udp": true
                    }
                  ],
                  "tls_decrypt_enabled": true,
                  "url_browser_isolation_enabled": true
                }
        argumentDocs:
            account_id: '- (Required) The account to which the teams location should be added.'
            antivirus: '- (Optional) Configuration block for antivirus traffic scanning.'
            background_color: '- (Optional) Hex code of block page background color.'
            block_page: '- (Optional) Configuration for a custom block page.'
            enabled: '- (Optional) Indicator of enablement.'
            enabled_download_phase: '- (Optional) Scan on file download.'
            enabled_upload_phase: '- (Optional) Scan on file upload.'
            fail_closed: '- (Optional) Block requests for files that cannot be scanned.'
            fips: '- (Optional) Configure compliance with Federal Information Processing Standards.'
            footer_text: '- (Optional) Block page header text.'
            header_text: '- (Optional) Block page footer text.'
            logo_path: '- (Optional) URL of block page logo.'
            name: '- (Optional) Name of block page configuration.'
            proxy: '- (Optional) Configuration block for specifying which protocols are proxied.'
            redact_pii: |-
                - (Required) Redact personally identifiable information from activity logging (PII fields are: source IP,
                user email, user ID, device ID, URL, referrer, user agent).
            settings_by_rule_type: |-
                - (Required) Represents whether all requests are logged or only the blocked requests are
                logged in DNS, HTTP and L4 filters.
            tcp: '- (Required) Whether gateway proxy is enabled on gateway devices for tcp traffic.'
            tls: '- (Optional) Only allow FIPS-compliant TLS configuration.'
            tls_decrypt_enabled: '- (Optional) Indicator that decryption of TLS traffic is enabled.'
            udp: '- (Required) Whether gateway proxy is enabled on gateway devices for udp traffic.'
            url_browser_isolation_enabled: '- (Optional) Safely browse websites in Browser Isolation through a URL.'
        importStatements: []
    cloudflare_teams_list:
        subCategory: ""
        description: Provides a Cloudflare Teams List resource.
        name: cloudflare_teams_list
        title: cloudflare_teams_list
        examples:
            - name: corporate_devices
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "description": "Serial numbers for all corporate devices.",
                  "items": [
                    "8GE8721REF",
                    "5RE8543EGG",
                    "1YE2880LNP"
                  ],
                  "name": "Corporate devices",
                  "type": "SERIAL"
                }
        argumentDocs:
            account_id: '- (Required) The account to which the teams list should be added.'
            description: '- (Optional) The description of the teams list.'
            id: '- ID of the teams list.'
            items: '- (Required) The items of the teams list.'
            name: '- (Required) Name of the teams list.'
            type: '- (Required) The teams list type. Valid values are IP, SERIAL, URL, DOMAIN, and EMAIL.'
        importStatements: []
    cloudflare_teams_location:
        subCategory: ""
        description: Provides a Cloudflare Teams Location resource.
        name: cloudflare_teams_location
        title: cloudflare_teams_location
        examples:
            - name: corporate_office
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "client_default": true,
                  "name": "office",
                  "networks": [
                    {
                      "network": "203.0.113.1/32"
                    },
                    {
                      "network": "203.0.113.2/32"
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Required) The account to which the teams location should be added.'
            anonymized_logs_enabled: '- Indicator that anonymized logs are enabled.'
            client_default: '- (Optional) Indicator that this is the default location.'
            doh_subdomain: '- The FQDN that DoH clients should be pointed at.'
            id: '- ID of the teams location.'
            ip: '- Client IP address'
            ipv4_destination: '- IP to direct all IPv4 DNS queries too.'
            name: '- (Required) Name of the teams location.'
            networks: '- (Optional) The networks CIDRs that comprise the location.'
        importStatements: []
    cloudflare_teams_proxy_endpoint:
        subCategory: ""
        description: Provides a Cloudflare Teams Proxy Endpoint resource.
        name: cloudflare_teams_proxy_endpoint
        title: cloudflare_teams_proxy_endpoint
        examples:
            - name: corporate_office
              manifest: |-
                {
                  "account_id": "1d5fdc9e88c8a8c4518b068cd94331fe",
                  "ips": [
                    "192.0.2.0/24"
                  ],
                  "name": "office"
                }
        argumentDocs:
            account_id: '- (Required) The account to which the teams proxy endpoint should be added.'
            id: '- ID of the teams proxy endpoint.'
            ips: '- (Required) The networks CIDRs that will be allowed to initiate proxy connections.'
            name: '- (Required) Name of the teams proxy endpoint.'
            subdomain: '- The FQDN that proxy clients should be pointed at.'
        importStatements: []
    cloudflare_teams_rule:
        subCategory: ""
        description: Provides a Cloudflare Teams rule resource.
        name: cloudflare_teams_rule
        title: cloudflare_teams_rule
        examples:
            - name: rule1
              manifest: |-
                {
                  "account_id": "d57c3de47a013c03ca7e237dd3e61d7d",
                  "action": "block",
                  "description": "desc",
                  "filters": [
                    "http"
                  ],
                  "name": "office",
                  "precedence": 1,
                  "rule_settings": [
                    {
                      "block_page_enabled": true,
                      "block_page_reason": "access not permitted"
                    }
                  ],
                  "traffic": "http.request.uri == \"https://www.example.com/malicious\""
                }
        argumentDocs:
            account_id: '- (Required) The account to which the teams rule should be added.'
            action: '- (Required) The action executed by matched teams rule.'
            add_headers: '- (Optional, Map) Add custom headers to allowed requests in the form of key-value pairs.'
            biso_admin_controls: '- (Optional) Configure how browser isolation behaves (refer to the nested schema).'
            block_page_enabled: '- (Optional) Indicator of block page enablement.'
            block_page_reason: '- (Optional) The displayed reason for a user being blocked.'
            check_session: '- (Optional) Configure how session check behaves (refer to the nested schema).'
            description: '- (Required) The description of the teams rule.'
            device_posture: '- (Optional) The wirefilter expression to be used for device_posture check matching.'
            disable_copy_paste: '- (Boolean) Disable copy-paste.'
            disable_download: '- (Boolean) Disable download.'
            disable_keyboard: '- (Boolean) Disable keyboard usage.'
            disable_printing: '- (Boolean) Disable printing.'
            disable_upload: '- (Boolean) Disable upload.'
            duration: '- (Optional) Configure how fresh the session needs to be to be considered valid.'
            enabled: '- (Optional) Indicator of rule enablement.'
            enforce: '- (Optional) Enable session enforcement for this rule.'
            filters: '- (Optional) The protocol or layer to evaluate the traffic and identity expressions.'
            identity: '- (Optional) The wirefilter expression to be used for identity matching.'
            insecure_disable_dnssec_validation: '- (Optional) Disable DNSSEC validation (must be Allow rule)'
            ip: '- (Required) Override IP to forward traffic to.'
            l4override: '- (Optional) Settings to forward layer 4 traffic (refer to the nested schema).'
            name: '- (Required) The name of the teams rule.'
            override_host: '- (Optional) The host to override matching DNS queries with.'
            override_ips: '- (Optional) The IPs to override matching DNS queries with.'
            port: '- (Required) Override Port to forward traffic to.'
            precedence: '- (Required) The evaluation precedence of the teams rule.'
            rule_settings: '- (Optional) Additional rule settings (refer to the nested schema).'
            traffic: '- (Optional) The wirefilter expression to be used for traffic matching.'
        importStatements: []
    cloudflare_tiered_cache:
        subCategory: ""
        description: Provides a resource, that manages Cloudflare Tiered Cache settings. This allows you to adjust topologies for your zone.
        name: cloudflare_tiered_cache
        title: cloudflare_tiered_cache Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "cache_type": "smart",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            cache_type: '(String) The typed of tiered cache to utilize on the zone. Available values: generic, smart, off.'
            id: (String) The ID of this resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_total_tls:
        subCategory: ""
        description: Provides a resource which manages Total TLS for a zone.
        name: cloudflare_total_tls
        title: cloudflare_total_tls Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "certificate_authority": "lets_encrypt",
                  "enabled": true,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            certificate_authority: '(String) The Certificate Authority that Total TLS certificates will be issued through. Available values: google, lets_encrypt.'
            enabled: (Boolean) Enable Total TLS for the zone.
            id: (String) The ID of this resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_tunnel_config:
        subCategory: ""
        description: Provides a Cloudflare Tunnel configuration resource.
        name: cloudflare_tunnel_config
        title: cloudflare_tunnel_config Resource - Cloudflare
        examples:
            - name: example_config
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "config": [
                    {
                      "ingress_rule": [
                        {
                          "hostname": "foo",
                          "path": "/bar",
                          "service": "http://10.0.0.2:8080"
                        },
                        {
                          "service": "https://10.0.0.3:8081"
                        }
                      ],
                      "origin_request": [
                        {
                          "bastion_mode": false,
                          "ca_pool": "/path/to/unsigned/ca/pool",
                          "connect_timeout": "1m0s",
                          "disable_chunked_encoding": false,
                          "http_host_header": "baz",
                          "ip_rules": [
                            {
                              "allow": false,
                              "ports": [
                                80,
                                443
                              ],
                              "prefix": "/web"
                            }
                          ],
                          "keep_alive_connections": 1024,
                          "keep_alive_timeout": "1m0s",
                          "no_happy_eyeballs": false,
                          "no_tls_verify": false,
                          "origin_server_name": "foobar",
                          "proxy_address": "10.0.0.1",
                          "proxy_port": "8123",
                          "proxy_type": "socks",
                          "tcp_keep_alive": "1m0s",
                          "tls_timeout": "1m0s"
                        }
                      ],
                      "warp_routing": [
                        {
                          "enabled": true
                        }
                      ]
                    }
                  ],
                  "tunnel_id": "${cloudflare_argo_tunnel.example_tunnel.id}"
                }
              references:
                tunnel_id: cloudflare_argo_tunnel.example_tunnel.id
              dependencies:
                cloudflare_argo_tunnel.example_tunnel: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "name": "example_tunnel",
                      "secret": "\u003c32 character secret\u003e"
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            allow: (Boolean) Whether to allow the IP prefix.
            bastion_mode: (Boolean) Runs as jump host.
            ca_pool: (String) Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare. Defaults to "".
            config: '(Block List, Min: 1, Max: 1) Configuration block for Tunnel Configuration. (see below for nested schema)'
            connect_timeout: (String) Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout. Defaults to 30s.
            disable_chunked_encoding: (Boolean) Disables chunked transfer encoding. Useful if you are running a Web Server Gateway Interface (WSGI) server. Defaults to false.
            enabled: (Boolean) Whether WARP routing is enabled.
            hostname: (String) Hostname to match the incoming request with. If the hostname matches, the request will be sent to the service.
            http_host_header: (String) Sets the HTTP Host header on requests sent to the local service. Defaults to "".
            id: (String) The ID of this resource.
            ingress_rule: '(Block List, Min: 1) Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. Read more. (see below for nested schema)'
            ip_rules: (Block Set) IP rules for the proxy service. (see below for nested schema)
            keep_alive_connections: (Number) Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections. Defaults to 100.
            keep_alive_timeout: (String) Timeout after which an idle keepalive connection can be discarded. Defaults to 1m30s.
            no_happy_eyeballs: (Boolean) Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols. Defaults to false.
            no_tls_verify: (Boolean) Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted. Defaults to false.
            origin_request: '(Block List, Max: 1) (see below for nested schema)'
            origin_server_name: (String) Hostname that cloudflared should expect from your origin server certificate. Defaults to "".
            path: (String) Path of the incoming request. If the path matches, the request will be sent to the local service.
            ports: (List of Number) Ports to use within the IP rule.
            prefix: (String) IP rule prefix.
            proxy_address: (String) cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures the listen address for that proxy. Defaults to 127.0.0.1.
            proxy_port: (Number) cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures the listen port for that proxy. If set to zero, an unused port will randomly be chosen. Defaults to 0.
            proxy_type: '(String) cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Available values: ``, socks. Defaults to "".'
            service: (String) Name of the service to which the request will be sent.
            tcp_keep_alive: (String) The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server. Defaults to 30s.
            tls_timeout: (String) Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server. Defaults to 10s.
            tunnel_id: (String) Identifier of the Tunnel to target for this configuration.
            warp_routing: '(Block List, Max: 1) If you''re exposing a private network, you need to add the warp-routing key and set it to true. (see below for nested schema)'
        importStatements: []
    cloudflare_tunnel_route:
        subCategory: ""
        description: Provides a resource, that manages Cloudflare tunnel routes for Zero Trust. Tunnel routes are used to direct IP traffic through Cloudflare Tunnels.
        name: cloudflare_tunnel_route
        title: cloudflare_tunnel_route Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "comment": "New tunnel route for documentation",
                  "network": "192.0.2.24/32",
                  "tunnel_id": "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
                  "virtual_network_id": "bdc39a3c-3104-4c23-8ac0-9f455dda691a"
                }
              dependencies:
                cloudflare_argo_tunnel.tunnel: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "name": "my_tunnel",
                      "secret": "AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="
                    }
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "comment": "New tunnel route for documentation",
                  "network": "192.0.2.24/32",
                  "tunnel_id": "${cloudflare_argo_tunnel.tunnel.id}",
                  "virtual_network_id": "bdc39a3c-3104-4c23-8ac0-9f455dda691a"
                }
              references:
                tunnel_id: cloudflare_argo_tunnel.tunnel.id
              dependencies:
                cloudflare_argo_tunnel.tunnel: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "name": "my_tunnel",
                      "secret": "AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            comment: (String) Description of the tunnel route.
            id: (String) The ID of this resource.
            network: (String) The IPv4 or IPv6 network that should use this tunnel route, in CIDR notation.
            tunnel_id: (String) The ID of the tunnel that will service the tunnel route.
            virtual_network_id: (String) The ID of the virtual network for which this route is being added; uses the default virtual network of the account if none is provided. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_tunnel_route.example <account_id>/<network_cidr>/<virtual_network_id>
    cloudflare_tunnel_virtual_network:
        subCategory: ""
        description: Provides a resource, that manages Cloudflare tunnel virtual networks for Zero Trust. Tunnel virtual networks are used for segregation of Tunnel IP Routes via Virtualized Networks to handle overlapping private IPs in your origins.
        name: cloudflare_tunnel_virtual_network
        title: cloudflare_tunnel_virtual_network Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "comment": "New tunnel virtual network for documentation",
                  "name": "vnet-for-documentation"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
            comment: (String) Description of the tunnel virtual network.
            id: (String) The ID of this resource.
            is_default_network: (Boolean) Whether this virtual network is the default one for the account. This means IP Routes belong to this virtual network and Teams Clients in the account route through this virtual network, unless specified otherwise for each case.
            name: (String) A user-friendly name chosen when the virtual network is created.
        importStatements:
            - $ terraform import cloudflare_tunnel_virtual_network.example <account_id>/<vnet_id>
    cloudflare_url_normalization_settings:
        subCategory: ""
        description: Provides a resource to manage URL Normalization Settings.
        name: cloudflare_url_normalization_settings
        title: cloudflare_url_normalization_settings Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "scope": "incoming",
                  "type": "cloudflare",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            id: (String) The ID of this resource.
            scope: (String) The scope of the URL normalization.
            type: (String) The type of URL normalization performed by Cloudflare.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_user_agent_blocking_rule:
        subCategory: ""
        description: Provides a resource to manage User Agent Blocking Rules.
        name: cloudflare_user_agent_blocking_rule
        title: cloudflare_user_agent_blocking_rule Resource - Cloudflare
        examples:
            - name: example_1
              manifest: |-
                {
                  "configuration": [
                    {
                      "target": "ua",
                      "value": "Chrome"
                    }
                  ],
                  "description": "My description 1",
                  "mode": "js_challenge",
                  "paused": false,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
            - name: example_2
              manifest: |-
                {
                  "configuration": [
                    {
                      "target": "ua",
                      "value": "Mozilla"
                    }
                  ],
                  "description": "My description 22",
                  "mode": "challenge",
                  "paused": true,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            configuration: '(Block List, Min: 1, Max: 1) The configuration object for the current rule. (see below for nested schema)'
            description: (String) An informative summary of the rule.
            id: (String) The ID of this resource.
            mode: '(String) The action to apply to a matched request. Available values: block, challenge, js_challenge, managed_challenge.'
            paused: (Boolean) When true, indicates that the rule is currently paused.
            target: (String) The configuration target for this rule. You must set the target to ua for User Agent Blocking rules.
            value: (String) The exact user agent string to match. This value will be compared to the received User-Agent HTTP header value.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements: []
    cloudflare_waf_group:
        subCategory: ""
        description: Provides a Cloudflare WAF rule group resource for a particular zone.
        name: cloudflare_waf_group
        title: cloudflare_waf_group
        examples:
            - name: honey_pot
              manifest: |-
                {
                  "group_id": "de677e5818985db1285d0e80225f06e5",
                  "mode": "on",
                  "zone_id": "ae36f999674d196762efcc5abb06b345"
                }
        argumentDocs:
            group_id: '- (Required) The WAF Rule Group ID.'
            id: '- The WAF Rule Group ID, the same as group_id.'
            mode: '- (Optional) The mode of the group, can be one of ["on", "off"].'
            package_id: '- (Optional) The ID of the WAF Rule Package that contains the group.'
            zone_id: '- (Required) The DNS zone ID to apply to.'
        importStatements: []
    cloudflare_waf_override:
        subCategory: ""
        description: Provides a Cloudflare WAF Override resource.
        name: cloudflare_waf_override
        title: cloudflare_waf_override
        examples:
            - name: shop_ecxample
              manifest: |-
                {
                  "groups": {
                    "ea8687e59929c1fd05ba97574ad43f77": "default"
                  },
                  "rewrite_action": {
                    "challenge": "block",
                    "default": "block"
                  },
                  "rules": {
                    "100015": "disable"
                  },
                  "urls": [
                    "example.com/no-waf-here",
                    "example.com/another/path/*"
                  ],
                  "zone_id": "1d5fdc9e88c8a8c4518b068cd94331fe"
                }
        argumentDocs:
            description: '- (Optional) Description of what the WAF override does.'
            groups: '- (Optional) Similar to rules; which WAF groups you want to alter.'
            paused: '- (Optional) Whether this package is currently paused.'
            priority: '- (Optional) Relative priority of this configuration when multiple configurations match a single URL.'
            rewrite_action: '- (Optional) When a WAF rule matches, substitute its configured action for a different action specified by this definition.'
            rules: '- (Required) A list of WAF rule ID to rule action you intend to apply.'
            urls: '- (Required) An array of URLs to apply the WAF override to.'
            zone_id: '- (Required) The DNS zone to which the WAF override condition should be added.'
        importStatements: []
    cloudflare_waf_package:
        subCategory: ""
        description: Provides a Cloudflare WAF rule package resource for a particular zone.
        name: cloudflare_waf_package
        title: cloudflare_waf_package
        examples:
            - name: owasp
              manifest: |-
                {
                  "action_mode": "simulate",
                  "package_id": "a25a9a7e9c00afc1fb2e0245519d725b",
                  "sensitivity": "medium",
                  "zone_id": "ae36f999674d196762efcc5abb06b345"
                }
        argumentDocs:
            action_mode: '- (Optional) The action mode of the package, can be one of ["block", "challenge", "simulate"].'
            id: '- The WAF Package ID, the same as package_id.'
            package_id: '- (Required) The WAF Package ID.'
            sensitivity: '- (Optional) The sensitivity of the package, can be one of ["high", "medium", "low", "off"].'
            zone_id: '- (Required) The DNS zone ID to apply to.'
        importStatements: []
    cloudflare_waf_rule:
        subCategory: ""
        description: Provides a Cloudflare WAF rule resource for a particular zone.
        name: cloudflare_waf_rule
        title: cloudflare_waf_rule
        examples:
            - name: rule_100000
              manifest: |-
                {
                  "mode": "simulate",
                  "rule_id": "100000",
                  "zone_id": "ae36f999674d196762efcc5abb06b345"
                }
        argumentDocs:
            group_id: '- The ID of the WAF Rule Group that contains the rule.'
            id: '- The WAF Rule ID, the same as rule_id.'
            mode: '- (Required) The mode of the rule, can be one of ["block", "challenge", "default", "disable", "simulate"] or ["on", "off"] depending on the WAF Rule type.'
            package_id: '- (Optional) The ID of the WAF Rule Package that contains the rule.'
            rule_id: '- (Required) The WAF Rule ID.'
            zone_id: '- (Required) The DNS zone ID to apply to.'
        importStatements: []
    cloudflare_waiting_room:
        subCategory: ""
        description: Provides a Cloudflare Waiting Room resource.
        name: cloudflare_waiting_room
        title: cloudflare_waiting_room Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "host": "foo.example.com",
                  "name": "foo",
                  "new_users_per_minute": 200,
                  "path": "/",
                  "total_active_users": 200,
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            create: (String)
            custom_page_html: (String) This is a templated html file that will be rendered at the edge.
            default_template_language: '(String) The language to use for the default waiting room page. Available values: de-DE, es-ES, en-US, fr-FR, id-ID, it-IT, ja-JP, ko-KR, nl-NL, pl-PL, pt-BR, tr-TR, zh-CN, zh-TW. Defaults to en-US.'
            description: (String) A description to add more details about the waiting room.
            disable_session_renewal: (Boolean) Disables automatic renewal of session cookies.
            host: (String) Host name for which the waiting room will be applied (no wildcards).
            id: (String) The ID of this resource.
            json_response_enabled: '(Boolean) If true, requests to the waiting room with the header Accept: application/json will receive a JSON response object.'
            name: (String) A unique name to identify the waiting room. Modifying this attribute will force creation of a new resource.
            new_users_per_minute: (Number) The number of new users that will be let into the route every minute.
            path: (String) The path within the host to enable the waiting room on. Defaults to /.
            queue_all: (Boolean) If queue_all is true, then all traffic will be sent to the waiting room.
            queueing_method: '(String) The queueing method used by the waiting room. Available values: fifo, random, passthrough, reject. Defaults to fifo.'
            session_duration: (Number) Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin. Defaults to 5.
            suspended: (Boolean) Suspends the waiting room.
            timeouts: (Block, Optional) (see below for nested schema)
            total_active_users: (Number) The total number of active user sessions on the route at a point in time.
            update: (String)
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - |-
              # Use the Zone ID and Waiting Room ID to import.
              $ terraform import cloudflare_waiting_room.default <zone_id>/<waiting_room_id>
    cloudflare_waiting_room_event:
        subCategory: ""
        description: Provides a Cloudflare Waiting Room Event resource.
        name: cloudflare_waiting_room_event
        title: cloudflare_waiting_room_event Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "event_end_time": "2006-01-02T20:04:05Z",
                  "event_start_time": "2006-01-02T15:04:05Z",
                  "name": "foo",
                  "waiting_room_id": "d41d8cd98f00b204e9800998ecf8427e",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            created_on: (String) Creation time.
            custom_page_html: (String) This is a templated html file that will be rendered at the edge.
            description: (String) A description to let users add more details about the event.
            disable_session_renewal: (Boolean) Disables automatic renewal of session cookies.
            event_end_time: (String) ISO 8601 timestamp that marks the end of the event. Modifying this attribute will force creation of a new resource.
            event_start_time: (String) ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before event_end_time. Modifying this attribute will force creation of a new resource.
            id: (String) The ID of this resource.
            modified_on: (String) Last modified time.
            name: (String) A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. Modifying this attribute will force creation of a new resource.
            new_users_per_minute: (Number) The number of new users that will be let into the route every minute.
            prequeue_start_time: (String) ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before event_start_time.
            queueing_method: '(String) The queueing method used by the waiting room. Available values: fifo, random, passthrough, reject.'
            session_duration: (Number) Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
            shuffle_at_event_start: (Boolean) Users in the prequeue will be shuffled randomly at the event_start_time. Requires that prequeue_start_time is not null. Defaults to false.
            suspended: (Boolean) If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
            total_active_users: (Number) The total number of active user sessions on the route at a point in time.
            waiting_room_id: (String) The Waiting Room ID the event should apply to. Modifying this attribute will force creation of a new resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - |-
              # Use the Zone ID, Waiting Room ID, and Event ID to import.
              $ terraform import cloudflare_waiting_room_event.default <zone_id>/<waiting_room_id>/<waiting_room_event_id>
    cloudflare_waiting_room_rules:
        subCategory: ""
        description: Provides a Cloudflare Waiting Room Rules resource.
        name: cloudflare_waiting_room_rules
        title: cloudflare_waiting_room_rules Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "rules": [
                    {
                      "action": "bypass_waiting_room",
                      "description": "bypass ip list",
                      "expression": "src.ip in {192.0.2.0 192.0.2.1}",
                      "status": "enabled"
                    },
                    {
                      "action": "bypass_waiting_room",
                      "description": "bypass query string",
                      "expression": "http.request.uri.query contains \"bypass=true\"",
                      "status": "enabled"
                    }
                  ],
                  "waiting_room_id": "d41d8cd98f00b204e9800998ecf8427e",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
        argumentDocs:
            action: '(String) Action to perform in the ruleset rule. Available values: bypass_waiting_room.'
            description: (String) Brief summary of the waiting room rule and its intended use.
            expression: (String) Criteria for an HTTP request to trigger the waiting room rule action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the Waiting Room Rules Docs.
            id: (String) The ID of this resource.
            rules: (Block List) List of rules to apply to the ruleset. (see below for nested schema)
            status: '(String) Whether the rule is enabled or disabled. Available values: enabled, disabled.'
            version: (String) Version of the waiting room rule.
            waiting_room_id: (String) The Waiting Room ID the rules should apply to. Modifying this attribute will force creation of a new resource.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_waiting_room_event.default <zone_id>/<waiting_room_id>
    cloudflare_web3_hostname Resource - Cloudflare:
        subCategory: ""
        description: Manages Web3 hostnames for IPFS and Ethereum gateways.
        name: cloudflare_web3_hostname Resource - Cloudflare
        title: cloudflare_web3_hostname Resource - Cloudflare
        argumentDocs:
            created_on: (String) Creation time.
            description: (String) An optional description of the hostname.
            dnslink: (String) DNSLink value used if the target is ipfs.
            id: (String) The ID of this resource.
            modified_on: (String) Last modification time.
            name: (String) The hostname that will point to the target gateway via CNAME.
            status: (String) Status of the hostname's activation.
            target: (String) Target gateway of the hostname.
            zone_id: (String) The zone identifier to target for the resource.
        importStatements: []
    cloudflare_worker_cron_trigger:
        subCategory: ""
        description: Worker Cron Triggers allow users to map a cron expression to a Worker script using a ScheduledEvent listener that enables Workers to be executed on a schedule. Worker Cron Triggers are ideal for running periodic jobs for maintenance or calling third-party APIs to collect up-to-date data.
        name: cloudflare_worker_cron_trigger
        title: cloudflare_worker_cron_trigger Resource - Cloudflare
        examples:
            - name: example_trigger
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "schedules": [
                    "*/5 * * * *",
                    "10 7 * * mon-fri"
                  ],
                  "script_name": "${cloudflare_worker_script.example_script.name}"
                }
              references:
                script_name: cloudflare_worker_script.example_script.name
              dependencies:
                cloudflare_worker_script.example_script: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "content": "${file(\"path/to/my.js\")}",
                      "name": "example-script"
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            id: (String) The ID of this resource.
            schedules: (Set of String) Cron expressions to execute the Worker script.
            script_name: (String) Worker script to target for the schedules.
        importStatements:
            - $ terraform import cloudflare_worker_cron_trigger.example <account_id>/<script_name>
    cloudflare_worker_route:
        subCategory: ""
        description: Provides a Cloudflare worker route resource. A route will also require a cloudflare_worker_script.
        name: cloudflare_worker_route
        title: cloudflare_worker_route Resource - Cloudflare
        examples:
            - name: my_route
              manifest: |-
                {
                  "pattern": "example.com/*",
                  "script_name": "${cloudflare_worker_script.my_script.name}",
                  "zone_id": "0da42c8d2132a9ddaf714f9e7c920711"
                }
              references:
                script_name: cloudflare_worker_script.my_script.name
              dependencies:
                cloudflare_worker_script.my_script: '{}'
        argumentDocs:
            id: (String) The ID of this resource.
            pattern: (String) The route pattern to associate the Worker with.
            script_name: (String) Worker script name to invoke for requests that match the route pattern.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_worker_route.example <zone_id>/<route_id>
    cloudflare_worker_script:
        subCategory: ""
        description: Provides a Cloudflare worker script resource. In order for a script to be active, you'll also need to setup a cloudflare_worker_route.
        name: cloudflare_worker_script
        title: cloudflare_worker_script Resource - Cloudflare
        examples:
            - name: my_script
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "analytics_engine_binding": [
                    {
                      "dataset": "dataset1",
                      "name": "MY_DATASET"
                    }
                  ],
                  "content": "${file(\"script.js\")}",
                  "kv_namespace_binding": [
                    {
                      "name": "MY_EXAMPLE_KV_NAMESPACE",
                      "namespace_id": "${cloudflare_workers_kv_namespace.my_namespace.id}"
                    }
                  ],
                  "name": "script_1",
                  "plain_text_binding": [
                    {
                      "name": "MY_EXAMPLE_PLAIN_TEXT",
                      "text": "foobar"
                    }
                  ],
                  "r2_bucket_binding": [
                    {
                      "bucket_name": "MY_BUCKET_NAME",
                      "name": "MY_BUCKET"
                    }
                  ],
                  "secret_text_binding": [
                    {
                      "name": "MY_EXAMPLE_SECRET_TEXT",
                      "text": "${var.secret_foo_value}"
                    }
                  ],
                  "service_binding": [
                    {
                      "environment": "production",
                      "name": "MY_SERVICE_BINDING",
                      "service": "MY_SERVICE"
                    }
                  ],
                  "webassembly_binding": [
                    {
                      "module": "${filebase64(\"example.wasm\")}",
                      "name": "MY_EXAMPLE_WASM"
                    }
                  ]
                }
              references:
                kv_namespace_binding.namespace_id: cloudflare_workers_kv_namespace.my_namespace.id
                secret_text_binding.text: var.secret_foo_value
              dependencies:
                cloudflare_workers_kv_namespace.my_namespace: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "title": "example"
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            analytics_engine_binding: (Block Set) (see below for nested schema)
            bucket_name: (String) The name of the Bucket to bind to.
            content: (String) The script content.
            dataset: (String) The name of the Analytics Engine dataset to write to.
            environment: (String) The name of the Worker environment to bind to.
            id: (String) The ID of this resource.
            kv_namespace_binding: (Block Set) (see below for nested schema)
            module: (Boolean) Whether to upload Worker as a module.
            name: (String) The name for the script. Modifying this attribute will force creation of a new resource.
            namespace_id: (String) ID of the KV namespace you want to use.
            plain_text_binding: (Block Set) (see below for nested schema)
            r2_bucket_binding: (Block Set) (see below for nested schema)
            secret_text_binding: (Block Set) (see below for nested schema)
            service: (String) The name of the Worker to bind to.
            service_binding: (Block Set) (see below for nested schema)
            text: (String) The plain text you want to store.
            webassembly_binding: (Block Set) (see below for nested schema)
        importStatements:
            - $ terraform import cloudflare_worker_script.example <account_id>/<script_name>
    cloudflare_workers_kv:
        subCategory: ""
        description: Provides a resource to manage a Cloudflare Workers KV Pair.
        name: cloudflare_workers_kv
        title: cloudflare_workers_kv Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "key": "test-key",
                  "namespace_id": "${cloudflare_workers_kv_namespace.example_ns.id}",
                  "value": "test value"
                }
              references:
                namespace_id: cloudflare_workers_kv_namespace.example_ns.id
              dependencies:
                cloudflare_workers_kv_namespace.example_ns: |-
                    {
                      "account_id": "f037e56e89293a057740de681ac9abbe",
                      "title": "test-namespace"
                    }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            id: (String) The ID of this resource.
            key: (String) Name of the KV pair. Modifying this attribute will force creation of a new resource.
            namespace_id: (String) The ID of the Workers KV namespace in which you want to create the KV pair. Modifying this attribute will force creation of a new resource.
            value: (String) Value of the KV pair.
        importStatements:
            - $ terraform import cloudflare_workers_kv.example <account_id>/<namespace_id>/<key_name>
    cloudflare_workers_kv_namespace:
        subCategory: ""
        description: Provides the ability to manage Cloudflare Workers KV Namespace features.
        name: cloudflare_workers_kv_namespace
        title: cloudflare_workers_kv_namespace Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "title": "test-namespace"
                }
        argumentDocs:
            account_id: (String) The account identifier to target for the resource.
            id: (String) The ID of this resource.
            title: (String) Title value of the Worker KV Namespace.
        importStatements:
            - $ terraform import cloudflare_workers_kv_namespace.example <account_id>/<namespace_id>
    cloudflare_zone:
        subCategory: ""
        description: Provides a Cloudflare Zone resource. Zone is the basic resource for working with Cloudflare and is roughly equivalent to a domain name that the user purchases.
        name: cloudflare_zone
        title: cloudflare_zone Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "account_id": "f037e56e89293a057740de681ac9abbe",
                  "zone": "example.com"
                }
        argumentDocs:
            account_id: (String) Account ID to manage the zone resource in.
            id: (String) The ID of this resource.
            jump_start: (Boolean) Whether to scan for DNS records on creation. Ignored after zone is created.
            meta: (Map of Boolean)
            name_servers: (List of String) Cloudflare-assigned name servers. This is only populated for zones that use Cloudflare DNS.
            paused: (Boolean) Whether this zone is paused (traffic bypasses Cloudflare). Defaults to false.
            plan: '(String) The name of the commercial plan to apply to the zone. Available values: free, lite, pro, pro_plus, business, enterprise, partners_free, partners_pro, partners_business, partners_enterprise.'
            status: '(String) Status of the zone. Available values: active, pending, initializing, moved, deleted, deactivated.'
            type: '(String) A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup. Available values: full, partial. Defaults to full.'
            vanity_name_servers: (List of String) List of Vanity Nameservers (if set).
            verification_key: (String) Contains the TXT record value to validate domain ownership. This is only populated for zones of type partial.
            zone: (String) The DNS zone name which will be added. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_zone.example <zone_id>
    cloudflare_zone_cache_variants:
        subCategory: ""
        description: Provides a resource which customizes Cloudflare zone cache variants setting.
        name: cloudflare_zone_cache_variants
        title: cloudflare_zone_cache_variants
        examples:
            - name: example
              manifest: |-
                {
                  "avif": [
                    "image/avif",
                    "image/webp"
                  ],
                  "bmp": [
                    "image/bmp",
                    "image/webp"
                  ],
                  "gif": [
                    "image/gif",
                    "image/webp"
                  ],
                  "jp2": [
                    "image/jp2",
                    "image/webp"
                  ],
                  "jpeg": [
                    "image/jpeg",
                    "image/webp"
                  ],
                  "jpg": [
                    "image/jpg",
                    "image/webp"
                  ],
                  "jpg2": [
                    "image/jpg2",
                    "image/webp"
                  ],
                  "png": [
                    "image/png",
                    "image/webp"
                  ],
                  "tif": [
                    "image/tif",
                    "image/webp"
                  ],
                  "tiff": [
                    "image/tiff",
                    "image/webp"
                  ],
                  "webp": [
                    "image/jpeg",
                    "image/webp"
                  ],
                  "zone_id": "7df50664b7f90274f4d77cdfee701380"
                }
        argumentDocs:
            avif: '- (Optional) List of strings with the MIME types of all the variants that should be served for avif'
            bmp: '- (Optional) List of strings with the MIME types of all the variants that should be served for bmp'
            gif: '- (Optional) List of strings with the MIME types of all the variants that should be served for gif'
            jp2: '- (Optional) List of strings with the MIME types of all the variants that should be served for jp2'
            jpeg: '- (Optional) List of strings with the MIME types of all the variants that should be served for jpeg'
            jpg: '- (Optional) List of strings with the MIME types of all the variants that should be served for jpg'
            jpg2: '- (Optional) List of strings with the MIME types of all the variants that should be served for jpg2'
            png: '- (Optional) List of strings with the MIME types of all the variants that should be served for png'
            tif: '- (Optional) List of strings with the MIME types of all the variants that should be served for tif'
            tiff: '- (Optional) List of strings with the MIME types of all the variants that should be served for tiff'
            webp: '- (Optional) List of strings with the MIME types of all the variants that should be served for webp'
            zone_id: '- (Required) The ID of the DNS zone in which to apply the cache variants setting'
        importStatements: []
    cloudflare_zone_dnssec:
        subCategory: ""
        description: Provides a Cloudflare resource to create and modify zone DNSSEC settings.
        name: cloudflare_zone_dnssec
        title: cloudflare_zone_dnssec Resource - Cloudflare
        examples:
            - name: example
              manifest: |-
                {
                  "zone_id": "${cloudflare_zone.example.id}"
                }
              references:
                zone_id: cloudflare_zone.example.id
              dependencies:
                cloudflare_zone.example: |-
                    {
                      "zone": "example.com"
                    }
        argumentDocs:
            algorithm: (String) Zone DNSSEC algorithm.
            digest: (String) Zone DNSSEC digest.
            digest_algorithm: (String) Digest algorithm use for Zone DNSSEC.
            digest_type: (String) Digest Type for Zone DNSSEC.
            ds: (String) DS for the Zone DNSSEC.
            flags: (Number) Zone DNSSEC flags.
            id: (String) The ID of this resource.
            key_tag: (Number) Key Tag for the Zone DNSSEC.
            key_type: (String) Key type used for Zone DNSSEC.
            modified_on: (String) Zone DNSSEC updated time.
            public_key: (String) Public Key for the Zone DNSSEC.
            status: (String) The status of the Zone DNSSEC.
            zone_id: (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
        importStatements:
            - $ terraform import cloudflare_zone_dnssec.example <zone_id>
    cloudflare_zone_lockdown:
        subCategory: ""
        description: Provides a Cloudflare resource to lock down access to URLs by IP address or IP ranges.
        name: cloudflare_zone_lockdown
        title: cloudflare_zone_lockdown
        examples:
            - name: endpoint_lockdown
              manifest: |-
                {
                  "configurations": [
                    {
                      "target": "ip_range",
                      "value": "198.51.100.0/16"
                    }
                  ],
                  "description": "Restrict access to these endpoints to requests from a known IP address range",
                  "paused": "false",
                  "urls": [
                    "api.mysite.com/some/endpoint*"
                  ],
                  "zone_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
            - name: endpoint_lockdown
              manifest: |-
                {
                  "configurations": [
                    {
                      "target": "ip",
                      "value": "198.51.100.4"
                    },
                    {
                      "target": "ip",
                      "value": "198.51.100.5"
                    }
                  ],
                  "description": "Restrict access to these endpoints to requests from two known IP addresses",
                  "paused": "false",
                  "urls": [
                    "api.mysite.com/some/endpoint*"
                  ],
                  "zone_id": "d41d8cd98f00b204e9800998ecf8427e"
                }
        argumentDocs:
            37cb64fe4a90adb5ca3afc04f2c82a2f: '- zone lockdown ID as returned by API'
            configurations: '- (Required) A list of IP addresses or IP ranges to match the request against specified in target, value pairs. It''s a complex value. See description below. The order of the configuration entries is unimportant.'
            d41d8cd98f00b204e9800998ecf8427e: '- zone ID'
            description: '- (Optional) A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.'
            id: '- The access rule ID.'
            paused: '- (Optional) Boolean of whether this zone lockdown is currently paused. Default: false.'
            target: '- (Required) The request property to target. Allowed values: "ip", "ip_range"'
            urls: '- (Required) A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.'
            value: '- (Required) The value to target. Depends on target''s type. IP addresses should just be standard IPv4/IPv6 notation i.e. 198.51.100.4 or 2001:db8::/32 and IP ranges in CIDR format i.e. 198.51.0.0/16.'
            zone_id: '- (Required) The DNS zone ID to which the access rule should be added.'
        importStatements: []
    cloudflare_zone_settings_override:
        subCategory: ""
        description: Provides a resource which customizes Cloudflare zone settings.
        name: cloudflare_zone_settings_override
        title: cloudflare_zone_settings_override
        examples:
            - name: test
              manifest: |-
                {
                  "settings": [
                    {
                      "automatic_https_rewrites": "on",
                      "brotli": "on",
                      "challenge_ttl": 2700,
                      "minify": [
                        {
                          "css": "on",
                          "html": "off",
                          "js": "off"
                        }
                      ],
                      "mirage": "on",
                      "opportunistic_encryption": "on",
                      "security_header": [
                        {
                          "enabled": true
                        }
                      ],
                      "security_level": "high",
                      "waf": "on"
                    }
                  ],
                  "zone_id": "${var.cloudflare_zone_id}"
                }
              references:
                zone_id: var.cloudflare_zone_id
        argumentDocs:
            always_online: '(default: on)'
            always_use_https: '(default: off)'
            automatic_https_rewrites: (default value depends on the zone's plan level)
            binary_ast: '(default: off)'
            brotli: '(default: off)'
            browser_cache_ttl: '(default: 14400)'
            browser_check: '(default: on)'
            cache_level: '- Allowed values: "aggressive" (default) - delivers a different resource each time the query string changes, "basic" - delivers resources from cache when there is no query string, "simplified" - delivers the same resource to everyone independent of the query string.'
            challenge_ttl: '(default: 1800)'
            ciphers: '- An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.'
            cname_flattening: '- Allowed values: "flatten_at_root" (default), "flatten_all", "flatten_none".'
            css: (Required) "on"/"off"
            development_mode: '(default: off)'
            early_hints: '(default: off)'
            email_obfuscation: '(default: on)'
            enabled: (Optional) true/false
            filter_logs_to_cloudflare: '(default: off)'
            h2_prioritization: '- Allowed values: "on", "off" (default), "custom".'
            hotlink_protection: '(default: off)'
            html: (Required) "on"/"off"
            http2: '(default: off)'
            http3: '(default: off)'
            id: '- The zone ID.'
            image_resizing: '- Allowed values: "on", "off" (default), "open".'
            include_subdomains: (Optional) true/false
            initial_settings: '- Settings present in the zone at the time the resource is created. This will be used to restore the original settings when this resource is destroyed. Shares the same schema as the settings attribute (Above).'
            initial_settings_read_at: '- Time when this resource was created and the initial_settings were set.'
            ip_geolocation: '(default: on)'
            ipv6: '(default: off)'
            js: (Required)"on"/"off"
            log_to_cloudflare: '(default: off)'
            max_age: (Optional) Integer
            max_upload: '(default: 100)'
            min_tls_version: '- Allowed values: "1.0" (default), "1.1", "1.2", "1.3".'
            mirage: '(default: off)'
            mobile_subdomain: (Required) String value
            nosniff: (Optional) true/false
            opportunistic_encryption: (default value depends on the zone's plan level)
            opportunistic_onion: '(default: off)'
            orange_to_orange: '(default: off)'
            origin_error_page_pass_thru: '(default: off)'
            origin_max_http_version: '- Allowed values: "1" (default on Enterprise), "2" (default)'
            polish: '- Allowed values: "off" (default), "lossless", "lossy".'
            prefetch_preload: '(default: off)'
            preload: (Optional) true/false
            privacy_pass: '(default: on)'
            proxy_read_timeout: '(default: "100")'
            pseudo_ipv4: '- Allowed values: "off" (default), "add_header", "overwrite_header".'
            readonly_settings: '- Which of the current settings are not able to be set by the user. Which settings these are is determined by plan level and user permissions.'
            response_buffering: '(default: off)'
            rocket_loader: '(default: off)'
            security_level: '- Allowed values: "off" (Enterprise only), "essentially_off", "low", "medium" (default), "high", "under_attack".'
            server_side_exclude: '(default: on)'
            settings: '- (Optional) Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.'
            sort_query_string_for_cache: '(default: off)'
            ssl: '- Allowed values: "off" (default), "flexible", "full", "strict", "origin_pull".'
            status: (Required) "on"/"off"
            strip_uri: (Required) true/false
            tls_1_3: '- Allowed values: "off" (default), "on", "zrt".'
            tls_client_auth: '(default: on)'
            true_client_ip_header: '(default: off)'
            universal_ssl: '(default: on)'
            visitor_ip: '(default: off)'
            waf: '(default: off)'
            webp: '(default: off). Note that the value specified will be ignored unless polish is turned on (i.e. is "lossless" or "lossy")'
            websockets: '(default: off)'
            zero_rtt: '(default: off)'
            zone_id: '- (Required) The DNS zone ID to which apply settings.'
            zone_status: . A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup.
            zone_type: '. Status of the zone. Valid values: active, pending, initializing, moved, deleted, deactivated.'
        importStatements: []
