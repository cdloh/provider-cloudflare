/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APITokenObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Timestamp of when the token was issued.
	IssuedOn *string `json:"issuedOn,omitempty" tf:"issued_on,omitempty"`

	// Timestamp of when the token was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type APITokenParameters struct {

	// Conditions under which the token should be considered valid.
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// The expiration time on or after which the token MUST NOT be accepted for processing.
	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// Name of the API Token.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The time before which the token MUST NOT be accepted for processing.
	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// Permissions policy. Multiple policy blocks can be defined.
	// +kubebuilder:validation:Required
	Policy []PolicyParameters `json:"policy" tf:"policy,omitempty"`
}

type ConditionObservation struct {
}

type ConditionParameters struct {

	// Request IP related conditions.
	// +kubebuilder:validation:Optional
	RequestIP []RequestIPParameters `json:"requestIp,omitempty" tf:"request_ip,omitempty"`
}

type PolicyObservation struct {
}

type PolicyParameters struct {

	// Effect of the policy. Available values: `allow`, `deny`. Defaults to `allow`.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// List of permissions groups IDs. See [documentation](https://developers.cloudflare.com/api/tokens/create/permissions) for more information.
	// +kubebuilder:validation:Required
	PermissionGroups []*string `json:"permissionGroups" tf:"permission_groups,omitempty"`

	// Describes what operations against which resources are allowed or denied.
	// +kubebuilder:validation:Required
	Resources map[string]*string `json:"resources" tf:"resources,omitempty"`
}

type RequestIPObservation struct {
}

type RequestIPParameters struct {

	// List of IP addresses or CIDR notation where the token may be used from. If not specified, the token will be valid for all IP addresses.
	// +kubebuilder:validation:Optional
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// List of IP addresses or CIDR notation where the token should not be used from.
	// +kubebuilder:validation:Optional
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

// APITokenSpec defines the desired state of APIToken
type APITokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APITokenParameters `json:"forProvider"`
}

// APITokenStatus defines the observed state of APIToken.
type APITokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APITokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// APIToken is the Schema for the APITokens API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type APIToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APITokenSpec   `json:"spec"`
	Status            APITokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APITokenList contains a list of APITokens
type APITokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APIToken `json:"items"`
}

// Repository type metadata.
var (
	APIToken_Kind             = "APIToken"
	APIToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APIToken_Kind}.String()
	APIToken_KindAPIVersion   = APIToken_Kind + "." + CRDGroupVersion.String()
	APIToken_GroupVersionKind = CRDGroupVersion.WithKind(APIToken_Kind)
)

func init() {
	SchemeBuilder.Register(&APIToken{}, &APITokenList{})
}
