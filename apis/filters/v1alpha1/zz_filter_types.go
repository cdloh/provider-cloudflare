/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FilterParameters struct {

	// A note that you can use to describe the purpose of the filter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The filter expression to be used.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Whether this filter is currently paused.
	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// Short reference tag to quickly select related rules.
	// +kubebuilder:validation:Optional
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// FilterSpec defines the desired state of Filter
type FilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FilterParameters `json:"forProvider"`
}

// FilterStatus defines the observed state of Filter.
type FilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Filter is the Schema for the Filters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Filter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FilterSpec   `json:"spec"`
	Status            FilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FilterList contains a list of Filters
type FilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Filter `json:"items"`
}

// Repository type metadata.
var (
	Filter_Kind             = "Filter"
	Filter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Filter_Kind}.String()
	Filter_KindAPIVersion   = Filter_Kind + "." + CRDGroupVersion.String()
	Filter_GroupVersionKind = CRDGroupVersion.WithKind(Filter_Kind)
)

func init() {
	SchemeBuilder.Register(&Filter{}, &FilterList{})
}
