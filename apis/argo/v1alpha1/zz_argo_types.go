/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArgoObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ArgoParameters struct {

	// Whether smart routing is enabled. Available values: `on`, `off`.
	// +kubebuilder:validation:Optional
	SmartRouting *string `json:"smartRouting,omitempty" tf:"smart_routing,omitempty"`

	// Whether tiered caching is enabled. Available values: `on`, `off`.
	// +kubebuilder:validation:Optional
	TieredCaching *string `json:"tieredCaching,omitempty" tf:"tiered_caching,omitempty"`

	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// ArgoSpec defines the desired state of Argo
type ArgoSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ArgoParameters `json:"forProvider"`
}

// ArgoStatus defines the observed state of Argo.
type ArgoStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ArgoObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Argo is the Schema for the Argos API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Argo struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ArgoSpec   `json:"spec"`
	Status            ArgoStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ArgoList contains a list of Argos
type ArgoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Argo `json:"items"`
}

// Repository type metadata.
var (
	Argo_Kind             = "Argo"
	Argo_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Argo_Kind}.String()
	Argo_KindAPIVersion   = Argo_Kind + "." + CRDGroupVersion.String()
	Argo_GroupVersionKind = CRDGroupVersion.WithKind(Argo_Kind)
)

func init() {
	SchemeBuilder.Register(&Argo{}, &ArgoList{})
}
