/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TunnelRouteObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TunnelRouteParameters struct {

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// Description of the tunnel route.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The IPv4 or IPv6 network that should use this tunnel route, in CIDR notation.
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// The ID of the tunnel that will service the tunnel route.
	// +crossplane:generate:reference:type=Tunnel
	// +kubebuilder:validation:Optional
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`

	// Reference to a Tunnel to populate tunnelId.
	// +kubebuilder:validation:Optional
	TunnelIDRef *v1.Reference `json:"tunnelIdRef,omitempty" tf:"-"`

	// Selector for a Tunnel to populate tunnelId.
	// +kubebuilder:validation:Optional
	TunnelIDSelector *v1.Selector `json:"tunnelIdSelector,omitempty" tf:"-"`

	// The ID of the virtual network for which this route is being added; uses the default virtual network of the account if none is provided. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=TunnelVirtualNetwork
	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`

	// Reference to a TunnelVirtualNetwork to populate virtualNetworkId.
	// +kubebuilder:validation:Optional
	VirtualNetworkIDRef *v1.Reference `json:"virtualNetworkIdRef,omitempty" tf:"-"`

	// Selector for a TunnelVirtualNetwork to populate virtualNetworkId.
	// +kubebuilder:validation:Optional
	VirtualNetworkIDSelector *v1.Selector `json:"virtualNetworkIdSelector,omitempty" tf:"-"`
}

// TunnelRouteSpec defines the desired state of TunnelRoute
type TunnelRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TunnelRouteParameters `json:"forProvider"`
}

// TunnelRouteStatus defines the observed state of TunnelRoute.
type TunnelRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TunnelRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TunnelRoute is the Schema for the TunnelRoutes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type TunnelRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TunnelRouteSpec   `json:"spec"`
	Status            TunnelRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TunnelRouteList contains a list of TunnelRoutes
type TunnelRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TunnelRoute `json:"items"`
}

// Repository type metadata.
var (
	TunnelRoute_Kind             = "TunnelRoute"
	TunnelRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TunnelRoute_Kind}.String()
	TunnelRoute_KindAPIVersion   = TunnelRoute_Kind + "." + CRDGroupVersion.String()
	TunnelRoute_GroupVersionKind = CRDGroupVersion.WithKind(TunnelRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&TunnelRoute{}, &TunnelRouteList{})
}
