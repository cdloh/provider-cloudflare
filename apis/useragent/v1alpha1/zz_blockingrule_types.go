/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockingRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BlockingRuleParameters struct {

	// The configuration object for the current rule.
	// +kubebuilder:validation:Required
	Configuration []ConfigurationParameters `json:"configuration" tf:"configuration,omitempty"`

	// An informative summary of the rule.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The action to apply to a matched request. Available values: `block`, `challenge`, `js_challenge`, `managed_challenge`.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// When true, indicates that the rule is currently paused.
	// +kubebuilder:validation:Required
	Paused *bool `json:"paused" tf:"paused,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {

	// The configuration target for this rule. You must set the target to ua for User Agent Blocking rules.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// The exact user agent string to match. This value will be compared to the received User-Agent HTTP header value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// BlockingRuleSpec defines the desired state of BlockingRule
type BlockingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlockingRuleParameters `json:"forProvider"`
}

// BlockingRuleStatus defines the observed state of BlockingRule.
type BlockingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlockingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BlockingRule is the Schema for the BlockingRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type BlockingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlockingRuleSpec   `json:"spec"`
	Status            BlockingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlockingRuleList contains a list of BlockingRules
type BlockingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BlockingRule `json:"items"`
}

// Repository type metadata.
var (
	BlockingRule_Kind             = "BlockingRule"
	BlockingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BlockingRule_Kind}.String()
	BlockingRule_KindAPIVersion   = BlockingRule_Kind + "." + CRDGroupVersion.String()
	BlockingRule_GroupVersionKind = CRDGroupVersion.WithKind(BlockingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&BlockingRule{}, &BlockingRuleList{})
}
