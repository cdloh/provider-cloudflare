/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// A network address of the form "host:port" that the WARP client will use to detect the presence of a TLS host.
	TLSSockaddr *string `json:"tlsSockaddr,omitempty" tf:"tls_sockaddr,omitempty"`
}

type ConfigObservation struct {

	// The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// A network address of the form "host:port" that the WARP client will use to detect the presence of a TLS host.
	TLSSockaddr *string `json:"tlsSockaddr,omitempty" tf:"tls_sockaddr,omitempty"`
}

type ConfigParameters struct {

	// The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
	// +kubebuilder:validation:Optional
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// A network address of the form "host:port" that the WARP client will use to detect the presence of a TLS host.
	// +kubebuilder:validation:Optional
	TLSSockaddr *string `json:"tlsSockaddr,omitempty" tf:"tls_sockaddr,omitempty"`
}

type ManagedNetworkInitParameters struct {

	// The configuration containing information for the WARP client to detect the managed network.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the Device Managed Network. Must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of Device Managed Network. Available values: `tls`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ManagedNetworkObservation struct {

	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The configuration containing information for the WARP client to detect the managed network.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Device Managed Network. Must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of Device Managed Network. Available values: `tls`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ManagedNetworkParameters struct {

	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// The configuration containing information for the WARP client to detect the managed network.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the Device Managed Network. Must be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of Device Managed Network. Available values: `tls`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ManagedNetworkSpec defines the desired state of ManagedNetwork
type ManagedNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedNetworkParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedNetworkInitParameters `json:"initProvider,omitempty"`
}

// ManagedNetworkStatus defines the observed state of ManagedNetwork.
type ManagedNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedNetwork is the Schema for the ManagedNetworks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type ManagedNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || has(self.initProvider.config)",message="config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   ManagedNetworkSpec   `json:"spec"`
	Status ManagedNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedNetworkList contains a list of ManagedNetworks
type ManagedNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedNetwork `json:"items"`
}

// Repository type metadata.
var (
	ManagedNetwork_Kind             = "ManagedNetwork"
	ManagedNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedNetwork_Kind}.String()
	ManagedNetwork_KindAPIVersion   = ManagedNetwork_Kind + "." + CRDGroupVersion.String()
	ManagedNetwork_GroupVersionKind = CRDGroupVersion.WithKind(ManagedNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedNetwork{}, &ManagedNetworkList{})
}
