/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataInitParameters struct {

	// The host URL for `http` test `kind`. For `traceroute`, it must be a valid hostname or IP address.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The type of Device Dex Test. Available values: `http`, `traceroute`.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The http request method. Available values: `GET`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type DataObservation struct {

	// The host URL for `http` test `kind`. For `traceroute`, it must be a valid hostname or IP address.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The type of Device Dex Test. Available values: `http`, `traceroute`.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The http request method. Available values: `GET`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type DataParameters struct {

	// The host URL for `http` test `kind`. For `traceroute`, it must be a valid hostname or IP address.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The type of Device Dex Test. Available values: `http`, `traceroute`.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// The http request method. Available values: `GET`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type DexTextInitParameters struct {

	// The configuration object which contains the details for the WARP client to conduct the test.
	Data []DataInitParameters `json:"data,omitempty" tf:"data,omitempty"`

	// Additional details about the test.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Determines whether or not the test is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How often the test will run.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The name of the Device Dex Test. Must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DexTextObservation struct {

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Timestamp of when the Dex Test was created.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// The configuration object which contains the details for the WARP client to conduct the test.
	Data []DataObservation `json:"data,omitempty" tf:"data,omitempty"`

	// Additional details about the test.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Determines whether or not the test is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// How often the test will run.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The name of the Device Dex Test. Must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Timestamp of when the Dex Test was last updated.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type DexTextParameters struct {

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// The configuration object which contains the details for the WARP client to conduct the test.
	// +kubebuilder:validation:Optional
	Data []DataParameters `json:"data,omitempty" tf:"data,omitempty"`

	// Additional details about the test.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Determines whether or not the test is active.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How often the test will run.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// The name of the Device Dex Test. Must be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// DexTextSpec defines the desired state of DexText
type DexTextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DexTextParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DexTextInitParameters `json:"initProvider,omitempty"`
}

// DexTextStatus defines the observed state of DexText.
type DexTextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DexTextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DexText is the Schema for the DexTexts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type DexText struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.data) || has(self.initProvider.data)",message="data is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || has(self.initProvider.description)",message="description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || has(self.initProvider.enabled)",message="enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interval) || has(self.initProvider.interval)",message="interval is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   DexTextSpec   `json:"spec"`
	Status DexTextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DexTextList contains a list of DexTexts
type DexTextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DexText `json:"items"`
}

// Repository type metadata.
var (
	DexText_Kind             = "DexText"
	DexText_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DexText_Kind}.String()
	DexText_KindAPIVersion   = DexText_Kind + "." + CRDGroupVersion.String()
	DexText_GroupVersionKind = CRDGroupVersion.WithKind(DexText_Kind)
)

func init() {
	SchemeBuilder.Register(&DexText{}, &DexTextList{})
}
