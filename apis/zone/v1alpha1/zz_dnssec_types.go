/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSSECInitParameters struct {

	// Zone DNSSEC updated time.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`
}

type DNSSECObservation struct {

	// Zone DNSSEC algorithm.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Zone DNSSEC digest.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// Digest algorithm use for Zone DNSSEC.
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty" tf:"digest_algorithm,omitempty"`

	// Digest Type for Zone DNSSEC.
	DigestType *string `json:"digestType,omitempty" tf:"digest_type,omitempty"`

	// DS for the Zone DNSSEC.
	Ds *string `json:"ds,omitempty" tf:"ds,omitempty"`

	// Zone DNSSEC flags.
	Flags *float64 `json:"flags,omitempty" tf:"flags,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key Tag for the Zone DNSSEC.
	KeyTag *float64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	// Key type used for Zone DNSSEC.
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// Zone DNSSEC updated time.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// Public Key for the Zone DNSSEC.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// The status of the Zone DNSSEC.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DNSSECParameters struct {

	// Zone DNSSEC updated time.
	// +kubebuilder:validation:Optional
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// DNSSECSpec defines the desired state of DNSSEC
type DNSSECSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSSECParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DNSSECInitParameters `json:"initProvider,omitempty"`
}

// DNSSECStatus defines the observed state of DNSSEC.
type DNSSECStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSSECObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSEC is the Schema for the DNSSECs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type DNSSEC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSSECSpec   `json:"spec"`
	Status            DNSSECStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECList contains a list of DNSSECs
type DNSSECList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSSEC `json:"items"`
}

// Repository type metadata.
var (
	DNSSEC_Kind             = "DNSSEC"
	DNSSEC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSSEC_Kind}.String()
	DNSSEC_KindAPIVersion   = DNSSEC_Kind + "." + CRDGroupVersion.String()
	DNSSEC_GroupVersionKind = CRDGroupVersion.WithKind(DNSSEC_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSSEC{}, &DNSSECList{})
}
