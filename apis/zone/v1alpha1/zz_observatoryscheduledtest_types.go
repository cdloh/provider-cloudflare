/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObservatoryScheduledTestInitParameters struct {

	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ObservatoryScheduledTestObservation struct {

	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ObservatoryScheduledTestParameters struct {

	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// ObservatoryScheduledTestSpec defines the desired state of ObservatoryScheduledTest
type ObservatoryScheduledTestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObservatoryScheduledTestParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ObservatoryScheduledTestInitParameters `json:"initProvider,omitempty"`
}

// ObservatoryScheduledTestStatus defines the observed state of ObservatoryScheduledTest.
type ObservatoryScheduledTestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObservatoryScheduledTestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ObservatoryScheduledTest is the Schema for the ObservatoryScheduledTests API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type ObservatoryScheduledTest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || has(self.initProvider.frequency)",message="frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || has(self.initProvider.region)",message="region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || has(self.initProvider.url)",message="url is a required parameter"
	Spec   ObservatoryScheduledTestSpec   `json:"spec"`
	Status ObservatoryScheduledTestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObservatoryScheduledTestList contains a list of ObservatoryScheduledTests
type ObservatoryScheduledTestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObservatoryScheduledTest `json:"items"`
}

// Repository type metadata.
var (
	ObservatoryScheduledTest_Kind             = "ObservatoryScheduledTest"
	ObservatoryScheduledTest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObservatoryScheduledTest_Kind}.String()
	ObservatoryScheduledTest_KindAPIVersion   = ObservatoryScheduledTest_Kind + "." + CRDGroupVersion.String()
	ObservatoryScheduledTest_GroupVersionKind = CRDGroupVersion.WithKind(ObservatoryScheduledTest_Kind)
)

func init() {
	SchemeBuilder.Register(&ObservatoryScheduledTest{}, &ObservatoryScheduledTestList{})
}
