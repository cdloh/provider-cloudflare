// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type URLNormalizationSettingsInitParameters struct {

	// (String) The scope of the URL normalization.
	// The scope of the URL normalization.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of URL normalization performed by Cloudflare.
	// The type of URL normalization performed by Cloudflare.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type URLNormalizationSettingsObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The scope of the URL normalization.
	// The scope of the URL normalization.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of URL normalization performed by Cloudflare.
	// The type of URL normalization performed by Cloudflare.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type URLNormalizationSettingsParameters struct {

	// (String) The scope of the URL normalization.
	// The scope of the URL normalization.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) The type of URL normalization performed by Cloudflare.
	// The type of URL normalization performed by Cloudflare.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The zone identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// URLNormalizationSettingsSpec defines the desired state of URLNormalizationSettings
type URLNormalizationSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     URLNormalizationSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider URLNormalizationSettingsInitParameters `json:"initProvider,omitempty"`
}

// URLNormalizationSettingsStatus defines the observed state of URLNormalizationSettings.
type URLNormalizationSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        URLNormalizationSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// URLNormalizationSettings is the Schema for the URLNormalizationSettingss API. Provides a resource to manage URL Normalization Settings.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type URLNormalizationSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   URLNormalizationSettingsSpec   `json:"spec"`
	Status URLNormalizationSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// URLNormalizationSettingsList contains a list of URLNormalizationSettingss
type URLNormalizationSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []URLNormalizationSettings `json:"items"`
}

// Repository type metadata.
var (
	URLNormalizationSettings_Kind             = "URLNormalizationSettings"
	URLNormalizationSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: URLNormalizationSettings_Kind}.String()
	URLNormalizationSettings_KindAPIVersion   = URLNormalizationSettings_Kind + "." + CRDGroupVersion.String()
	URLNormalizationSettings_GroupVersionKind = CRDGroupVersion.WithKind(URLNormalizationSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&URLNormalizationSettings{}, &URLNormalizationSettingsList{})
}
