/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneCacheVariantsInitParameters struct {

	// List of strings with the MIME types of all the variants that should be served for avif
	// List of strings with the MIME types of all the variants that should be served for avif.
	Avif []*string `json:"avif,omitempty" tf:"avif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for bmp
	// List of strings with the MIME types of all the variants that should be served for bmp.
	Bmp []*string `json:"bmp,omitempty" tf:"bmp,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for gif
	// List of strings with the MIME types of all the variants that should be served for gif.
	Gif []*string `json:"gif,omitempty" tf:"gif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jp2
	// List of strings with the MIME types of all the variants that should be served for jp2.
	Jp2 []*string `json:"jp2,omitempty" tf:"jp2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpeg
	// List of strings with the MIME types of all the variants that should be served for jpeg.
	Jpeg []*string `json:"jpeg,omitempty" tf:"jpeg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg
	// List of strings with the MIME types of all the variants that should be served for jpg.
	Jpg []*string `json:"jpg,omitempty" tf:"jpg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg2
	// List of strings with the MIME types of all the variants that should be served for jpg2.
	Jpg2 []*string `json:"jpg2,omitempty" tf:"jpg2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for png
	// List of strings with the MIME types of all the variants that should be served for png.
	Png []*string `json:"png,omitempty" tf:"png,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tif
	// List of strings with the MIME types of all the variants that should be served for tif.
	Tif []*string `json:"tif,omitempty" tf:"tif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tiff
	// List of strings with the MIME types of all the variants that should be served for tiff.
	Tiff []*string `json:"tiff,omitempty" tf:"tiff,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for webp
	// List of strings with the MIME types of all the variants that should be served for webp.
	Webp []*string `json:"webp,omitempty" tf:"webp,omitempty"`
}

type ZoneCacheVariantsObservation struct {

	// List of strings with the MIME types of all the variants that should be served for avif
	// List of strings with the MIME types of all the variants that should be served for avif.
	Avif []*string `json:"avif,omitempty" tf:"avif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for bmp
	// List of strings with the MIME types of all the variants that should be served for bmp.
	Bmp []*string `json:"bmp,omitempty" tf:"bmp,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for gif
	// List of strings with the MIME types of all the variants that should be served for gif.
	Gif []*string `json:"gif,omitempty" tf:"gif,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jp2
	// List of strings with the MIME types of all the variants that should be served for jp2.
	Jp2 []*string `json:"jp2,omitempty" tf:"jp2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpeg
	// List of strings with the MIME types of all the variants that should be served for jpeg.
	Jpeg []*string `json:"jpeg,omitempty" tf:"jpeg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg
	// List of strings with the MIME types of all the variants that should be served for jpg.
	Jpg []*string `json:"jpg,omitempty" tf:"jpg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg2
	// List of strings with the MIME types of all the variants that should be served for jpg2.
	Jpg2 []*string `json:"jpg2,omitempty" tf:"jpg2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for png
	// List of strings with the MIME types of all the variants that should be served for png.
	Png []*string `json:"png,omitempty" tf:"png,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tif
	// List of strings with the MIME types of all the variants that should be served for tif.
	Tif []*string `json:"tif,omitempty" tf:"tif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tiff
	// List of strings with the MIME types of all the variants that should be served for tiff.
	Tiff []*string `json:"tiff,omitempty" tf:"tiff,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for webp
	// List of strings with the MIME types of all the variants that should be served for webp.
	Webp []*string `json:"webp,omitempty" tf:"webp,omitempty"`

	// The ID of the DNS zone in which to apply the cache variants setting
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneCacheVariantsParameters struct {

	// List of strings with the MIME types of all the variants that should be served for avif
	// List of strings with the MIME types of all the variants that should be served for avif.
	// +kubebuilder:validation:Optional
	Avif []*string `json:"avif,omitempty" tf:"avif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for bmp
	// List of strings with the MIME types of all the variants that should be served for bmp.
	// +kubebuilder:validation:Optional
	Bmp []*string `json:"bmp,omitempty" tf:"bmp,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for gif
	// List of strings with the MIME types of all the variants that should be served for gif.
	// +kubebuilder:validation:Optional
	Gif []*string `json:"gif,omitempty" tf:"gif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jp2
	// List of strings with the MIME types of all the variants that should be served for jp2.
	// +kubebuilder:validation:Optional
	Jp2 []*string `json:"jp2,omitempty" tf:"jp2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpeg
	// List of strings with the MIME types of all the variants that should be served for jpeg.
	// +kubebuilder:validation:Optional
	Jpeg []*string `json:"jpeg,omitempty" tf:"jpeg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg
	// List of strings with the MIME types of all the variants that should be served for jpg.
	// +kubebuilder:validation:Optional
	Jpg []*string `json:"jpg,omitempty" tf:"jpg,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for jpg2
	// List of strings with the MIME types of all the variants that should be served for jpg2.
	// +kubebuilder:validation:Optional
	Jpg2 []*string `json:"jpg2,omitempty" tf:"jpg2,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for png
	// List of strings with the MIME types of all the variants that should be served for png.
	// +kubebuilder:validation:Optional
	Png []*string `json:"png,omitempty" tf:"png,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tif
	// List of strings with the MIME types of all the variants that should be served for tif.
	// +kubebuilder:validation:Optional
	Tif []*string `json:"tif,omitempty" tf:"tif,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for tiff
	// List of strings with the MIME types of all the variants that should be served for tiff.
	// +kubebuilder:validation:Optional
	Tiff []*string `json:"tiff,omitempty" tf:"tiff,omitempty"`

	// List of strings with the MIME types of all the variants that should be served for webp
	// List of strings with the MIME types of all the variants that should be served for webp.
	// +kubebuilder:validation:Optional
	Webp []*string `json:"webp,omitempty" tf:"webp,omitempty"`

	// The ID of the DNS zone in which to apply the cache variants setting
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// ZoneCacheVariantsSpec defines the desired state of ZoneCacheVariants
type ZoneCacheVariantsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneCacheVariantsParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneCacheVariantsInitParameters `json:"initProvider,omitempty"`
}

// ZoneCacheVariantsStatus defines the observed state of ZoneCacheVariants.
type ZoneCacheVariantsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneCacheVariantsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneCacheVariants is the Schema for the ZoneCacheVariantss API. Provides a resource which customizes Cloudflare zone cache variants setting.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type ZoneCacheVariants struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneCacheVariantsSpec   `json:"spec"`
	Status            ZoneCacheVariantsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneCacheVariantsList contains a list of ZoneCacheVariantss
type ZoneCacheVariantsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneCacheVariants `json:"items"`
}

// Repository type metadata.
var (
	ZoneCacheVariants_Kind             = "ZoneCacheVariants"
	ZoneCacheVariants_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneCacheVariants_Kind}.String()
	ZoneCacheVariants_KindAPIVersion   = ZoneCacheVariants_Kind + "." + CRDGroupVersion.String()
	ZoneCacheVariants_GroupVersionKind = CRDGroupVersion.WithKind(ZoneCacheVariants_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneCacheVariants{}, &ZoneCacheVariantsList{})
}
