/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationsInitParameters struct {

	// The request property to target. Allowed values: "ip", "ip_range"
	// The request property to target. Available values: `ip`, `ip_range`.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. 198.51.100.4 or 2001:db8::/32 and IP ranges in CIDR format i.e. 198.51.0.0/16.
	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. `192.0.2.1` or `2001:db8::/32` and IP ranges in CIDR format i.e. `192.0.2.0/24`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationsObservation struct {

	// The request property to target. Allowed values: "ip", "ip_range"
	// The request property to target. Available values: `ip`, `ip_range`.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. 198.51.100.4 or 2001:db8::/32 and IP ranges in CIDR format i.e. 198.51.0.0/16.
	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. `192.0.2.1` or `2001:db8::/32` and IP ranges in CIDR format i.e. `192.0.2.0/24`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationsParameters struct {

	// The request property to target. Allowed values: "ip", "ip_range"
	// The request property to target. Available values: `ip`, `ip_range`.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. 198.51.100.4 or 2001:db8::/32 and IP ranges in CIDR format i.e. 198.51.0.0/16.
	// The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. `192.0.2.1` or `2001:db8::/32` and IP ranges in CIDR format i.e. `192.0.2.0/24`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LockdownInitParameters struct {

	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs. It's a complex value. See description below. The order of the configuration entries is unimportant.
	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.
	Configurations []ConfigurationsInitParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Boolean of whether this zone lockdown is currently paused. Default: false.
	// Boolean of whether this zone lockdown is currently paused. Defaults to `false`.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`
}

type LockdownObservation struct {

	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs. It's a complex value. See description below. The order of the configuration entries is unimportant.
	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.
	Configurations []ConfigurationsObservation `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The access rule ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Boolean of whether this zone lockdown is currently paused. Default: false.
	// Boolean of whether this zone lockdown is currently paused. Defaults to `false`.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`

	// The DNS zone ID to which the access rule should be added.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type LockdownParameters struct {

	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs. It's a complex value. See description below. The order of the configuration entries is unimportant.
	// A list of IP addresses or IP ranges to match the request against specified in target, value pairs.
	// +kubebuilder:validation:Optional
	Configurations []ConfigurationsParameters `json:"configurations,omitempty" tf:"configurations,omitempty"`

	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	// A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Boolean of whether this zone lockdown is currently paused. Default: false.
	// Boolean of whether this zone lockdown is currently paused. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	// A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
	// +kubebuilder:validation:Optional
	Urls []*string `json:"urls,omitempty" tf:"urls,omitempty"`

	// The DNS zone ID to which the access rule should be added.
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// LockdownSpec defines the desired state of Lockdown
type LockdownSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LockdownParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LockdownInitParameters `json:"initProvider,omitempty"`
}

// LockdownStatus defines the observed state of Lockdown.
type LockdownStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LockdownObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Lockdown is the Schema for the Lockdowns API. Provides a Cloudflare resource to lock down access to URLs by IP address or IP ranges.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Lockdown struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configurations) || has(self.initProvider.configurations)",message="configurations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.urls) || has(self.initProvider.urls)",message="urls is a required parameter"
	Spec   LockdownSpec   `json:"spec"`
	Status LockdownStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LockdownList contains a list of Lockdowns
type LockdownList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Lockdown `json:"items"`
}

// Repository type metadata.
var (
	Lockdown_Kind             = "Lockdown"
	Lockdown_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Lockdown_Kind}.String()
	Lockdown_KindAPIVersion   = Lockdown_Kind + "." + CRDGroupVersion.String()
	Lockdown_GroupVersionKind = CRDGroupVersion.WithKind(Lockdown_Kind)
)

func init() {
	SchemeBuilder.Register(&Lockdown{}, &LockdownList{})
}
