/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TotalTLSInitParameters struct {

	// The Certificate Authority that Total TLS certificates will be issued through. Available values: `google`, `lets_encrypt`.
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority,omitempty"`

	// Enable Total TLS for the zone.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TotalTLSObservation struct {

	// The Certificate Authority that Total TLS certificates will be issued through. Available values: `google`, `lets_encrypt`.
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority,omitempty"`

	// Enable Total TLS for the zone.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TotalTLSParameters struct {

	// The Certificate Authority that Total TLS certificates will be issued through. Available values: `google`, `lets_encrypt`.
	// +kubebuilder:validation:Optional
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority,omitempty"`

	// Enable Total TLS for the zone.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// TotalTLSSpec defines the desired state of TotalTLS
type TotalTLSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TotalTLSParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TotalTLSInitParameters `json:"initProvider,omitempty"`
}

// TotalTLSStatus defines the observed state of TotalTLS.
type TotalTLSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TotalTLSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TotalTLS is the Schema for the TotalTLSs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type TotalTLS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || has(self.initProvider.enabled)",message="enabled is a required parameter"
	Spec   TotalTLSSpec   `json:"spec"`
	Status TotalTLSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TotalTLSList contains a list of TotalTLSs
type TotalTLSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TotalTLS `json:"items"`
}

// Repository type metadata.
var (
	TotalTLS_Kind             = "TotalTLS"
	TotalTLS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TotalTLS_Kind}.String()
	TotalTLS_KindAPIVersion   = TotalTLS_Kind + "." + CRDGroupVersion.String()
	TotalTLS_GroupVersionKind = CRDGroupVersion.WithKind(TotalTLS_Kind)
)

func init() {
	SchemeBuilder.Register(&TotalTLS{}, &TotalTLSList{})
}
