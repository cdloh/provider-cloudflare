/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedHeadersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedHeadersParameters struct {

	// The list of managed request headers.
	// +kubebuilder:validation:Optional
	ManagedRequestHeaders []ManagedRequestHeadersParameters `json:"managedRequestHeaders,omitempty" tf:"managed_request_headers,omitempty"`

	// The list of managed response headers.
	// +kubebuilder:validation:Optional
	ManagedResponseHeaders []ManagedResponseHeadersParameters `json:"managedResponseHeaders,omitempty" tf:"managed_response_headers,omitempty"`

	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type ManagedRequestHeadersObservation struct {
}

type ManagedRequestHeadersParameters struct {

	// Whether the headers rule is active.
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Unique headers rule identifier.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type ManagedResponseHeadersObservation struct {
}

type ManagedResponseHeadersParameters struct {

	// Whether the headers rule is active.
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Unique headers rule identifier.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

// ManagedHeadersSpec defines the desired state of ManagedHeaders
type ManagedHeadersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedHeadersParameters `json:"forProvider"`
}

// ManagedHeadersStatus defines the observed state of ManagedHeaders.
type ManagedHeadersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedHeadersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedHeaders is the Schema for the ManagedHeaderss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type ManagedHeaders struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedHeadersSpec   `json:"spec"`
	Status            ManagedHeadersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedHeadersList contains a list of ManagedHeaderss
type ManagedHeadersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedHeaders `json:"items"`
}

// Repository type metadata.
var (
	ManagedHeaders_Kind             = "ManagedHeaders"
	ManagedHeaders_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedHeaders_Kind}.String()
	ManagedHeaders_KindAPIVersion   = ManagedHeaders_Kind + "." + CRDGroupVersion.String()
	ManagedHeaders_GroupVersionKind = CRDGroupVersion.WithKind(ManagedHeaders_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedHeaders{}, &ManagedHeadersList{})
}
