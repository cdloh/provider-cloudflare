/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InitialSettingsObservation struct {
	AlwaysOnline *string `json:"alwaysOnline,omitempty" tf:"always_online,omitempty"`

	AlwaysUseHTTPS *string `json:"alwaysUseHttps,omitempty" tf:"always_use_https,omitempty"`

	AutomaticHTTPSRewrites *string `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	BinaryAst *string `json:"binaryAst,omitempty" tf:"binary_ast,omitempty"`

	Brotli *string `json:"brotli,omitempty" tf:"brotli,omitempty"`

	BrowserCacheTTL *float64 `json:"browserCacheTtl,omitempty" tf:"browser_cache_ttl,omitempty"`

	BrowserCheck *string `json:"browserCheck,omitempty" tf:"browser_check,omitempty"`

	CacheLevel *string `json:"cacheLevel,omitempty" tf:"cache_level,omitempty"`

	ChallengeTTL *float64 `json:"challengeTtl,omitempty" tf:"challenge_ttl,omitempty"`

	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	CnameFlattening *string `json:"cnameFlattening,omitempty" tf:"cname_flattening,omitempty"`

	DevelopmentMode *string `json:"developmentMode,omitempty" tf:"development_mode,omitempty"`

	EarlyHints *string `json:"earlyHints,omitempty" tf:"early_hints,omitempty"`

	EmailObfuscation *string `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	FilterLogsToCloudflare *string `json:"filterLogsToCloudflare,omitempty" tf:"filter_logs_to_cloudflare,omitempty"`

	H2Prioritization *string `json:"h2Prioritization,omitempty" tf:"h2_prioritization,omitempty"`

	HotlinkProtection *string `json:"hotlinkProtection,omitempty" tf:"hotlink_protection,omitempty"`

	Http2 *string `json:"http2,omitempty" tf:"http2,omitempty"`

	Http3 *string `json:"http3,omitempty" tf:"http3,omitempty"`

	IPGeolocation *string `json:"ipGeolocation,omitempty" tf:"ip_geolocation,omitempty"`

	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	ImageResizing *string `json:"imageResizing,omitempty" tf:"image_resizing,omitempty"`

	LogToCloudflare *string `json:"logToCloudflare,omitempty" tf:"log_to_cloudflare,omitempty"`

	MaxUpload *float64 `json:"maxUpload,omitempty" tf:"max_upload,omitempty"`

	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	Minify []MinifyObservation `json:"minify,omitempty" tf:"minify,omitempty"`

	Mirage *string `json:"mirage,omitempty" tf:"mirage,omitempty"`

	MobileRedirect []MobileRedirectObservation `json:"mobileRedirect,omitempty" tf:"mobile_redirect,omitempty"`

	OpportunisticEncryption *string `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	OpportunisticOnion *string `json:"opportunisticOnion,omitempty" tf:"opportunistic_onion,omitempty"`

	OrangeToOrange *string `json:"orangeToOrange,omitempty" tf:"orange_to_orange,omitempty"`

	OriginErrorPagePassThru *string `json:"originErrorPagePassThru,omitempty" tf:"origin_error_page_pass_thru,omitempty"`

	OriginMaxHTTPVersion *string `json:"originMaxHttpVersion,omitempty" tf:"origin_max_http_version,omitempty"`

	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	PrefetchPreload *string `json:"prefetchPreload,omitempty" tf:"prefetch_preload,omitempty"`

	PrivacyPass *string `json:"privacyPass,omitempty" tf:"privacy_pass,omitempty"`

	ProxyReadTimeout *string `json:"proxyReadTimeout,omitempty" tf:"proxy_read_timeout,omitempty"`

	PseudoIPv4 *string `json:"pseudoIpv4,omitempty" tf:"pseudo_ipv4,omitempty"`

	ResponseBuffering *string `json:"responseBuffering,omitempty" tf:"response_buffering,omitempty"`

	RocketLoader *string `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	SecurityHeader []SecurityHeaderObservation `json:"securityHeader,omitempty" tf:"security_header,omitempty"`

	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	ServerSideExclude *string `json:"serverSideExclude,omitempty" tf:"server_side_exclude,omitempty"`

	SortQueryStringForCache *string `json:"sortQueryStringForCache,omitempty" tf:"sort_query_string_for_cache,omitempty"`

	TLS12Only *string `json:"tls12Only,omitempty" tf:"tls_1_2_only,omitempty"`

	TLS13 *string `json:"tls13,omitempty" tf:"tls_1_3,omitempty"`

	TLSClientAuth *string `json:"tlsClientAuth,omitempty" tf:"tls_client_auth,omitempty"`

	TrueClientIPHeader *string `json:"trueClientIpHeader,omitempty" tf:"true_client_ip_header,omitempty"`

	UniversalSSL *string `json:"universalSsl,omitempty" tf:"universal_ssl,omitempty"`

	VisitorIP *string `json:"visitorIp,omitempty" tf:"visitor_ip,omitempty"`

	Waf *string `json:"waf,omitempty" tf:"waf,omitempty"`

	Webp *string `json:"webp,omitempty" tf:"webp,omitempty"`

	Websockets *string `json:"websockets,omitempty" tf:"websockets,omitempty"`

	ZeroRtt *string `json:"zeroRtt,omitempty" tf:"zero_rtt,omitempty"`
}

type InitialSettingsParameters struct {
}

type MinifyObservation struct {
	CSS *string `json:"css,omitempty" tf:"css,omitempty"`

	HTML *string `json:"html,omitempty" tf:"html,omitempty"`

	Js *string `json:"js,omitempty" tf:"js,omitempty"`
}

type MinifyParameters struct {
}

type MobileRedirectObservation struct {
	MobileSubdomain *string `json:"mobileSubdomain,omitempty" tf:"mobile_subdomain,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StripURI *bool `json:"stripUri,omitempty" tf:"strip_uri,omitempty"`
}

type MobileRedirectParameters struct {
}

type SecurityHeaderObservation struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IncludeSubdomains *bool `json:"includeSubdomains,omitempty" tf:"include_subdomains,omitempty"`

	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	Nosniff *bool `json:"nosniff,omitempty" tf:"nosniff,omitempty"`

	Preload *bool `json:"preload,omitempty" tf:"preload,omitempty"`
}

type SecurityHeaderParameters struct {
}

type SettingsMinifyObservation struct {
}

type SettingsMinifyParameters struct {

	// +kubebuilder:validation:Required
	CSS *string `json:"css" tf:"css,omitempty"`

	// +kubebuilder:validation:Required
	HTML *string `json:"html" tf:"html,omitempty"`

	// +kubebuilder:validation:Required
	Js *string `json:"js" tf:"js,omitempty"`
}

type SettingsMobileRedirectObservation struct {
}

type SettingsMobileRedirectParameters struct {

	// +kubebuilder:validation:Required
	MobileSubdomain *string `json:"mobileSubdomain" tf:"mobile_subdomain,omitempty"`

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	StripURI *bool `json:"stripUri" tf:"strip_uri,omitempty"`
}

type SettingsObservation struct {
}

type SettingsOverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InitialSettings []InitialSettingsObservation `json:"initialSettings,omitempty" tf:"initial_settings,omitempty"`

	InitialSettingsReadAt *string `json:"initialSettingsReadAt,omitempty" tf:"initial_settings_read_at,omitempty"`

	ReadonlySettings []*string `json:"readonlySettings,omitempty" tf:"readonly_settings,omitempty"`

	ZoneStatus *string `json:"zoneStatus,omitempty" tf:"zone_status,omitempty"`

	ZoneType *string `json:"zoneType,omitempty" tf:"zone_type,omitempty"`
}

type SettingsOverrideParameters struct {

	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type SettingsParameters struct {

	// +kubebuilder:validation:Optional
	AlwaysOnline *string `json:"alwaysOnline,omitempty" tf:"always_online,omitempty"`

	// +kubebuilder:validation:Optional
	AlwaysUseHTTPS *string `json:"alwaysUseHttps,omitempty" tf:"always_use_https,omitempty"`

	// +kubebuilder:validation:Optional
	AutomaticHTTPSRewrites *string `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	// +kubebuilder:validation:Optional
	BinaryAst *string `json:"binaryAst,omitempty" tf:"binary_ast,omitempty"`

	// +kubebuilder:validation:Optional
	Brotli *string `json:"brotli,omitempty" tf:"brotli,omitempty"`

	// +kubebuilder:validation:Optional
	BrowserCacheTTL *float64 `json:"browserCacheTtl,omitempty" tf:"browser_cache_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	BrowserCheck *string `json:"browserCheck,omitempty" tf:"browser_check,omitempty"`

	// +kubebuilder:validation:Optional
	CacheLevel *string `json:"cacheLevel,omitempty" tf:"cache_level,omitempty"`

	// +kubebuilder:validation:Optional
	ChallengeTTL *float64 `json:"challengeTtl,omitempty" tf:"challenge_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// +kubebuilder:validation:Optional
	CnameFlattening *string `json:"cnameFlattening,omitempty" tf:"cname_flattening,omitempty"`

	// +kubebuilder:validation:Optional
	DevelopmentMode *string `json:"developmentMode,omitempty" tf:"development_mode,omitempty"`

	// +kubebuilder:validation:Optional
	EarlyHints *string `json:"earlyHints,omitempty" tf:"early_hints,omitempty"`

	// +kubebuilder:validation:Optional
	EmailObfuscation *string `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	// +kubebuilder:validation:Optional
	FilterLogsToCloudflare *string `json:"filterLogsToCloudflare,omitempty" tf:"filter_logs_to_cloudflare,omitempty"`

	// +kubebuilder:validation:Optional
	H2Prioritization *string `json:"h2Prioritization,omitempty" tf:"h2_prioritization,omitempty"`

	// +kubebuilder:validation:Optional
	HotlinkProtection *string `json:"hotlinkProtection,omitempty" tf:"hotlink_protection,omitempty"`

	// +kubebuilder:validation:Optional
	Http2 *string `json:"http2,omitempty" tf:"http2,omitempty"`

	// +kubebuilder:validation:Optional
	Http3 *string `json:"http3,omitempty" tf:"http3,omitempty"`

	// +kubebuilder:validation:Optional
	IPGeolocation *string `json:"ipGeolocation,omitempty" tf:"ip_geolocation,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// +kubebuilder:validation:Optional
	ImageResizing *string `json:"imageResizing,omitempty" tf:"image_resizing,omitempty"`

	// +kubebuilder:validation:Optional
	LogToCloudflare *string `json:"logToCloudflare,omitempty" tf:"log_to_cloudflare,omitempty"`

	// +kubebuilder:validation:Optional
	MaxUpload *float64 `json:"maxUpload,omitempty" tf:"max_upload,omitempty"`

	// +kubebuilder:validation:Optional
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// +kubebuilder:validation:Optional
	Minify []SettingsMinifyParameters `json:"minify,omitempty" tf:"minify,omitempty"`

	// +kubebuilder:validation:Optional
	Mirage *string `json:"mirage,omitempty" tf:"mirage,omitempty"`

	// +kubebuilder:validation:Optional
	MobileRedirect []SettingsMobileRedirectParameters `json:"mobileRedirect,omitempty" tf:"mobile_redirect,omitempty"`

	// +kubebuilder:validation:Optional
	OpportunisticEncryption *string `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	// +kubebuilder:validation:Optional
	OpportunisticOnion *string `json:"opportunisticOnion,omitempty" tf:"opportunistic_onion,omitempty"`

	// +kubebuilder:validation:Optional
	OrangeToOrange *string `json:"orangeToOrange,omitempty" tf:"orange_to_orange,omitempty"`

	// +kubebuilder:validation:Optional
	OriginErrorPagePassThru *string `json:"originErrorPagePassThru,omitempty" tf:"origin_error_page_pass_thru,omitempty"`

	// +kubebuilder:validation:Optional
	OriginMaxHTTPVersion *string `json:"originMaxHttpVersion,omitempty" tf:"origin_max_http_version,omitempty"`

	// +kubebuilder:validation:Optional
	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	// +kubebuilder:validation:Optional
	PrefetchPreload *string `json:"prefetchPreload,omitempty" tf:"prefetch_preload,omitempty"`

	// +kubebuilder:validation:Optional
	PrivacyPass *string `json:"privacyPass,omitempty" tf:"privacy_pass,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyReadTimeout *string `json:"proxyReadTimeout,omitempty" tf:"proxy_read_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	PseudoIPv4 *string `json:"pseudoIpv4,omitempty" tf:"pseudo_ipv4,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseBuffering *string `json:"responseBuffering,omitempty" tf:"response_buffering,omitempty"`

	// +kubebuilder:validation:Optional
	RocketLoader *string `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	// +kubebuilder:validation:Optional
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityHeader []SettingsSecurityHeaderParameters `json:"securityHeader,omitempty" tf:"security_header,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	// +kubebuilder:validation:Optional
	ServerSideExclude *string `json:"serverSideExclude,omitempty" tf:"server_side_exclude,omitempty"`

	// +kubebuilder:validation:Optional
	SortQueryStringForCache *string `json:"sortQueryStringForCache,omitempty" tf:"sort_query_string_for_cache,omitempty"`

	// +kubebuilder:validation:Optional
	TLS12Only *string `json:"tls12Only,omitempty" tf:"tls_1_2_only,omitempty"`

	// +kubebuilder:validation:Optional
	TLS13 *string `json:"tls13,omitempty" tf:"tls_1_3,omitempty"`

	// +kubebuilder:validation:Optional
	TLSClientAuth *string `json:"tlsClientAuth,omitempty" tf:"tls_client_auth,omitempty"`

	// +kubebuilder:validation:Optional
	TrueClientIPHeader *string `json:"trueClientIpHeader,omitempty" tf:"true_client_ip_header,omitempty"`

	// +kubebuilder:validation:Optional
	UniversalSSL *string `json:"universalSsl,omitempty" tf:"universal_ssl,omitempty"`

	// +kubebuilder:validation:Optional
	VisitorIP *string `json:"visitorIp,omitempty" tf:"visitor_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Waf *string `json:"waf,omitempty" tf:"waf,omitempty"`

	// +kubebuilder:validation:Optional
	Webp *string `json:"webp,omitempty" tf:"webp,omitempty"`

	// +kubebuilder:validation:Optional
	Websockets *string `json:"websockets,omitempty" tf:"websockets,omitempty"`

	// +kubebuilder:validation:Optional
	ZeroRtt *string `json:"zeroRtt,omitempty" tf:"zero_rtt,omitempty"`
}

type SettingsSecurityHeaderObservation struct {
}

type SettingsSecurityHeaderParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeSubdomains *bool `json:"includeSubdomains,omitempty" tf:"include_subdomains,omitempty"`

	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// +kubebuilder:validation:Optional
	Nosniff *bool `json:"nosniff,omitempty" tf:"nosniff,omitempty"`

	// +kubebuilder:validation:Optional
	Preload *bool `json:"preload,omitempty" tf:"preload,omitempty"`
}

// SettingsOverrideSpec defines the desired state of SettingsOverride
type SettingsOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsOverrideParameters `json:"forProvider"`
}

// SettingsOverrideStatus defines the observed state of SettingsOverride.
type SettingsOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsOverride is the Schema for the SettingsOverrides API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type SettingsOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SettingsOverrideSpec   `json:"spec"`
	Status            SettingsOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsOverrideList contains a list of SettingsOverrides
type SettingsOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SettingsOverride `json:"items"`
}

// Repository type metadata.
var (
	SettingsOverride_Kind             = "SettingsOverride"
	SettingsOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SettingsOverride_Kind}.String()
	SettingsOverride_KindAPIVersion   = SettingsOverride_Kind + "." + CRDGroupVersion.String()
	SettingsOverride_GroupVersionKind = CRDGroupVersion.WithKind(SettingsOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&SettingsOverride{}, &SettingsOverrideList{})
}
