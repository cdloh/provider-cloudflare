/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionObservation struct {
}

type ActionParameters struct {

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Response []ResponseParameters `json:"response,omitempty" tf:"response,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type CorrelateObservation struct {
}

type CorrelateParameters struct {

	// +kubebuilder:validation:Optional
	By *string `json:"by,omitempty" tf:"by,omitempty"`
}

type MatchObservation struct {
}

type MatchParameters struct {

	// +kubebuilder:validation:Optional
	Request []RequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// +kubebuilder:validation:Optional
	Response []MatchResponseParameters `json:"response,omitempty" tf:"response,omitempty"`
}

type MatchResponseObservation struct {
}

type MatchResponseParameters struct {

	// +kubebuilder:validation:Optional
	Headers []map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// +kubebuilder:validation:Optional
	OriginTraffic *bool `json:"originTraffic,omitempty" tf:"origin_traffic,omitempty"`

	// +kubebuilder:validation:Optional
	Statuses []*float64 `json:"statuses,omitempty" tf:"statuses,omitempty"`
}

type RateLimitObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RateLimitParameters struct {

	// +kubebuilder:validation:Required
	Action []ActionParameters `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	BypassURLPatterns []*string `json:"bypassUrlPatterns,omitempty" tf:"bypass_url_patterns,omitempty"`

	// +kubebuilder:validation:Optional
	Correlate []CorrelateParameters `json:"correlate,omitempty" tf:"correlate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Optional
	Match []MatchParameters `json:"match,omitempty" tf:"match,omitempty"`

	// +kubebuilder:validation:Required
	Period *float64 `json:"period" tf:"period,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RequestObservation struct {
}

type RequestParameters struct {

	// +kubebuilder:validation:Optional
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// +kubebuilder:validation:Optional
	Schemes []*string `json:"schemes,omitempty" tf:"schemes,omitempty"`

	// +kubebuilder:validation:Optional
	URLPattern *string `json:"urlPattern,omitempty" tf:"url_pattern,omitempty"`
}

type ResponseObservation struct {
}

type ResponseParameters struct {

	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`
}

// RateLimitSpec defines the desired state of RateLimit
type RateLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RateLimitParameters `json:"forProvider"`
}

// RateLimitStatus defines the observed state of RateLimit.
type RateLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RateLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RateLimit is the Schema for the RateLimits API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type RateLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RateLimitSpec   `json:"spec"`
	Status            RateLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RateLimitList contains a list of RateLimits
type RateLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RateLimit `json:"items"`
}

// Repository type metadata.
var (
	RateLimit_Kind             = "RateLimit"
	RateLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RateLimit_Kind}.String()
	RateLimit_KindAPIVersion   = RateLimit_Kind + "." + CRDGroupVersion.String()
	RateLimit_GroupVersionKind = CRDGroupVersion.WithKind(RateLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&RateLimit{}, &RateLimitList{})
}
