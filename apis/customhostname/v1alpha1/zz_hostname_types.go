/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostnameObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnershipVerification map[string]*string `json:"ownershipVerification,omitempty" tf:"ownership_verification,omitempty"`

	OwnershipVerificationHTTP map[string]*string `json:"ownershipVerificationHttp,omitempty" tf:"ownership_verification_http,omitempty"`

	// SSL configuration of the certificate.
	// +kubebuilder:validation:Optional
	SSL []SSLObservation `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// Status of the certificate.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type HostnameParameters struct {

	// The custom origin server used for certificates.
	// +kubebuilder:validation:Optional
	CustomOriginServer *string `json:"customOriginServer,omitempty" tf:"custom_origin_server,omitempty"`

	// The [custom origin SNI](https://developers.cloudflare.com/ssl/ssl-for-saas/hostname-specific-behavior/custom-origin) used for certificates.
	// +kubebuilder:validation:Optional
	CustomOriginSni *string `json:"customOriginSni,omitempty" tf:"custom_origin_sni,omitempty"`

	// Hostname you intend to request a certificate for. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// SSL configuration of the certificate.
	// +kubebuilder:validation:Optional
	SSL []SSLParameters `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// Whether to wait for a custom hostname SSL sub-object to reach status `pending_validation` during creation. Defaults to `false`.
	// +kubebuilder:validation:Optional
	WaitForSSLPendingValidation *bool `json:"waitForSslPendingValidation,omitempty" tf:"wait_for_ssl_pending_validation,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type SSLObservation struct {
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	ValidationErrors []ValidationErrorsObservation `json:"validationErrors,omitempty" tf:"validation_errors,omitempty"`

	ValidationRecords []ValidationRecordsObservation `json:"validationRecords,omitempty" tf:"validation_records,omitempty"`
}

type SSLParameters struct {

	// +kubebuilder:validation:Optional
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority,omitempty"`

	// If a custom uploaded certificate is used.
	// +kubebuilder:validation:Optional
	CustomCertificate *string `json:"customCertificate,omitempty" tf:"custom_certificate,omitempty"`

	// The key for a custom uploaded certificate.
	// +kubebuilder:validation:Optional
	CustomKey *string `json:"customKey,omitempty" tf:"custom_key,omitempty"`

	// Domain control validation (DCV) method used for this hostname. Available values: `http`, `txt`, `email`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// SSL/TLS settings for the certificate.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`

	// Level of validation to be used for this hostname. Available values: `dv`. Defaults to `dv`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Indicates whether the certificate covers a wildcard.
	// +kubebuilder:validation:Optional
	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard,omitempty"`
}

type SettingsObservation struct {
}

type SettingsParameters struct {

	// List of SSL/TLS ciphers to associate with this certificate.
	// +kubebuilder:validation:Optional
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Whether early hints should be supported. Available values: `on`, `off`.
	// +kubebuilder:validation:Optional
	EarlyHints *string `json:"earlyHints,omitempty" tf:"early_hints,omitempty"`

	// Whether HTTP2 should be supported. Available values: `on`, `off`.
	// +kubebuilder:validation:Optional
	Http2 *string `json:"http2,omitempty" tf:"http2,omitempty"`

	// Lowest version of TLS this certificate should support. Available values: `1.0`, `1.1`, `1.2`, `1.3`.
	// +kubebuilder:validation:Optional
	MinTLSVersion *string `json:"minTlsVersion,omitempty" tf:"min_tls_version,omitempty"`

	// Whether TLSv1.3 should be supported. Available values: `on`, `off`.
	// +kubebuilder:validation:Optional
	Tls13 *string `json:"tls13,omitempty" tf:"tls13,omitempty"`
}

type ValidationErrorsObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ValidationErrorsParameters struct {
}

type ValidationRecordsObservation struct {
	CnameName *string `json:"cnameName,omitempty" tf:"cname_name,omitempty"`

	CnameTarget *string `json:"cnameTarget,omitempty" tf:"cname_target,omitempty"`

	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	HTTPBody *string `json:"httpBody,omitempty" tf:"http_body,omitempty"`

	HTTPURL *string `json:"httpUrl,omitempty" tf:"http_url,omitempty"`

	TxtName *string `json:"txtName,omitempty" tf:"txt_name,omitempty"`

	TxtValue *string `json:"txtValue,omitempty" tf:"txt_value,omitempty"`
}

type ValidationRecordsParameters struct {
}

// HostnameSpec defines the desired state of Hostname
type HostnameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostnameParameters `json:"forProvider"`
}

// HostnameStatus defines the observed state of Hostname.
type HostnameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostnameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Hostname is the Schema for the Hostnames API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Hostname struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HostnameSpec   `json:"spec"`
	Status            HostnameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostnameList contains a list of Hostnames
type HostnameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Hostname `json:"items"`
}

// Repository type metadata.
var (
	Hostname_Kind             = "Hostname"
	Hostname_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Hostname_Kind}.String()
	Hostname_KindAPIVersion   = Hostname_Kind + "." + CRDGroupVersion.String()
	Hostname_GroupVersionKind = CRDGroupVersion.WithKind(Hostname_Kind)
)

func init() {
	SchemeBuilder.Register(&Hostname{}, &HostnameList{})
}
