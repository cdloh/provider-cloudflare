/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsObservation struct {
}

type ActionsParameters struct {

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	AlwaysUseHTTPS *bool `json:"alwaysUseHttps,omitempty" tf:"always_use_https,omitempty"`

	// +kubebuilder:validation:Optional
	AutomaticHTTPSRewrites *string `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	// +kubebuilder:validation:Optional
	BrowserCacheTTL *string `json:"browserCacheTtl,omitempty" tf:"browser_cache_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	BrowserCheck *string `json:"browserCheck,omitempty" tf:"browser_check,omitempty"`

	// +kubebuilder:validation:Optional
	BypassCacheOnCookie *string `json:"bypassCacheOnCookie,omitempty" tf:"bypass_cache_on_cookie,omitempty"`

	// +kubebuilder:validation:Optional
	CacheByDeviceType *string `json:"cacheByDeviceType,omitempty" tf:"cache_by_device_type,omitempty"`

	// +kubebuilder:validation:Optional
	CacheDeceptionArmor *string `json:"cacheDeceptionArmor,omitempty" tf:"cache_deception_armor,omitempty"`

	// +kubebuilder:validation:Optional
	CacheKeyFields []CacheKeyFieldsParameters `json:"cacheKeyFields,omitempty" tf:"cache_key_fields,omitempty"`

	// +kubebuilder:validation:Optional
	CacheLevel *string `json:"cacheLevel,omitempty" tf:"cache_level,omitempty"`

	// +kubebuilder:validation:Optional
	CacheOnCookie *string `json:"cacheOnCookie,omitempty" tf:"cache_on_cookie,omitempty"`

	// +kubebuilder:validation:Optional
	CacheTTLByStatus []CacheTTLByStatusParameters `json:"cacheTtlByStatus,omitempty" tf:"cache_ttl_by_status,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableApps *bool `json:"disableApps,omitempty" tf:"disable_apps,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisablePerformance *bool `json:"disablePerformance,omitempty" tf:"disable_performance,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableRailgun *bool `json:"disableRailgun,omitempty" tf:"disable_railgun,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableSecurity *bool `json:"disableSecurity,omitempty" tf:"disable_security,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	DisableZaraz *bool `json:"disableZaraz,omitempty" tf:"disable_zaraz,omitempty"`

	// +kubebuilder:validation:Optional
	EdgeCacheTTL *float64 `json:"edgeCacheTtl,omitempty" tf:"edge_cache_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	EmailObfuscation *string `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	// +kubebuilder:validation:Optional
	ExplicitCacheControl *string `json:"explicitCacheControl,omitempty" tf:"explicit_cache_control,omitempty"`

	// +kubebuilder:validation:Optional
	ForwardingURL []ForwardingURLParameters `json:"forwardingUrl,omitempty" tf:"forwarding_url,omitempty"`

	// +kubebuilder:validation:Optional
	HostHeaderOverride *string `json:"hostHeaderOverride,omitempty" tf:"host_header_override,omitempty"`

	// +kubebuilder:validation:Optional
	IPGeolocation *string `json:"ipGeolocation,omitempty" tf:"ip_geolocation,omitempty"`

	// +kubebuilder:validation:Optional
	Minify []MinifyParameters `json:"minify,omitempty" tf:"minify,omitempty"`

	// +kubebuilder:validation:Optional
	Mirage *string `json:"mirage,omitempty" tf:"mirage,omitempty"`

	// +kubebuilder:validation:Optional
	OpportunisticEncryption *string `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	// +kubebuilder:validation:Optional
	OriginErrorPagePassThru *string `json:"originErrorPagePassThru,omitempty" tf:"origin_error_page_pass_thru,omitempty"`

	// +kubebuilder:validation:Optional
	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	// +kubebuilder:validation:Optional
	ResolveOverride *string `json:"resolveOverride,omitempty" tf:"resolve_override,omitempty"`

	// +kubebuilder:validation:Optional
	RespectStrongEtag *string `json:"respectStrongEtag,omitempty" tf:"respect_strong_etag,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseBuffering *string `json:"responseBuffering,omitempty" tf:"response_buffering,omitempty"`

	// +kubebuilder:validation:Optional
	RocketLoader *string `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	// +kubebuilder:validation:Optional
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	// +kubebuilder:validation:Optional
	ServerSideExclude *string `json:"serverSideExclude,omitempty" tf:"server_side_exclude,omitempty"`

	// +kubebuilder:validation:Optional
	SortQueryStringForCache *string `json:"sortQueryStringForCache,omitempty" tf:"sort_query_string_for_cache,omitempty"`

	// +kubebuilder:validation:Optional
	TrueClientIPHeader *string `json:"trueClientIpHeader,omitempty" tf:"true_client_ip_header,omitempty"`

	// +kubebuilder:validation:Optional
	Waf *string `json:"waf,omitempty" tf:"waf,omitempty"`
}

type CacheKeyFieldsObservation struct {
}

type CacheKeyFieldsParameters struct {

	// +kubebuilder:validation:Required
	Cookie []CookieParameters `json:"cookie" tf:"cookie,omitempty"`

	// +kubebuilder:validation:Required
	Header []HeaderParameters `json:"header" tf:"header,omitempty"`

	// +kubebuilder:validation:Required
	Host []HostParameters `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Required
	QueryString []QueryStringParameters `json:"queryString" tf:"query_string,omitempty"`

	// +kubebuilder:validation:Required
	User []UserParameters `json:"user" tf:"user,omitempty"`
}

type CacheTTLByStatusObservation struct {
}

type CacheTTLByStatusParameters struct {

	// +kubebuilder:validation:Required
	Codes *string `json:"codes" tf:"codes,omitempty"`

	// +kubebuilder:validation:Required
	TTL *float64 `json:"ttl" tf:"ttl,omitempty"`
}

type CookieObservation struct {
}

type CookieParameters struct {

	// +kubebuilder:validation:Optional
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// +kubebuilder:validation:Optional
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type ForwardingURLObservation struct {
}

type ForwardingURLParameters struct {

	// +kubebuilder:validation:Required
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type HeaderObservation struct {
}

type HeaderParameters struct {

	// +kubebuilder:validation:Optional
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// +kubebuilder:validation:Optional
	Exclude []*string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// +kubebuilder:validation:Optional
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type HostObservation struct {
}

type HostParameters struct {

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	Resolved *bool `json:"resolved,omitempty" tf:"resolved,omitempty"`
}

type MinifyObservation struct {
}

type MinifyParameters struct {

	// +kubebuilder:validation:Required
	CSS *string `json:"css" tf:"css,omitempty"`

	// +kubebuilder:validation:Required
	HTML *string `json:"html" tf:"html,omitempty"`

	// +kubebuilder:validation:Required
	Js *string `json:"js" tf:"js,omitempty"`
}

type QueryStringObservation struct {
}

type QueryStringParameters struct {

	// +kubebuilder:validation:Optional
	Exclude []*string `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// +kubebuilder:validation:Optional
	Ignore *bool `json:"ignore,omitempty" tf:"ignore,omitempty"`

	// +kubebuilder:validation:Optional
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type RuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleParameters struct {

	// +kubebuilder:validation:Required
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// Defaults to `1`.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Defaults to `active`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type UserObservation struct {
}

type UserParameters struct {

	// +kubebuilder:validation:Optional
	DeviceType *bool `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// +kubebuilder:validation:Optional
	Geo *bool `json:"geo,omitempty" tf:"geo,omitempty"`

	// +kubebuilder:validation:Optional
	Lang *bool `json:"lang,omitempty" tf:"lang,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rule is the Schema for the Rules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec"`
	Status            RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
