/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressMapInitParameters struct {

	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map.
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// Description of the address map.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the Address Map is enabled or not.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The set of IPs on the Address Map.
	Ips []IpsInitParameters `json:"ips,omitempty" tf:"ips,omitempty"`

	// Zones and Accounts which will be assigned IPs on this Address Map.
	Memberships []MembershipsInitParameters `json:"memberships,omitempty" tf:"memberships,omitempty"`
}

type AddressMapObservation struct {

	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
	CanDelete *bool `json:"canDelete,omitempty" tf:"can_delete,omitempty"`

	// If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
	CanModifyIps *bool `json:"canModifyIps,omitempty" tf:"can_modify_ips,omitempty"`

	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map.
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// Description of the address map.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the Address Map is enabled or not.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The set of IPs on the Address Map.
	Ips []IpsObservation `json:"ips,omitempty" tf:"ips,omitempty"`

	// Zones and Accounts which will be assigned IPs on this Address Map.
	Memberships []MembershipsObservation `json:"memberships,omitempty" tf:"memberships,omitempty"`
}

type AddressMapParameters struct {

	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map.
	// +kubebuilder:validation:Optional
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// Description of the address map.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the Address Map is enabled or not.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The set of IPs on the Address Map.
	// +kubebuilder:validation:Optional
	Ips []IpsParameters `json:"ips,omitempty" tf:"ips,omitempty"`

	// Zones and Accounts which will be assigned IPs on this Address Map.
	// +kubebuilder:validation:Optional
	Memberships []MembershipsParameters `json:"memberships,omitempty" tf:"memberships,omitempty"`
}

type IpsInitParameters struct {
}

type IpsObservation struct {

	// An IPv4 or IPv6 address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type IpsParameters struct {
}

type MembershipsInitParameters struct {
}

type MembershipsObservation struct {

	// Controls whether the membership can be deleted via the API or not.
	CanDelete *bool `json:"canDelete,omitempty" tf:"can_delete,omitempty"`

	// Identifier of the account or zone.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// The type of the membership.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type MembershipsParameters struct {
}

// AddressMapSpec defines the desired state of AddressMap
type AddressMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AddressMapParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AddressMapInitParameters `json:"initProvider,omitempty"`
}

// AddressMapStatus defines the observed state of AddressMap.
type AddressMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AddressMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AddressMap is the Schema for the AddressMaps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type AddressMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || has(self.initProvider.enabled)",message="enabled is a required parameter"
	Spec   AddressMapSpec   `json:"spec"`
	Status AddressMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddressMapList contains a list of AddressMaps
type AddressMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AddressMap `json:"items"`
}

// Repository type metadata.
var (
	AddressMap_Kind             = "AddressMap"
	AddressMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AddressMap_Kind}.String()
	AddressMap_KindAPIVersion   = AddressMap_Kind + "." + CRDGroupVersion.String()
	AddressMap_GroupVersionKind = CRDGroupVersion.WithKind(AddressMap_Kind)
)

func init() {
	SchemeBuilder.Register(&AddressMap{}, &AddressMapList{})
}
