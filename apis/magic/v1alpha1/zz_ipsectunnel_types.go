// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPsecTunnelInitParameters struct {

	// (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/account/v1alpha1.Account
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Boolean) Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to false.
	// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
	AllowNullCipher *bool `json:"allowNullCipher,omitempty" tf:"allow_null_cipher,omitempty"`

	// (String) IP address assigned to the Cloudflare side of the IPsec tunnel.
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint *string `json:"cloudflareEndpoint,omitempty" tf:"cloudflare_endpoint,omitempty"`

	// (String) IP address assigned to the customer side of the IPsec tunnel.
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint *string `json:"customerEndpoint,omitempty" tf:"customer_endpoint,omitempty"`

	// (String) An optional description of the IPsec tunnel.
	// An optional description of the IPsec tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) remote_id in the form of a fqdn. This value is generated by cloudflare.
	// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
	FqdnID *string `json:"fqdnId,omitempty" tf:"fqdn_id,omitempty"`

	// (Boolean) Specifies if ICMP tunnel health checks are enabled. Default: true.
	// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty" tf:"health_check_enabled,omitempty"`

	// (String) The IP address of the customer endpoint that will receive tunnel health checks. Default: <customer_gre_endpoint>.
	// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
	HealthCheckTarget *string `json:"healthCheckTarget,omitempty" tf:"health_check_target,omitempty"`

	// (String) Specifies the ICMP echo type for the health check (request or reply). Available values: request, reply Default: reply.
	// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// (String) remote_id as a hex string. This value is generated by cloudflare.
	// `remote_id` as a hex string. This value is generated by cloudflare.
	HexID *string `json:"hexId,omitempty" tf:"hex_id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) Name of the IPsec tunnel.
	// Name of the IPsec tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	RemoteID *string `json:"remoteId,omitempty" tf:"remote_id,omitempty"`

	// (String) remote_id in the form of an email address. This value is generated by cloudflare.
	// `remote_id` in the form of an email address. This value is generated by cloudflare.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type IPsecTunnelObservation struct {

	// (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to false.
	// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
	AllowNullCipher *bool `json:"allowNullCipher,omitempty" tf:"allow_null_cipher,omitempty"`

	// (String) IP address assigned to the Cloudflare side of the IPsec tunnel.
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint *string `json:"cloudflareEndpoint,omitempty" tf:"cloudflare_endpoint,omitempty"`

	// (String) IP address assigned to the customer side of the IPsec tunnel.
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint *string `json:"customerEndpoint,omitempty" tf:"customer_endpoint,omitempty"`

	// (String) An optional description of the IPsec tunnel.
	// An optional description of the IPsec tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) remote_id in the form of a fqdn. This value is generated by cloudflare.
	// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
	FqdnID *string `json:"fqdnId,omitempty" tf:"fqdn_id,omitempty"`

	// (Boolean) Specifies if ICMP tunnel health checks are enabled. Default: true.
	// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty" tf:"health_check_enabled,omitempty"`

	// (String) The IP address of the customer endpoint that will receive tunnel health checks. Default: <customer_gre_endpoint>.
	// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
	HealthCheckTarget *string `json:"healthCheckTarget,omitempty" tf:"health_check_target,omitempty"`

	// (String) Specifies the ICMP echo type for the health check (request or reply). Available values: request, reply Default: reply.
	// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// (String) remote_id as a hex string. This value is generated by cloudflare.
	// `remote_id` as a hex string. This value is generated by cloudflare.
	HexID *string `json:"hexId,omitempty" tf:"hex_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) Name of the IPsec tunnel.
	// Name of the IPsec tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	RemoteID *string `json:"remoteId,omitempty" tf:"remote_id,omitempty"`

	// (String) remote_id in the form of an email address. This value is generated by cloudflare.
	// `remote_id` in the form of an email address. This value is generated by cloudflare.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type IPsecTunnelParameters struct {

	// (String) The account identifier to target for the resource. Modifying this attribute will force creation of a new resource.
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Boolean) Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to false.
	// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AllowNullCipher *bool `json:"allowNullCipher,omitempty" tf:"allow_null_cipher,omitempty"`

	// (String) IP address assigned to the Cloudflare side of the IPsec tunnel.
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	// +kubebuilder:validation:Optional
	CloudflareEndpoint *string `json:"cloudflareEndpoint,omitempty" tf:"cloudflare_endpoint,omitempty"`

	// (String) IP address assigned to the customer side of the IPsec tunnel.
	// IP address assigned to the customer side of the IPsec tunnel.
	// +kubebuilder:validation:Optional
	CustomerEndpoint *string `json:"customerEndpoint,omitempty" tf:"customer_endpoint,omitempty"`

	// (String) An optional description of the IPsec tunnel.
	// An optional description of the IPsec tunnel.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) remote_id in the form of a fqdn. This value is generated by cloudflare.
	// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
	// +kubebuilder:validation:Optional
	FqdnID *string `json:"fqdnId,omitempty" tf:"fqdn_id,omitempty"`

	// (Boolean) Specifies if ICMP tunnel health checks are enabled. Default: true.
	// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
	// +kubebuilder:validation:Optional
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty" tf:"health_check_enabled,omitempty"`

	// (String) The IP address of the customer endpoint that will receive tunnel health checks. Default: <customer_gre_endpoint>.
	// The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
	// +kubebuilder:validation:Optional
	HealthCheckTarget *string `json:"healthCheckTarget,omitempty" tf:"health_check_target,omitempty"`

	// (String) Specifies the ICMP echo type for the health check (request or reply). Available values: request, reply Default: reply.
	// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// (String) remote_id as a hex string. This value is generated by cloudflare.
	// `remote_id` as a hex string. This value is generated by cloudflare.
	// +kubebuilder:validation:Optional
	HexID *string `json:"hexId,omitempty" tf:"hex_id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	// +kubebuilder:validation:Optional
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) Name of the IPsec tunnel.
	// Name of the IPsec tunnel.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive) Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
	// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
	// +kubebuilder:validation:Optional
	PskSecretRef *v1.SecretKeySelector `json:"pskSecretRef,omitempty" tf:"-"`

	// (String) ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
	// +kubebuilder:validation:Optional
	RemoteID *string `json:"remoteId,omitempty" tf:"remote_id,omitempty"`

	// (String) remote_id in the form of an email address. This value is generated by cloudflare.
	// `remote_id` in the form of an email address. This value is generated by cloudflare.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// IPsecTunnelSpec defines the desired state of IPsecTunnel
type IPsecTunnelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPsecTunnelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPsecTunnelInitParameters `json:"initProvider,omitempty"`
}

// IPsecTunnelStatus defines the observed state of IPsecTunnel.
type IPsecTunnelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPsecTunnelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPsecTunnel is the Schema for the IPsecTunnels API. Provides a resource, that manages IPsec tunnels for Magic Transit.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type IPsecTunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudflareEndpoint) || (has(self.initProvider) && has(self.initProvider.cloudflareEndpoint))",message="spec.forProvider.cloudflareEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customerEndpoint) || (has(self.initProvider) && has(self.initProvider.customerEndpoint))",message="spec.forProvider.customerEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interfaceAddress) || (has(self.initProvider) && has(self.initProvider.interfaceAddress))",message="spec.forProvider.interfaceAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   IPsecTunnelSpec   `json:"spec"`
	Status IPsecTunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPsecTunnelList contains a list of IPsecTunnels
type IPsecTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPsecTunnel `json:"items"`
}

// Repository type metadata.
var (
	IPsecTunnel_Kind             = "IPsecTunnel"
	IPsecTunnel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPsecTunnel_Kind}.String()
	IPsecTunnel_KindAPIVersion   = IPsecTunnel_Kind + "." + CRDGroupVersion.String()
	IPsecTunnel_GroupVersionKind = CRDGroupVersion.WithKind(IPsecTunnel_Kind)
)

func init() {
	SchemeBuilder.Register(&IPsecTunnel{}, &IPsecTunnelList{})
}
