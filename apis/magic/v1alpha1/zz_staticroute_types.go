/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticRouteObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StaticRouteParameters struct {

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ColoNames []*string `json:"coloNames,omitempty" tf:"colo_names,omitempty"`

	// +kubebuilder:validation:Optional
	ColoRegions []*string `json:"coloRegions,omitempty" tf:"colo_regions,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Nexthop *string `json:"nexthop" tf:"nexthop,omitempty"`

	// +kubebuilder:validation:Required
	Prefix *string `json:"prefix" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// StaticRouteSpec defines the desired state of StaticRoute
type StaticRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticRouteParameters `json:"forProvider"`
}

// StaticRouteStatus defines the observed state of StaticRoute.
type StaticRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRoute is the Schema for the StaticRoutes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type StaticRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StaticRouteSpec   `json:"spec"`
	Status            StaticRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRouteList contains a list of StaticRoutes
type StaticRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticRoute `json:"items"`
}

// Repository type metadata.
var (
	StaticRoute_Kind             = "StaticRoute"
	StaticRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StaticRoute_Kind}.String()
	StaticRoute_KindAPIVersion   = StaticRoute_Kind + "." + CRDGroupVersion.String()
	StaticRoute_GroupVersionKind = CRDGroupVersion.WithKind(StaticRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&StaticRoute{}, &StaticRouteList{})
}
