/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegionalHostnameInitParameters struct {

	// The hostname to regionalize.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The region key. See [the full region list](https://developers.cloudflare.com/data-localization/regional-services/get-started/).
	RegionKey *string `json:"regionKey,omitempty" tf:"region_key,omitempty"`
}

type RegionalHostnameObservation struct {

	// The RFC3339 timestamp of when the hostname was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// The hostname to regionalize.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The region key. See [the full region list](https://developers.cloudflare.com/data-localization/regional-services/get-started/).
	RegionKey *string `json:"regionKey,omitempty" tf:"region_key,omitempty"`

	// The zone identifier to target for the resource.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RegionalHostnameParameters struct {

	// The hostname to regionalize.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The region key. See [the full region list](https://developers.cloudflare.com/data-localization/regional-services/get-started/).
	// +kubebuilder:validation:Optional
	RegionKey *string `json:"regionKey,omitempty" tf:"region_key,omitempty"`

	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// RegionalHostnameSpec defines the desired state of RegionalHostname
type RegionalHostnameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegionalHostnameParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegionalHostnameInitParameters `json:"initProvider,omitempty"`
}

// RegionalHostnameStatus defines the observed state of RegionalHostname.
type RegionalHostnameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionalHostnameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegionalHostname is the Schema for the RegionalHostnames API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type RegionalHostname struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || has(self.initProvider.hostname)",message="hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regionKey) || has(self.initProvider.regionKey)",message="regionKey is a required parameter"
	Spec   RegionalHostnameSpec   `json:"spec"`
	Status RegionalHostnameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionalHostnameList contains a list of RegionalHostnames
type RegionalHostnameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionalHostname `json:"items"`
}

// Repository type metadata.
var (
	RegionalHostname_Kind             = "RegionalHostname"
	RegionalHostname_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegionalHostname_Kind}.String()
	RegionalHostname_KindAPIVersion   = RegionalHostname_Kind + "." + CRDGroupVersion.String()
	RegionalHostname_GroupVersionKind = CRDGroupVersion.WithKind(RegionalHostname_Kind)
)

func init() {
	SchemeBuilder.Register(&RegionalHostname{}, &RegionalHostnameList{})
}
