/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeysConfigurationInitParameters struct {

	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays *float64 `json:"keyRotationIntervalDays,omitempty" tf:"key_rotation_interval_days,omitempty"`
}

type KeysConfigurationObservation struct {

	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays *float64 `json:"keyRotationIntervalDays,omitempty" tf:"key_rotation_interval_days,omitempty"`
}

type KeysConfigurationParameters struct {

	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// Number of days to trigger a rotation of the keys.
	// +kubebuilder:validation:Optional
	KeyRotationIntervalDays *float64 `json:"keyRotationIntervalDays,omitempty" tf:"key_rotation_interval_days,omitempty"`
}

// KeysConfigurationSpec defines the desired state of KeysConfiguration
type KeysConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeysConfigurationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeysConfigurationInitParameters `json:"initProvider,omitempty"`
}

// KeysConfigurationStatus defines the observed state of KeysConfiguration.
type KeysConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeysConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeysConfiguration is the Schema for the KeysConfigurations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type KeysConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeysConfigurationSpec   `json:"spec"`
	Status            KeysConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeysConfigurationList contains a list of KeysConfigurations
type KeysConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeysConfiguration `json:"items"`
}

// Repository type metadata.
var (
	KeysConfiguration_Kind             = "KeysConfiguration"
	KeysConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeysConfiguration_Kind}.String()
	KeysConfiguration_KindAPIVersion   = KeysConfiguration_Kind + "." + CRDGroupVersion.String()
	KeysConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(KeysConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&KeysConfiguration{}, &KeysConfigurationList{})
}
