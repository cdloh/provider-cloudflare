/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIShieldObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type APIShieldParameters struct {

	// Characteristics define properties across which auth-ids can be computed in a privacy-preserving manner.
	// +kubebuilder:validation:Optional
	AuthIDCharacteristics []AuthIDCharacteristicsParameters `json:"authIdCharacteristics,omitempty" tf:"auth_id_characteristics,omitempty"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type AuthIDCharacteristicsObservation struct {
}

type AuthIDCharacteristicsParameters struct {

	// The name of the characteristic.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of characteristic. Available values: `header`, `cookie`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// APIShieldSpec defines the desired state of APIShield
type APIShieldSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APIShieldParameters `json:"forProvider"`
}

// APIShieldStatus defines the observed state of APIShield.
type APIShieldStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APIShieldObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// APIShield is the Schema for the APIShields API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type APIShield struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APIShieldSpec   `json:"spec"`
	Status            APIShieldStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APIShieldList contains a list of APIShields
type APIShieldList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APIShield `json:"items"`
}

// Repository type metadata.
var (
	APIShield_Kind             = "APIShield"
	APIShield_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APIShield_Kind}.String()
	APIShield_KindAPIVersion   = APIShield_Kind + "." + CRDGroupVersion.String()
	APIShield_GroupVersionKind = CRDGroupVersion.WithKind(APIShield_Kind)
)

func init() {
	SchemeBuilder.Register(&APIShield{}, &APIShieldList{})
}
