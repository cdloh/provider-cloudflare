/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OverrideID *string `json:"overrideId,omitempty" tf:"override_id,omitempty"`
}

type OverrideParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Groups map[string]*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	RewriteAction map[string]*string `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`

	// +kubebuilder:validation:Optional
	Rules map[string]*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Required
	Urls []*string `json:"urls" tf:"urls,omitempty"`

	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +crossplane:generate:reference:refFieldName=ZoneIDRefs
	// +crossplane:generate:reference:selectorFieldName=ZoneIDSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRefs *v1.Reference `json:"zoneIdRefs,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// OverrideSpec defines the desired state of Override
type OverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OverrideParameters `json:"forProvider"`
}

// OverrideStatus defines the observed state of Override.
type OverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Override is the Schema for the Overrides API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Override struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OverrideSpec   `json:"spec"`
	Status            OverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OverrideList contains a list of Overrides
type OverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Override `json:"items"`
}

// Repository type metadata.
var (
	Override_Kind             = "Override"
	Override_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Override_Kind}.String()
	Override_KindAPIVersion   = Override_Kind + "." + CRDGroupVersion.String()
	Override_GroupVersionKind = CRDGroupVersion.WithKind(Override_Kind)
)

func init() {
	SchemeBuilder.Register(&Override{}, &OverrideList{})
}
