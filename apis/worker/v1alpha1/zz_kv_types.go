/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KvObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KvParameters struct {

	// The account identifier to target for the resource.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Name of the KV pair. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// The ID of the Workers KV namespace in which you want to create the KV pair. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=KVNamespace
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// Reference to a KVNamespace to populate namespaceId.
	// +kubebuilder:validation:Optional
	NamespaceIDRef *v1.Reference `json:"namespaceIdRef,omitempty" tf:"-"`

	// Selector for a KVNamespace to populate namespaceId.
	// +kubebuilder:validation:Optional
	NamespaceIDSelector *v1.Selector `json:"namespaceIdSelector,omitempty" tf:"-"`

	// Value of the KV pair.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// KvSpec defines the desired state of Kv
type KvSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KvParameters `json:"forProvider"`
}

// KvStatus defines the observed state of Kv.
type KvStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KvObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Kv is the Schema for the Kvs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Kv struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KvSpec   `json:"spec"`
	Status            KvStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KvList contains a list of Kvs
type KvList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Kv `json:"items"`
}

// Repository type metadata.
var (
	Kv_Kind             = "Kv"
	Kv_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Kv_Kind}.String()
	Kv_KindAPIVersion   = Kv_Kind + "." + CRDGroupVersion.String()
	Kv_GroupVersionKind = CRDGroupVersion.WithKind(Kv_Kind)
)

func init() {
	SchemeBuilder.Register(&Kv{}, &KvList{})
}
