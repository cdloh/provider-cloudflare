// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CronTriggerInitParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/account/v1alpha1.Account
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Set of String) Cron expressions to execute the Worker script.
	// Cron expressions to execute the Worker script.
	// +listType=set
	Schedules []*string `json:"schedules,omitempty" tf:"schedules,omitempty"`

	// (String) Worker script to target for the schedules.
	// Worker script to target for the schedules.
	// +crossplane:generate:reference:type=Script
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// Reference to a Script to populate scriptName.
	// +kubebuilder:validation:Optional
	ScriptNameRef *v1.Reference `json:"scriptNameRef,omitempty" tf:"-"`

	// Selector for a Script to populate scriptName.
	// +kubebuilder:validation:Optional
	ScriptNameSelector *v1.Selector `json:"scriptNameSelector,omitempty" tf:"-"`
}

type CronTriggerObservation struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Cron expressions to execute the Worker script.
	// Cron expressions to execute the Worker script.
	// +listType=set
	Schedules []*string `json:"schedules,omitempty" tf:"schedules,omitempty"`

	// (String) Worker script to target for the schedules.
	// Worker script to target for the schedules.
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`
}

type CronTriggerParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Set of String) Cron expressions to execute the Worker script.
	// Cron expressions to execute the Worker script.
	// +kubebuilder:validation:Optional
	// +listType=set
	Schedules []*string `json:"schedules,omitempty" tf:"schedules,omitempty"`

	// (String) Worker script to target for the schedules.
	// Worker script to target for the schedules.
	// +crossplane:generate:reference:type=Script
	// +kubebuilder:validation:Optional
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// Reference to a Script to populate scriptName.
	// +kubebuilder:validation:Optional
	ScriptNameRef *v1.Reference `json:"scriptNameRef,omitempty" tf:"-"`

	// Selector for a Script to populate scriptName.
	// +kubebuilder:validation:Optional
	ScriptNameSelector *v1.Selector `json:"scriptNameSelector,omitempty" tf:"-"`
}

// CronTriggerSpec defines the desired state of CronTrigger
type CronTriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CronTriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CronTriggerInitParameters `json:"initProvider,omitempty"`
}

// CronTriggerStatus defines the observed state of CronTrigger.
type CronTriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CronTriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CronTrigger is the Schema for the CronTriggers API. Worker Cron Triggers allow users to map a cron expression to a Worker script using a ScheduledEvent listener that enables Workers to be executed on a schedule. Worker Cron Triggers are ideal for running periodic jobs for maintenance or calling third-party APIs to collect up-to-date data.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type CronTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schedules) || (has(self.initProvider) && has(self.initProvider.schedules))",message="spec.forProvider.schedules is a required parameter"
	Spec   CronTriggerSpec   `json:"spec"`
	Status CronTriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CronTriggerList contains a list of CronTriggers
type CronTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CronTrigger `json:"items"`
}

// Repository type metadata.
var (
	CronTrigger_Kind             = "CronTrigger"
	CronTrigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CronTrigger_Kind}.String()
	CronTrigger_KindAPIVersion   = CronTrigger_Kind + "." + CRDGroupVersion.String()
	CronTrigger_GroupVersionKind = CRDGroupVersion.WithKind(CronTrigger_Kind)
)

func init() {
	SchemeBuilder.Register(&CronTrigger{}, &CronTriggerList{})
}
