/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KVNamespaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KVNamespaceParameters struct {

	// The account identifier to target for the resource.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Title value of the Worker KV Namespace.
	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

// KVNamespaceSpec defines the desired state of KVNamespace
type KVNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KVNamespaceParameters `json:"forProvider"`
}

// KVNamespaceStatus defines the observed state of KVNamespace.
type KVNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KVNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KVNamespace is the Schema for the KVNamespaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type KVNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KVNamespaceSpec   `json:"spec"`
	Status            KVNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KVNamespaceList contains a list of KVNamespaces
type KVNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KVNamespace `json:"items"`
}

// Repository type metadata.
var (
	KVNamespace_Kind             = "KVNamespace"
	KVNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KVNamespace_Kind}.String()
	KVNamespace_KindAPIVersion   = KVNamespace_Kind + "." + CRDGroupVersion.String()
	KVNamespace_GroupVersionKind = CRDGroupVersion.WithKind(KVNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&KVNamespace{}, &KVNamespaceList{})
}
