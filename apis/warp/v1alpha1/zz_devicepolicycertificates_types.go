/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevicePolicyCertificatesInitParameters struct {

	// True if certificate generation is enabled.
	// `true` if certificate generation is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type DevicePolicyCertificatesObservation struct {

	// True if certificate generation is enabled.
	// `true` if certificate generation is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// ID of the device policy certificates setting.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The zone ID where certificate generation is allowed.
	// The zone identifier to target for the resource.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DevicePolicyCertificatesParameters struct {

	// True if certificate generation is enabled.
	// `true` if certificate generation is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The zone ID where certificate generation is allowed.
	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// DevicePolicyCertificatesSpec defines the desired state of DevicePolicyCertificates
type DevicePolicyCertificatesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevicePolicyCertificatesParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DevicePolicyCertificatesInitParameters `json:"initProvider,omitempty"`
}

// DevicePolicyCertificatesStatus defines the observed state of DevicePolicyCertificates.
type DevicePolicyCertificatesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevicePolicyCertificatesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePolicyCertificates is the Schema for the DevicePolicyCertificatess API. Provides a Cloudflare Device Policy Certificates resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type DevicePolicyCertificates struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || has(self.initProvider.enabled)",message="enabled is a required parameter"
	Spec   DevicePolicyCertificatesSpec   `json:"spec"`
	Status DevicePolicyCertificatesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePolicyCertificatesList contains a list of DevicePolicyCertificatess
type DevicePolicyCertificatesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevicePolicyCertificates `json:"items"`
}

// Repository type metadata.
var (
	DevicePolicyCertificates_Kind             = "DevicePolicyCertificates"
	DevicePolicyCertificates_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevicePolicyCertificates_Kind}.String()
	DevicePolicyCertificates_KindAPIVersion   = DevicePolicyCertificates_Kind + "." + CRDGroupVersion.String()
	DevicePolicyCertificates_GroupVersionKind = CRDGroupVersion.WithKind(DevicePolicyCertificates_Kind)
)

func init() {
	SchemeBuilder.Register(&DevicePolicyCertificates{}, &DevicePolicyCertificatesList{})
}
