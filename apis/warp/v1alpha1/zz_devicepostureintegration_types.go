/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigObservation struct {
}

type ConfigParameters struct {

	// +kubebuilder:validation:Optional
	APIURL *string `json:"apiUrl,omitempty" tf:"api_url,omitempty"`

	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientKeySecretRef *v1.SecretKeySelector `json:"clientKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CustomerID *string `json:"customerId,omitempty" tf:"customer_id,omitempty"`
}

type DevicePostureIntegrationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DevicePostureIntegrationParameters struct {

	// The account identifier to target for the resource.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DevicePostureIntegrationSpec defines the desired state of DevicePostureIntegration
type DevicePostureIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevicePostureIntegrationParameters `json:"forProvider"`
}

// DevicePostureIntegrationStatus defines the observed state of DevicePostureIntegration.
type DevicePostureIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevicePostureIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePostureIntegration is the Schema for the DevicePostureIntegrations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type DevicePostureIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevicePostureIntegrationSpec   `json:"spec"`
	Status            DevicePostureIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePostureIntegrationList contains a list of DevicePostureIntegrations
type DevicePostureIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevicePostureIntegration `json:"items"`
}

// Repository type metadata.
var (
	DevicePostureIntegration_Kind             = "DevicePostureIntegration"
	DevicePostureIntegration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevicePostureIntegration_Kind}.String()
	DevicePostureIntegration_KindAPIVersion   = DevicePostureIntegration_Kind + "." + CRDGroupVersion.String()
	DevicePostureIntegration_GroupVersionKind = CRDGroupVersion.WithKind(DevicePostureIntegration_Kind)
)

func init() {
	SchemeBuilder.Register(&DevicePostureIntegration{}, &DevicePostureIntegrationList{})
}
