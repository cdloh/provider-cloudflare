/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionInitParameters struct {

	// Type of supported action. Available values: `drop`, `forward`, `worker`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A list with items in the following form.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ActionObservation struct {

	// Type of supported action. Available values: `drop`, `forward`, `worker`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A list with items in the following form.
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ActionParameters struct {

	// Type of supported action. Available values: `drop`, `forward`, `worker`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A list with items in the following form.
	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatchAllInitParameters struct {

	// List actions patterns.
	Action []ActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Matching patterns to forward to your actions.
	Matcher []MatcherInitParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// Routing rule name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CatchAllObservation struct {

	// List actions patterns.
	Action []ActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Matching patterns to forward to your actions.
	Matcher []MatcherObservation `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// Routing rule name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Routing rule identifier.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The zone identifier to target for the resource.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type CatchAllParameters struct {

	// List actions patterns.
	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// Routing rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Matching patterns to forward to your actions.
	// +kubebuilder:validation:Optional
	Matcher []MatcherParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// Routing rule name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The zone identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/clementblaise/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type MatcherInitParameters struct {

	// Type of matcher. Available values: `all`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatcherObservation struct {

	// Type of matcher. Available values: `all`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatcherParameters struct {

	// Type of matcher. Available values: `all`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CatchAllSpec defines the desired state of CatchAll
type CatchAllSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatchAllParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CatchAllInitParameters `json:"initProvider,omitempty"`
}

// CatchAllStatus defines the observed state of CatchAll.
type CatchAllStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatchAllObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CatchAll is the Schema for the CatchAlls API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type CatchAll struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || has(self.initProvider.action)",message="action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.matcher) || has(self.initProvider.matcher)",message="matcher is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   CatchAllSpec   `json:"spec"`
	Status CatchAllStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatchAllList contains a list of CatchAlls
type CatchAllList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatchAll `json:"items"`
}

// Repository type metadata.
var (
	CatchAll_Kind             = "CatchAll"
	CatchAll_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatchAll_Kind}.String()
	CatchAll_KindAPIVersion   = CatchAll_Kind + "." + CRDGroupVersion.String()
	CatchAll_GroupVersionKind = CRDGroupVersion.WithKind(CatchAll_Kind)
)

func init() {
	SchemeBuilder.Register(&CatchAll{}, &CatchAllList{})
}
