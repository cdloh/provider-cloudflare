/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventObservation struct {

	// Creation time.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last modified time.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`
}

type EventParameters struct {

	// This is a templated html file that will be rendered at the edge.
	// +kubebuilder:validation:Optional
	CustomPageHTML *string `json:"customPageHtml,omitempty" tf:"custom_page_html,omitempty"`

	// A description to let users add more details about the event.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Disables automatic renewal of session cookies.
	// +kubebuilder:validation:Optional
	DisableSessionRenewal *bool `json:"disableSessionRenewal,omitempty" tf:"disable_session_renewal,omitempty"`

	// ISO 8601 timestamp that marks the end of the event. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	EventEndTime *string `json:"eventEndTime" tf:"event_end_time,omitempty"`

	// ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before `event_end_time`. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	EventStartTime *string `json:"eventStartTime" tf:"event_start_time,omitempty"`

	// A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The number of new users that will be let into the route every minute.
	// +kubebuilder:validation:Optional
	NewUsersPerMinute *float64 `json:"newUsersPerMinute,omitempty" tf:"new_users_per_minute,omitempty"`

	// ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before `event_start_time`.
	// +kubebuilder:validation:Optional
	PrequeueStartTime *string `json:"prequeueStartTime,omitempty" tf:"prequeue_start_time,omitempty"`

	// The queueing method used by the waiting room. Available values: `fifo`, `random`, `passthrough`, `reject`.
	// +kubebuilder:validation:Optional
	QueueingMethod *string `json:"queueingMethod,omitempty" tf:"queueing_method,omitempty"`

	// Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
	// +kubebuilder:validation:Optional
	SessionDuration *float64 `json:"sessionDuration,omitempty" tf:"session_duration,omitempty"`

	// Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Defaults to `false`.
	// +kubebuilder:validation:Optional
	ShuffleAtEventStart *bool `json:"shuffleAtEventStart,omitempty" tf:"shuffle_at_event_start,omitempty"`

	// If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
	// +kubebuilder:validation:Optional
	Suspended *bool `json:"suspended,omitempty" tf:"suspended,omitempty"`

	// The total number of active user sessions on the route at a point in time.
	// +kubebuilder:validation:Optional
	TotalActiveUsers *float64 `json:"totalActiveUsers,omitempty" tf:"total_active_users,omitempty"`

	// The Waiting Room ID the event should apply to. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=Room
	// +kubebuilder:validation:Optional
	WaitingRoomID *string `json:"waitingRoomId,omitempty" tf:"waiting_room_id,omitempty"`

	// Reference to a Room to populate waitingRoomId.
	// +kubebuilder:validation:Optional
	WaitingRoomIDRef *v1.Reference `json:"waitingRoomIdRef,omitempty" tf:"-"`

	// Selector for a Room to populate waitingRoomId.
	// +kubebuilder:validation:Optional
	WaitingRoomIDSelector *v1.Selector `json:"waitingRoomIdSelector,omitempty" tf:"-"`

	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/cdloh/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// EventSpec defines the desired state of Event
type EventSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventParameters `json:"forProvider"`
}

// EventStatus defines the observed state of Event.
type EventStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Event is the Schema for the Events API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Event struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSpec   `json:"spec"`
	Status            EventStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventList contains a list of Events
type EventList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Event `json:"items"`
}

// Repository type metadata.
var (
	Event_Kind             = "Event"
	Event_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Event_Kind}.String()
	Event_KindAPIVersion   = Event_Kind + "." + CRDGroupVersion.String()
	Event_GroupVersionKind = CRDGroupVersion.WithKind(Event_Kind)
)

func init() {
	SchemeBuilder.Register(&Event{}, &EventList{})
}
